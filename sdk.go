// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package ascendsdkgo

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/hooks"
	"github.com/afs-public/ascend-sdk-go/internal/utils"
	"github.com/afs-public/ascend-sdk-go/models/components"
	"github.com/afs-public/ascend-sdk-go/retry"
)

const (
	// our uat environment
	ServerUat string = "uat"
	// our production environment
	ServerProd string = "prod"
	// our sandbox environment
	ServerSbx string = "sbx"
)

// ServerList contains the list of servers available to the SDK
var ServerList = map[string]string{
	ServerUat:  "https://uat.apexapis.com",
	ServerProd: "https://api.apexapis.com",
	ServerSbx:  "https://sbx.apexapis.com",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

type sdkConfiguration struct {
	Client            HTTPClient
	Security          func(context.Context) (interface{}, error)
	ServerURL         string
	Server            string
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
	UserAgent         string
	RetryConfig       *retry.Config
	Hooks             *hooks.Hooks
	Timeout           *time.Duration
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	if c.ServerURL != "" {
		return c.ServerURL, nil
	}

	if c.Server == "" {
		c.Server = "uat"
	}

	return ServerList[c.Server], nil
}

// SDK - Ascend OpenAPI: Combined Ascend OpenAPI spec for SDK generation
type SDK struct {
	Authentication           *Authentication
	Reader                   *Reader
	Subscriber               *Subscriber
	PersonManagement         *PersonManagement
	AccountCreation          *AccountCreation
	AccountManagement        *AccountManagement
	EnrollmentsAndAgreements *EnrollmentsAndAgreements
	Investigations           *Investigations
	BankRelationships        *BankRelationships
	ACHTransfers             *ACHTransfers
	InstantCashTransferICT   *InstantCashTransferICT
	Retirements              *Retirements
	Journals                 *Journals
	ScheduleTransfers        *ScheduleTransfers
	Wires                    *Wires
	CashBalances             *CashBalances
	FeesAndCredits           *FeesAndCredits
	TestSimulation           *TestSimulation
	AccountTransfers         *AccountTransfers
	CreateOrder              *CreateOrder
	FixedIncomePricing       *FixedIncomePricing
	BasketOrders             *BasketOrders
	TradeBooking             *TradeBooking
	TradeAllocation          *TradeAllocation
	Assets                   *Assets
	Ledger                   *Ledger
	Margins                  *Margins
	InvestorDocs             *InvestorDocs
	DataRetrieval            *DataRetrieval

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServer allows the overriding of the default server by name
func WithServer(server string) SDKOption {
	return func(sdk *SDK) {
		_, ok := ServerList[server]
		if !ok {
			panic(fmt.Errorf("server %s not found", server))
		}

		sdk.sdkConfiguration.Server = server
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security components.Security) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *SDK) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		sdkConfiguration: sdkConfiguration{
			Language:          "go",
			OpenAPIDocVersion: "v1:20250617:uat:6f66f0a5cade",
			SDKVersion:        "1.0.4",
			GenVersion:        "2.437.1",
			UserAgent:         "speakeasy-sdk/go 1.0.4 2.437.1 v1:20250617:uat:6f66f0a5cade github.com/afs-public/ascend-sdk-go",
			Hooks:             hooks.New(),
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.sdkConfiguration.Hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if serverURL != currentServerURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.Authentication = newAuthentication(sdk.sdkConfiguration)

	sdk.Reader = newReader(sdk.sdkConfiguration)

	sdk.Subscriber = newSubscriber(sdk.sdkConfiguration)

	sdk.PersonManagement = newPersonManagement(sdk.sdkConfiguration)

	sdk.AccountCreation = newAccountCreation(sdk.sdkConfiguration)

	sdk.AccountManagement = newAccountManagement(sdk.sdkConfiguration)

	sdk.EnrollmentsAndAgreements = newEnrollmentsAndAgreements(sdk.sdkConfiguration)

	sdk.Investigations = newInvestigations(sdk.sdkConfiguration)

	sdk.BankRelationships = newBankRelationships(sdk.sdkConfiguration)

	sdk.ACHTransfers = newACHTransfers(sdk.sdkConfiguration)

	sdk.InstantCashTransferICT = newInstantCashTransferICT(sdk.sdkConfiguration)

	sdk.Retirements = newRetirements(sdk.sdkConfiguration)

	sdk.Journals = newJournals(sdk.sdkConfiguration)

	sdk.ScheduleTransfers = newScheduleTransfers(sdk.sdkConfiguration)

	sdk.Wires = newWires(sdk.sdkConfiguration)

	sdk.CashBalances = newCashBalances(sdk.sdkConfiguration)

	sdk.FeesAndCredits = newFeesAndCredits(sdk.sdkConfiguration)

	sdk.TestSimulation = newTestSimulation(sdk.sdkConfiguration)

	sdk.AccountTransfers = newAccountTransfers(sdk.sdkConfiguration)

	sdk.CreateOrder = newCreateOrder(sdk.sdkConfiguration)

	sdk.FixedIncomePricing = newFixedIncomePricing(sdk.sdkConfiguration)

	sdk.BasketOrders = newBasketOrders(sdk.sdkConfiguration)

	sdk.TradeBooking = newTradeBooking(sdk.sdkConfiguration)

	sdk.TradeAllocation = newTradeAllocation(sdk.sdkConfiguration)

	sdk.Assets = newAssets(sdk.sdkConfiguration)

	sdk.Ledger = newLedger(sdk.sdkConfiguration)

	sdk.Margins = newMargins(sdk.sdkConfiguration)

	sdk.InvestorDocs = newInvestorDocs(sdk.sdkConfiguration)

	sdk.DataRetrieval = newDataRetrieval(sdk.sdkConfiguration)

	return sdk
}
