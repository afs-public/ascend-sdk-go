// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/afs-public/ascend-sdk-go/models/components"
)

type AccountTransfersCreateTransferRequest struct {
	// The correspondent id.
	CorrespondentID string `pathParam:"style=simple,explode=false,name=correspondent_id"`
	// The account id.
	AccountID string `pathParam:"style=simple,explode=false,name=account_id"`
	// A client-specified ID for the account transfer; no specific pattern is imposed. This field is used for idempotency to ensure that repeated requests with the same ID do not result in duplicate transfers.
	RequestID      *string                   `queryParam:"style=form,explode=true,name=request_id"`
	TransferCreate components.TransferCreate `request:"mediaType=application/json"`
}

func (o *AccountTransfersCreateTransferRequest) GetCorrespondentID() string {
	if o == nil {
		return ""
	}
	return o.CorrespondentID
}

func (o *AccountTransfersCreateTransferRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *AccountTransfersCreateTransferRequest) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *AccountTransfersCreateTransferRequest) GetTransferCreate() components.TransferCreate {
	if o == nil {
		return components.TransferCreate{}
	}
	return o.TransferCreate
}

type AccountTransfersCreateTransferResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	AcatsTransfer *components.AcatsTransfer
	// INVALID_ARGUMENT: The request has an invalid argument.
	Status *components.Status
}

func (o *AccountTransfersCreateTransferResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AccountTransfersCreateTransferResponse) GetAcatsTransfer() *components.AcatsTransfer {
	if o == nil {
		return nil
	}
	return o.AcatsTransfer
}

func (o *AccountTransfersCreateTransferResponse) GetStatus() *components.Status {
	if o == nil {
		return nil
	}
	return o.Status
}
