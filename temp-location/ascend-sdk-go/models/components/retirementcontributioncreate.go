// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// RetirementContributionCreateType - The type of retirement contribution.
type RetirementContributionCreateType string

const (
	RetirementContributionCreateTypeTypeUnspecified    RetirementContributionCreateType = "TYPE_UNSPECIFIED"
	RetirementContributionCreateTypeRegular            RetirementContributionCreateType = "REGULAR"
	RetirementContributionCreateTypeEmployee           RetirementContributionCreateType = "EMPLOYEE"
	RetirementContributionCreateTypeEmployer           RetirementContributionCreateType = "EMPLOYER"
	RetirementContributionCreateTypeRecharacterization RetirementContributionCreateType = "RECHARACTERIZATION"
	RetirementContributionCreateTypeRollover60Day      RetirementContributionCreateType = "ROLLOVER_60_DAY"
	RetirementContributionCreateTypeRolloverDirect     RetirementContributionCreateType = "ROLLOVER_DIRECT"
	RetirementContributionCreateTypeTransfer           RetirementContributionCreateType = "TRANSFER"
	RetirementContributionCreateTypeTrusteeFee         RetirementContributionCreateType = "TRUSTEE_FEE"
	RetirementContributionCreateTypeConversion         RetirementContributionCreateType = "CONVERSION"
	RetirementContributionCreateTypeRepayment          RetirementContributionCreateType = "REPAYMENT"
)

func (e RetirementContributionCreateType) ToPointer() *RetirementContributionCreateType {
	return &e
}
func (e *RetirementContributionCreateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "REGULAR":
		fallthrough
	case "EMPLOYEE":
		fallthrough
	case "EMPLOYER":
		fallthrough
	case "RECHARACTERIZATION":
		fallthrough
	case "ROLLOVER_60_DAY":
		fallthrough
	case "ROLLOVER_DIRECT":
		fallthrough
	case "TRANSFER":
		fallthrough
	case "TRUSTEE_FEE":
		fallthrough
	case "CONVERSION":
		fallthrough
	case "REPAYMENT":
		*e = RetirementContributionCreateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetirementContributionCreateType: %v", v)
	}
}

// RetirementContributionCreate - A contribution to a retirement account.
type RetirementContributionCreate struct {
	// Tax year for which the contribution is applied. Current year is always valid; prior year is only valid before tax deadline. Must be in "YYYY" format.
	TaxYear int `json:"tax_year"`
	// The type of retirement contribution.
	Type RetirementContributionCreateType `json:"type"`
}

func (o *RetirementContributionCreate) GetTaxYear() int {
	if o == nil {
		return 0
	}
	return o.TaxYear
}

func (o *RetirementContributionCreate) GetType() RetirementContributionCreateType {
	if o == nil {
		return RetirementContributionCreateType("")
	}
	return o.Type
}
