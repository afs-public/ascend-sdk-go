// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// TrustedContactUpdate - A Trusted Contact is a person designated to verify the well being of the account holder. Only one form of contact information is required; An account may contain zero, one, or many.
type TrustedContactUpdate struct {
	// An email address indicated for account communications.
	EmailAddress *string `json:"email_address,omitempty"`
	// Family name of a natural person.
	FamilyName *string `json:"family_name,omitempty"`
	// The given name of a natural person; Conventionally known as 'first name' in most English-speaking countries.
	GivenName *string `json:"given_name,omitempty"`
	// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains).
	//
	//  In typical usage an address would be created via user input or from importing existing data, depending on the type of process.
	//
	//  Advice on address input / editing: - Use an i18n-ready address widget such as  https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of  fields outside countries where that field is used.
	//
	//  For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
	MailingAddress *PostalAddressUpdate `json:"mailing_address,omitempty"`
	// Non-primary names representing a natural person; Name attributed to a person other than "Given" and "Family" names.
	MiddleNames *string `json:"middle_names,omitempty"`
	// An object representing a phone number, suitable as an API wire format.
	//
	//  This representation:
	//
	//  - should not be used for locale-specific formatting of a phone number, such  as "+1 (650) 253-0000 ext. 123"
	//
	//  - is not designed for efficient storage - may not be suitable for dialing - specialized libraries (see references)  should be used to parse the number for that purpose
	//
	//  To do something meaningful with this number, such as format it for various use-cases, convert it to an `i18n.phonenumbers.PhoneNumber` object first.
	//
	//  For instance, in Java this would be:
	//
	//   com.google.type.PhoneNumber wireProto =    com.google.type.PhoneNumber.newBuilder().build();  com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber =    PhoneNumberUtil.getInstance().parse(wireProto.getE164Number(), "ZZ");  if (!wireProto.getExtension().isEmpty()) {   phoneNumber.setExtension(wireProto.getExtension());  }
	//
	//  Reference(s):
	//   - https://github.com/google/libphonenumber
	PhoneNumber *PhoneNumberUpdate `json:"phone_number,omitempty"`
}

func (o *TrustedContactUpdate) GetEmailAddress() *string {
	if o == nil {
		return nil
	}
	return o.EmailAddress
}

func (o *TrustedContactUpdate) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *TrustedContactUpdate) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *TrustedContactUpdate) GetMailingAddress() *PostalAddressUpdate {
	if o == nil {
		return nil
	}
	return o.MailingAddress
}

func (o *TrustedContactUpdate) GetMiddleNames() *string {
	if o == nil {
		return nil
	}
	return o.MiddleNames
}

func (o *TrustedContactUpdate) GetPhoneNumber() *PhoneNumberUpdate {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}
