// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// InvestigationLegalAddress - legal address
type InvestigationLegalAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *InvestigationLegalAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *InvestigationLegalAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *InvestigationLegalAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *InvestigationLegalAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *InvestigationLegalAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *InvestigationLegalAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *InvestigationLegalAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *InvestigationLegalAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *InvestigationLegalAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *InvestigationLegalAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *InvestigationLegalAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// Entity - investigation details on an entity
type Entity struct {
	// Other names the entity is known by (Doing Business As)
	DbaNames []string `json:"dba_names,omitempty"`
	// Email addresses
	EmailAddresses []string `json:"email_addresses,omitempty"`
	// Identification details including id value, and type (e.g. ein, lei)
	Identifications []EntityIdentification `json:"identifications,omitempty"`
	// legal address
	LegalAddress *InvestigationLegalAddress `json:"legal_address,omitempty"`
	// The legal name of the entity
	LegalName *string `json:"legal_name,omitempty"`
	// mailing address
	MailingAddresses []PostalAddress `json:"mailing_addresses,omitempty"`
	// The countries where an entity does business Two character region code, complies with https://cldr.unicode.org/index Example values: "US", "CA"
	OperatingRegionCodes []string `json:"operating_region_codes,omitempty"`
	// phone numbers
	PhoneNumbers []string `json:"phone_numbers,omitempty"`
	// Region of registration Two character region code, complies with https://cldr.unicode.org/index Example values: "US", "CA"
	RegistrationRegion *string `json:"registration_region,omitempty"`
}

func (o *Entity) GetDbaNames() []string {
	if o == nil {
		return nil
	}
	return o.DbaNames
}

func (o *Entity) GetEmailAddresses() []string {
	if o == nil {
		return nil
	}
	return o.EmailAddresses
}

func (o *Entity) GetIdentifications() []EntityIdentification {
	if o == nil {
		return nil
	}
	return o.Identifications
}

func (o *Entity) GetLegalAddress() *InvestigationLegalAddress {
	if o == nil {
		return nil
	}
	return o.LegalAddress
}

func (o *Entity) GetLegalName() *string {
	if o == nil {
		return nil
	}
	return o.LegalName
}

func (o *Entity) GetMailingAddresses() []PostalAddress {
	if o == nil {
		return nil
	}
	return o.MailingAddresses
}

func (o *Entity) GetOperatingRegionCodes() []string {
	if o == nil {
		return nil
	}
	return o.OperatingRegionCodes
}

func (o *Entity) GetPhoneNumbers() []string {
	if o == nil {
		return nil
	}
	return o.PhoneNumbers
}

func (o *Entity) GetRegistrationRegion() *string {
	if o == nil {
		return nil
	}
	return o.RegistrationRegion
}

// IdentityVerification - Indicates the current state of identity verification
type IdentityVerification string

const (
	IdentityVerificationScreenStateUnspecified IdentityVerification = "SCREEN_STATE_UNSPECIFIED"
	IdentityVerificationPending                IdentityVerification = "PENDING"
	IdentityVerificationPassed                 IdentityVerification = "PASSED"
	IdentityVerificationFailed                 IdentityVerification = "FAILED"
	IdentityVerificationNeedsReview            IdentityVerification = "NEEDS_REVIEW"
	IdentityVerificationDeferredReview         IdentityVerification = "DEFERRED_REVIEW"
	IdentityVerificationOutOfScope             IdentityVerification = "OUT_OF_SCOPE"
)

func (e IdentityVerification) ToPointer() *IdentityVerification {
	return &e
}
func (e *IdentityVerification) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SCREEN_STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		fallthrough
	case "NEEDS_REVIEW":
		fallthrough
	case "DEFERRED_REVIEW":
		fallthrough
	case "OUT_OF_SCOPE":
		*e = IdentityVerification(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IdentityVerification: %v", v)
	}
}

// IdentityVerificationScope - Used to determine who is responsible for running identity verification checks
type IdentityVerificationScope string

const (
	IdentityVerificationScopeIdentityVerificationScopeUnspecified IdentityVerificationScope = "IDENTITY_VERIFICATION_SCOPE_UNSPECIFIED"
	IdentityVerificationScopePerformedByApex                      IdentityVerificationScope = "PERFORMED_BY_APEX"
	IdentityVerificationScopeProvidedByClient                     IdentityVerificationScope = "PROVIDED_BY_CLIENT"
)

func (e IdentityVerificationScope) ToPointer() *IdentityVerificationScope {
	return &e
}
func (e *IdentityVerificationScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IDENTITY_VERIFICATION_SCOPE_UNSPECIFIED":
		fallthrough
	case "PERFORMED_BY_APEX":
		fallthrough
	case "PROVIDED_BY_CLIENT":
		*e = IdentityVerificationScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IdentityVerificationScope: %v", v)
	}
}

// InvestigationRequestState - Current state of investigation request
type InvestigationRequestState string

const (
	InvestigationRequestStateInvestigationRequestStateUnspecified InvestigationRequestState = "INVESTIGATION_REQUEST_STATE_UNSPECIFIED"
	InvestigationRequestStateOpen                                 InvestigationRequestState = "OPEN"
	InvestigationRequestStateClosed                               InvestigationRequestState = "CLOSED"
)

func (e InvestigationRequestState) ToPointer() *InvestigationRequestState {
	return &e
}
func (e *InvestigationRequestState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INVESTIGATION_REQUEST_STATE_UNSPECIFIED":
		fallthrough
	case "OPEN":
		fallthrough
	case "CLOSED":
		*e = InvestigationRequestState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvestigationRequestState: %v", v)
	}
}

// InvestigationBirthDate - The legal day, month, and year of birth for a natural person Must be formatted as an ISO-8601 YYYY-MM-DD
type InvestigationBirthDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *InvestigationBirthDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *InvestigationBirthDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *InvestigationBirthDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// InvestigationPersonLegalAddress - legal address
type InvestigationPersonLegalAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *InvestigationPersonLegalAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *InvestigationPersonLegalAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *InvestigationPersonLegalAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *InvestigationPersonLegalAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *InvestigationPersonLegalAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *InvestigationPersonLegalAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *InvestigationPersonLegalAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *InvestigationPersonLegalAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *InvestigationPersonLegalAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *InvestigationPersonLegalAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *InvestigationPersonLegalAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// InvestigationNameSuffix - Suffix of the person's name
type InvestigationNameSuffix string

const (
	InvestigationNameSuffixNameSuffixUnspecified InvestigationNameSuffix = "NAME_SUFFIX_UNSPECIFIED"
	InvestigationNameSuffixSr                    InvestigationNameSuffix = "SR"
	InvestigationNameSuffixJr                    InvestigationNameSuffix = "JR"
	InvestigationNameSuffixIii                   InvestigationNameSuffix = "III"
	InvestigationNameSuffixIv                    InvestigationNameSuffix = "IV"
	InvestigationNameSuffixV                     InvestigationNameSuffix = "V"
)

func (e InvestigationNameSuffix) ToPointer() *InvestigationNameSuffix {
	return &e
}
func (e *InvestigationNameSuffix) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME_SUFFIX_UNSPECIFIED":
		fallthrough
	case "SR":
		fallthrough
	case "JR":
		fallthrough
	case "III":
		fallthrough
	case "IV":
		fallthrough
	case "V":
		*e = InvestigationNameSuffix(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvestigationNameSuffix: %v", v)
	}
}

// InvestigationExecutionDate - The date identity verification was performed. Must be formatted as an ISO-8601 YYYY-MM-DD
type InvestigationExecutionDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *InvestigationExecutionDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *InvestigationExecutionDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *InvestigationExecutionDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ProvidedIdentityVerification - Conditional: Identity Verification results must be provided by the correspondent if InvestigationRequestScope = PROVIDED_BY_CLIENT
type ProvidedIdentityVerification struct {
	// Indicates whether the identity's address was verified
	AddressVerified *bool `json:"address_verified,omitempty"`
	// Indicates whether the identity's date of birth was verified
	BirthDateVerified *bool `json:"birth_date_verified,omitempty"`
	// The date identity verification was performed. Must be formatted as an ISO-8601 YYYY-MM-DD
	ExecutionDate *InvestigationExecutionDate `json:"execution_date,omitempty"`
	// Client-generated identifier associated with the KYC results for the appropriate case
	ExternalCaseID *string `json:"external_case_id,omitempty"`
	// A collection of unique identifiers provided by the documents api that correspond to any number of identity verification documents used in support of the external vendor to verify the identity, such as a driver's license, passport, etc
	IdentityVerificationDocumentIds []string `json:"identity_verification_document_ids,omitempty"`
	// Indicates whether the identity's name was verified
	NameVerified *bool `json:"name_verified,omitempty"`
	// Id of this identity verification record
	ProvidedIdentityVerificationID *string `json:"provided_identity_verification_id,omitempty"`
	// A unique identifier provided from the documents api that corresponds to an identity verification result
	RawVendorDataDocumentID *string `json:"raw_vendor_data_document_id,omitempty"`
	// Indicates whether the identity's tax id was verified
	TaxIDVerified *bool `json:"tax_id_verified,omitempty"`
	// Name of the vendor that performed identity verification
	Vendor *string `json:"vendor,omitempty"`
}

func (o *ProvidedIdentityVerification) GetAddressVerified() *bool {
	if o == nil {
		return nil
	}
	return o.AddressVerified
}

func (o *ProvidedIdentityVerification) GetBirthDateVerified() *bool {
	if o == nil {
		return nil
	}
	return o.BirthDateVerified
}

func (o *ProvidedIdentityVerification) GetExecutionDate() *InvestigationExecutionDate {
	if o == nil {
		return nil
	}
	return o.ExecutionDate
}

func (o *ProvidedIdentityVerification) GetExternalCaseID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalCaseID
}

func (o *ProvidedIdentityVerification) GetIdentityVerificationDocumentIds() []string {
	if o == nil {
		return nil
	}
	return o.IdentityVerificationDocumentIds
}

func (o *ProvidedIdentityVerification) GetNameVerified() *bool {
	if o == nil {
		return nil
	}
	return o.NameVerified
}

func (o *ProvidedIdentityVerification) GetProvidedIdentityVerificationID() *string {
	if o == nil {
		return nil
	}
	return o.ProvidedIdentityVerificationID
}

func (o *ProvidedIdentityVerification) GetRawVendorDataDocumentID() *string {
	if o == nil {
		return nil
	}
	return o.RawVendorDataDocumentID
}

func (o *ProvidedIdentityVerification) GetTaxIDVerified() *bool {
	if o == nil {
		return nil
	}
	return o.TaxIDVerified
}

func (o *ProvidedIdentityVerification) GetVendor() *string {
	if o == nil {
		return nil
	}
	return o.Vendor
}

// Person - investigation details on a person
type Person struct {
	// The legal day, month, and year of birth for a natural person Must be formatted as an ISO-8601 YYYY-MM-DD
	BirthDate *InvestigationBirthDate `json:"birth_date,omitempty"`
	// Two character region code, complies with https://cldr.unicode.org/index Example values: "US", "CA"
	BirthRegionCode *string `json:"birth_region_code,omitempty"`
	// The countries where a natural person retains citizenship; This is used for tax (treaty) and country block list considerations Two character region code, complies with https://cldr.unicode.org/index Example values: "US", "CA"
	CitizenshipRegionCodes []string `json:"citizenship_region_codes,omitempty"`
	// Conditional: document_ids must be provided by the correspondent if InvestigationRequestScope = PERFORMED_BY_APEX and citizenship_country is not USA
	DocumentIds []string `json:"document_ids,omitempty"`
	// Email addresses indicated for account communications
	EmailAddresses []string `json:"email_addresses,omitempty"`
	// Family name of a natural person
	FamilyName *string `json:"family_name,omitempty"`
	// The given name of a natural person; Conventionally known as 'first name' in most English-speaking countries
	GivenName *string `json:"given_name,omitempty"`
	// Identification details including id value, and type (e.g. ssn)
	Identifications []PersonIdentification `json:"identifications,omitempty"`
	// legal address
	LegalAddress *InvestigationPersonLegalAddress `json:"legal_address,omitempty"`
	// mailing address
	MailingAddresses []PostalAddress `json:"mailing_addresses,omitempty"`
	// Middle names
	MiddleNames *string `json:"middle_names,omitempty"`
	// Suffix of the person's name
	NameSuffix *InvestigationNameSuffix `json:"name_suffix,omitempty"`
	// phone numbers related to this person
	PhoneNumbers []string `json:"phone_numbers,omitempty"`
	// Conditional: Identity Verification results must be provided by the correspondent if InvestigationRequestScope = PROVIDED_BY_CLIENT
	ProvidedIdentityVerification *ProvidedIdentityVerification `json:"provided_identity_verification,omitempty"`
}

func (o *Person) GetBirthDate() *InvestigationBirthDate {
	if o == nil {
		return nil
	}
	return o.BirthDate
}

func (o *Person) GetBirthRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.BirthRegionCode
}

func (o *Person) GetCitizenshipRegionCodes() []string {
	if o == nil {
		return nil
	}
	return o.CitizenshipRegionCodes
}

func (o *Person) GetDocumentIds() []string {
	if o == nil {
		return nil
	}
	return o.DocumentIds
}

func (o *Person) GetEmailAddresses() []string {
	if o == nil {
		return nil
	}
	return o.EmailAddresses
}

func (o *Person) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *Person) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *Person) GetIdentifications() []PersonIdentification {
	if o == nil {
		return nil
	}
	return o.Identifications
}

func (o *Person) GetLegalAddress() *InvestigationPersonLegalAddress {
	if o == nil {
		return nil
	}
	return o.LegalAddress
}

func (o *Person) GetMailingAddresses() []PostalAddress {
	if o == nil {
		return nil
	}
	return o.MailingAddresses
}

func (o *Person) GetMiddleNames() *string {
	if o == nil {
		return nil
	}
	return o.MiddleNames
}

func (o *Person) GetNameSuffix() *InvestigationNameSuffix {
	if o == nil {
		return nil
	}
	return o.NameSuffix
}

func (o *Person) GetPhoneNumbers() []string {
	if o == nil {
		return nil
	}
	return o.PhoneNumbers
}

func (o *Person) GetProvidedIdentityVerification() *ProvidedIdentityVerification {
	if o == nil {
		return nil
	}
	return o.ProvidedIdentityVerification
}

// WatchlistScreen - Indicates the current state of the watchlist screen
type WatchlistScreen string

const (
	WatchlistScreenScreenStateUnspecified WatchlistScreen = "SCREEN_STATE_UNSPECIFIED"
	WatchlistScreenPending                WatchlistScreen = "PENDING"
	WatchlistScreenPassed                 WatchlistScreen = "PASSED"
	WatchlistScreenFailed                 WatchlistScreen = "FAILED"
	WatchlistScreenNeedsReview            WatchlistScreen = "NEEDS_REVIEW"
	WatchlistScreenDeferredReview         WatchlistScreen = "DEFERRED_REVIEW"
	WatchlistScreenOutOfScope             WatchlistScreen = "OUT_OF_SCOPE"
)

func (e WatchlistScreen) ToPointer() *WatchlistScreen {
	return &e
}
func (e *WatchlistScreen) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SCREEN_STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "PASSED":
		fallthrough
	case "FAILED":
		fallthrough
	case "NEEDS_REVIEW":
		fallthrough
	case "DEFERRED_REVIEW":
		fallthrough
	case "OUT_OF_SCOPE":
		*e = WatchlistScreen(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WatchlistScreen: %v", v)
	}
}

// Investigation - Contains investigation details of corresponding investigation
type Investigation struct {
	// Audit trail of an investigation
	AuditTrail []AuditTrail `json:"audit_trail,omitempty"`
	// A unique identifier referencing a Correspondent
	CorrespondentID *string `json:"correspondent_id,omitempty"`
	// The time the investigation state was created
	CreateTime *time.Time `json:"create_time,omitempty"`
	// investigation details on an entity
	Entity *Entity `json:"entity,omitempty"`
	// Indicates the current state of identity verification
	IdentityVerification *IdentityVerification `json:"identity_verification,omitempty"`
	// The results of the identity verification check
	IdentityVerificationResults []IdentityVerificationResult `json:"identity_verification_results,omitempty"`
	// Used to determine who is responsible for running identity verification checks
	IdentityVerificationScope *IdentityVerificationScope `json:"identity_verification_scope,omitempty"`
	// Current state of investigation request
	InvestigationRequestState *InvestigationRequestState `json:"investigation_request_state,omitempty"`
	// Required: The ID for an open investigation The format is "investigations/{investigation}"
	Name *string `json:"name,omitempty"`
	// investigation details on a person
	Person *Person `json:"person,omitempty"`
	// The time the investigation state was last updated
	UpdateTime *time.Time `json:"update_time,omitempty"`
	// A list of watchlist entries matched against the investigation
	WatchlistMatches []WatchlistMatch `json:"watchlist_matches,omitempty"`
	// Indicates the current state of the watchlist screen
	WatchlistScreen *WatchlistScreen `json:"watchlist_screen,omitempty"`
}

func (i Investigation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *Investigation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Investigation) GetAuditTrail() []AuditTrail {
	if o == nil {
		return nil
	}
	return o.AuditTrail
}

func (o *Investigation) GetCorrespondentID() *string {
	if o == nil {
		return nil
	}
	return o.CorrespondentID
}

func (o *Investigation) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *Investigation) GetEntity() *Entity {
	if o == nil {
		return nil
	}
	return o.Entity
}

func (o *Investigation) GetIdentityVerification() *IdentityVerification {
	if o == nil {
		return nil
	}
	return o.IdentityVerification
}

func (o *Investigation) GetIdentityVerificationResults() []IdentityVerificationResult {
	if o == nil {
		return nil
	}
	return o.IdentityVerificationResults
}

func (o *Investigation) GetIdentityVerificationScope() *IdentityVerificationScope {
	if o == nil {
		return nil
	}
	return o.IdentityVerificationScope
}

func (o *Investigation) GetInvestigationRequestState() *InvestigationRequestState {
	if o == nil {
		return nil
	}
	return o.InvestigationRequestState
}

func (o *Investigation) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Investigation) GetPerson() *Person {
	if o == nil {
		return nil
	}
	return o.Person
}

func (o *Investigation) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

func (o *Investigation) GetWatchlistMatches() []WatchlistMatch {
	if o == nil {
		return nil
	}
	return o.WatchlistMatches
}

func (o *Investigation) GetWatchlistScreen() *WatchlistScreen {
	if o == nil {
		return nil
	}
	return o.WatchlistScreen
}
