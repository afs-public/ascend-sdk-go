// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// AchDepositScheduleType - The type of retirement contribution.
type AchDepositScheduleType string

const (
	AchDepositScheduleTypeTypeUnspecified    AchDepositScheduleType = "TYPE_UNSPECIFIED"
	AchDepositScheduleTypeRegular            AchDepositScheduleType = "REGULAR"
	AchDepositScheduleTypeEmployee           AchDepositScheduleType = "EMPLOYEE"
	AchDepositScheduleTypeEmployer           AchDepositScheduleType = "EMPLOYER"
	AchDepositScheduleTypeRecharacterization AchDepositScheduleType = "RECHARACTERIZATION"
	AchDepositScheduleTypeRollover60Day      AchDepositScheduleType = "ROLLOVER_60_DAY"
	AchDepositScheduleTypeRolloverDirect     AchDepositScheduleType = "ROLLOVER_DIRECT"
	AchDepositScheduleTypeTransfer           AchDepositScheduleType = "TRANSFER"
	AchDepositScheduleTypeTrusteeFee         AchDepositScheduleType = "TRUSTEE_FEE"
	AchDepositScheduleTypeConversion         AchDepositScheduleType = "CONVERSION"
	AchDepositScheduleTypeRepayment          AchDepositScheduleType = "REPAYMENT"
)

func (e AchDepositScheduleType) ToPointer() *AchDepositScheduleType {
	return &e
}
func (e *AchDepositScheduleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "REGULAR":
		fallthrough
	case "EMPLOYEE":
		fallthrough
	case "EMPLOYER":
		fallthrough
	case "RECHARACTERIZATION":
		fallthrough
	case "ROLLOVER_60_DAY":
		fallthrough
	case "ROLLOVER_DIRECT":
		fallthrough
	case "TRANSFER":
		fallthrough
	case "TRUSTEE_FEE":
		fallthrough
	case "CONVERSION":
		fallthrough
	case "REPAYMENT":
		*e = AchDepositScheduleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchDepositScheduleType: %v", v)
	}
}

// AchDepositScheduleIraContribution - The ira contribution info for an IRA account. Deprecated, see retirement_contribution_details
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type AchDepositScheduleIraContribution struct {
	// Tax year for which the contribution is applied. Current year is always valid; prior year is only valid before tax deadline. Must be in "YYYY" format.
	TaxYear *int `json:"tax_year,omitempty"`
	// The type of retirement contribution.
	Type *AchDepositScheduleType `json:"type,omitempty"`
}

func (o *AchDepositScheduleIraContribution) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *AchDepositScheduleIraContribution) GetType() *AchDepositScheduleType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AchDepositScheduleTemporalTaxYear - A temporal tax year value. This will always evaluate to a year based on the date the transfer was initiated.
type AchDepositScheduleTemporalTaxYear string

const (
	AchDepositScheduleTemporalTaxYearTemporalTaxYearUnspecified AchDepositScheduleTemporalTaxYear = "TEMPORAL_TAX_YEAR_UNSPECIFIED"
	AchDepositScheduleTemporalTaxYearCurrentCalendarYear        AchDepositScheduleTemporalTaxYear = "CURRENT_CALENDAR_YEAR"
	AchDepositScheduleTemporalTaxYearMinimumTaxYear             AchDepositScheduleTemporalTaxYear = "MINIMUM_TAX_YEAR"
)

func (e AchDepositScheduleTemporalTaxYear) ToPointer() *AchDepositScheduleTemporalTaxYear {
	return &e
}
func (e *AchDepositScheduleTemporalTaxYear) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEMPORAL_TAX_YEAR_UNSPECIFIED":
		fallthrough
	case "CURRENT_CALENDAR_YEAR":
		fallthrough
	case "MINIMUM_TAX_YEAR":
		*e = AchDepositScheduleTemporalTaxYear(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchDepositScheduleTemporalTaxYear: %v", v)
	}
}

// AchDepositScheduleRetirementContributionType - The type of retirement contribution.
type AchDepositScheduleRetirementContributionType string

const (
	AchDepositScheduleRetirementContributionTypeTypeUnspecified    AchDepositScheduleRetirementContributionType = "TYPE_UNSPECIFIED"
	AchDepositScheduleRetirementContributionTypeRegular            AchDepositScheduleRetirementContributionType = "REGULAR"
	AchDepositScheduleRetirementContributionTypeEmployee           AchDepositScheduleRetirementContributionType = "EMPLOYEE"
	AchDepositScheduleRetirementContributionTypeEmployer           AchDepositScheduleRetirementContributionType = "EMPLOYER"
	AchDepositScheduleRetirementContributionTypeRecharacterization AchDepositScheduleRetirementContributionType = "RECHARACTERIZATION"
	AchDepositScheduleRetirementContributionTypeRollover60Day      AchDepositScheduleRetirementContributionType = "ROLLOVER_60_DAY"
	AchDepositScheduleRetirementContributionTypeRolloverDirect     AchDepositScheduleRetirementContributionType = "ROLLOVER_DIRECT"
	AchDepositScheduleRetirementContributionTypeTransfer           AchDepositScheduleRetirementContributionType = "TRANSFER"
	AchDepositScheduleRetirementContributionTypeTrusteeFee         AchDepositScheduleRetirementContributionType = "TRUSTEE_FEE"
	AchDepositScheduleRetirementContributionTypeConversion         AchDepositScheduleRetirementContributionType = "CONVERSION"
	AchDepositScheduleRetirementContributionTypeRepayment          AchDepositScheduleRetirementContributionType = "REPAYMENT"
)

func (e AchDepositScheduleRetirementContributionType) ToPointer() *AchDepositScheduleRetirementContributionType {
	return &e
}
func (e *AchDepositScheduleRetirementContributionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "REGULAR":
		fallthrough
	case "EMPLOYEE":
		fallthrough
	case "EMPLOYER":
		fallthrough
	case "RECHARACTERIZATION":
		fallthrough
	case "ROLLOVER_60_DAY":
		fallthrough
	case "ROLLOVER_DIRECT":
		fallthrough
	case "TRANSFER":
		fallthrough
	case "TRUSTEE_FEE":
		fallthrough
	case "CONVERSION":
		fallthrough
	case "REPAYMENT":
		*e = AchDepositScheduleRetirementContributionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchDepositScheduleRetirementContributionType: %v", v)
	}
}

// AchDepositScheduleRetirementContribution - The contribution info for a retirement account
type AchDepositScheduleRetirementContribution struct {
	// An explicit tax year value. The current year is always valid; and the prior year is valid only before the tax deadline. Must be in "YYYY" format.
	TaxYear *int `json:"tax_year,omitempty"`
	// A temporal tax year value. This will always evaluate to a year based on the date the transfer was initiated.
	TemporalTaxYear *AchDepositScheduleTemporalTaxYear `json:"temporal_tax_year,omitempty"`
	// The type of retirement contribution.
	Type *AchDepositScheduleRetirementContributionType `json:"type,omitempty"`
}

func (o *AchDepositScheduleRetirementContribution) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *AchDepositScheduleRetirementContribution) GetTemporalTaxYear() *AchDepositScheduleTemporalTaxYear {
	if o == nil {
		return nil
	}
	return o.TemporalTaxYear
}

func (o *AchDepositScheduleRetirementContribution) GetType() *AchDepositScheduleRetirementContributionType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AchDepositScheduleAmount - A cash amount in the format of decimal value
type AchDepositScheduleAmount struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AchDepositScheduleAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AchDepositScheduleStartDate - The schedule start date
type AchDepositScheduleStartDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *AchDepositScheduleStartDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *AchDepositScheduleStartDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *AchDepositScheduleStartDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// AchDepositScheduleState - The state of the represented schedule
type AchDepositScheduleState string

const (
	AchDepositScheduleStateActive    AchDepositScheduleState = "ACTIVE"
	AchDepositScheduleStateCanceled  AchDepositScheduleState = "CANCELED"
	AchDepositScheduleStateCompleted AchDepositScheduleState = "COMPLETED"
)

func (e AchDepositScheduleState) ToPointer() *AchDepositScheduleState {
	return &e
}
func (e *AchDepositScheduleState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "CANCELED":
		fallthrough
	case "COMPLETED":
		*e = AchDepositScheduleState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchDepositScheduleState: %v", v)
	}
}

// AchDepositScheduleTimeUnit - The time unit used to calculate the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
type AchDepositScheduleTimeUnit string

const (
	AchDepositScheduleTimeUnitDay   AchDepositScheduleTimeUnit = "DAY"
	AchDepositScheduleTimeUnitWeek  AchDepositScheduleTimeUnit = "WEEK"
	AchDepositScheduleTimeUnitMonth AchDepositScheduleTimeUnit = "MONTH"
)

func (e AchDepositScheduleTimeUnit) ToPointer() *AchDepositScheduleTimeUnit {
	return &e
}
func (e *AchDepositScheduleTimeUnit) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DAY":
		fallthrough
	case "WEEK":
		fallthrough
	case "MONTH":
		*e = AchDepositScheduleTimeUnit(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchDepositScheduleTimeUnit: %v", v)
	}
}

// AchDepositScheduleScheduleProperties - Common schedule properties
type AchDepositScheduleScheduleProperties struct {
	// The number of occurrences (empty or 0 indicates unlimited occurrences)
	Occurrences *int `json:"occurrences,omitempty"`
	// The schedule start date
	StartDate *AchDepositScheduleStartDate `json:"start_date,omitempty"`
	// The state of the represented schedule
	State *AchDepositScheduleState `json:"state,omitempty"`
	// The time unit used to calculate the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
	TimeUnit *AchDepositScheduleTimeUnit `json:"time_unit,omitempty"`
	// The multiplier used to determine the length of the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
	UnitMultiplier *int `json:"unit_multiplier,omitempty"`
}

func (o *AchDepositScheduleScheduleProperties) GetOccurrences() *int {
	if o == nil {
		return nil
	}
	return o.Occurrences
}

func (o *AchDepositScheduleScheduleProperties) GetStartDate() *AchDepositScheduleStartDate {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *AchDepositScheduleScheduleProperties) GetState() *AchDepositScheduleState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *AchDepositScheduleScheduleProperties) GetTimeUnit() *AchDepositScheduleTimeUnit {
	if o == nil {
		return nil
	}
	return o.TimeUnit
}

func (o *AchDepositScheduleScheduleProperties) GetUnitMultiplier() *int {
	if o == nil {
		return nil
	}
	return o.UnitMultiplier
}

// ScheduleDetails - The transfer schedule details
type ScheduleDetails struct {
	// A cash amount in the format of decimal value
	Amount *AchDepositScheduleAmount `json:"amount,omitempty"`
	// External identifier supplied by the API caller. Each request must have a unique pairing of client_schedule_id and account
	ClientScheduleID *string `json:"client_schedule_id,omitempty"`
	// Common schedule properties
	ScheduleProperties *AchDepositScheduleScheduleProperties `json:"schedule_properties,omitempty"`
}

func (o *ScheduleDetails) GetAmount() *AchDepositScheduleAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ScheduleDetails) GetClientScheduleID() *string {
	if o == nil {
		return nil
	}
	return o.ClientScheduleID
}

func (o *ScheduleDetails) GetScheduleProperties() *AchDepositScheduleScheduleProperties {
	if o == nil {
		return nil
	}
	return o.ScheduleProperties
}

// AchDepositSchedule - A deposit transfer schedule using the ACH mechanism
type AchDepositSchedule struct {
	// The name of the bank relationship to be used in the ACH transaction
	BankRelationship *string `json:"bank_relationship,omitempty"`
	// The ira contribution info for an IRA account. Deprecated, see retirement_contribution_details
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	IraContribution *AchDepositScheduleIraContribution `json:"ira_contribution,omitempty"`
	// The name of the ACH Deposit transfer schedule
	Name *string `json:"name,omitempty"`
	// The contribution info for a retirement account
	RetirementContribution *AchDepositScheduleRetirementContribution `json:"retirement_contribution,omitempty"`
	// The transfer schedule details
	ScheduleDetails *ScheduleDetails `json:"schedule_details,omitempty"`
}

func (o *AchDepositSchedule) GetBankRelationship() *string {
	if o == nil {
		return nil
	}
	return o.BankRelationship
}

func (o *AchDepositSchedule) GetIraContribution() *AchDepositScheduleIraContribution {
	if o == nil {
		return nil
	}
	return o.IraContribution
}

func (o *AchDepositSchedule) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AchDepositSchedule) GetRetirementContribution() *AchDepositScheduleRetirementContribution {
	if o == nil {
		return nil
	}
	return o.RetirementContribution
}

func (o *AchDepositSchedule) GetScheduleDetails() *ScheduleDetails {
	if o == nil {
		return nil
	}
	return o.ScheduleDetails
}
