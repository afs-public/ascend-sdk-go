// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Code - The notice of change reason code.
type Code string

const (
	CodeCodeUnspecified Code = "CODE_UNSPECIFIED"
	CodeC01             Code = "C01"
	CodeC02             Code = "C02"
	CodeC03             Code = "C03"
	CodeC04             Code = "C04"
	CodeC05             Code = "C05"
	CodeC06             Code = "C06"
	CodeC07             Code = "C07"
	CodeC08             Code = "C08"
	CodeC09             Code = "C09"
	CodeC13             Code = "C13"
	CodeC14             Code = "C14"
	CodeC61             Code = "C61"
	CodeC62             Code = "C62"
	CodeC63             Code = "C63"
	CodeC64             Code = "C64"
	CodeC65             Code = "C65"
	CodeC66             Code = "C66"
	CodeC67             Code = "C67"
	CodeC68             Code = "C68"
	CodeC69             Code = "C69"
)

func (e Code) ToPointer() *Code {
	return &e
}
func (e *Code) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CODE_UNSPECIFIED":
		fallthrough
	case "C01":
		fallthrough
	case "C02":
		fallthrough
	case "C03":
		fallthrough
	case "C04":
		fallthrough
	case "C05":
		fallthrough
	case "C06":
		fallthrough
	case "C07":
		fallthrough
	case "C08":
		fallthrough
	case "C09":
		fallthrough
	case "C13":
		fallthrough
	case "C14":
		fallthrough
	case "C61":
		fallthrough
	case "C62":
		fallthrough
	case "C63":
		fallthrough
	case "C64":
		fallthrough
	case "C65":
		fallthrough
	case "C66":
		fallthrough
	case "C67":
		fallthrough
	case "C68":
		fallthrough
	case "C69":
		*e = Code(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Code: %v", v)
	}
}

// UpdatedBankAccountType - The updated bank account type. Should only be set when the code is for an incorrect transaction code.
type UpdatedBankAccountType string

const (
	UpdatedBankAccountTypeTypeUnspecified UpdatedBankAccountType = "TYPE_UNSPECIFIED"
	UpdatedBankAccountTypeChecking        UpdatedBankAccountType = "CHECKING"
	UpdatedBankAccountTypeSavings         UpdatedBankAccountType = "SAVINGS"
)

func (e UpdatedBankAccountType) ToPointer() *UpdatedBankAccountType {
	return &e
}
func (e *UpdatedBankAccountType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "CHECKING":
		fallthrough
	case "SAVINGS":
		*e = UpdatedBankAccountType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatedBankAccountType: %v", v)
	}
}

// NachaNocCreate - A notice of change (NOC) on an ACH transfer from the Nacha network.
type NachaNocCreate struct {
	// The notice of change reason code.
	Code Code `json:"code"`
	// The updated bank account number. Should only be set when the code is for an incorrect DFI account number.
	UpdatedBankAccountNumber *string `json:"updated_bank_account_number,omitempty"`
	// The updated bank account type. Should only be set when the code is for an incorrect transaction code.
	UpdatedBankAccountType *UpdatedBankAccountType `json:"updated_bank_account_type,omitempty"`
	// The updated bank routing number. Should only be set when the code is for an incorrect routing number.
	UpdatedBankRoutingNumber *string `json:"updated_bank_routing_number,omitempty"`
}

func (o *NachaNocCreate) GetCode() Code {
	if o == nil {
		return Code("")
	}
	return o.Code
}

func (o *NachaNocCreate) GetUpdatedBankAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBankAccountNumber
}

func (o *NachaNocCreate) GetUpdatedBankAccountType() *UpdatedBankAccountType {
	if o == nil {
		return nil
	}
	return o.UpdatedBankAccountType
}

func (o *NachaNocCreate) GetUpdatedBankRoutingNumber() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBankRoutingNumber
}
