// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/afs-public/ascend-sdk-go/models/components"
)

type BookingCancelExecutionRequest struct {
	// The account id.
	AccountID string `pathParam:"style=simple,explode=false,name=account_id"`
	// The trade id.
	TradeID string `pathParam:"style=simple,explode=false,name=trade_id"`
	// The execution id.
	ExecutionID                  string                                  `pathParam:"style=simple,explode=false,name=execution_id"`
	CancelExecutionRequestCreate components.CancelExecutionRequestCreate `request:"mediaType=application/json"`
}

func (o *BookingCancelExecutionRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *BookingCancelExecutionRequest) GetTradeID() string {
	if o == nil {
		return ""
	}
	return o.TradeID
}

func (o *BookingCancelExecutionRequest) GetExecutionID() string {
	if o == nil {
		return ""
	}
	return o.ExecutionID
}

func (o *BookingCancelExecutionRequest) GetCancelExecutionRequestCreate() components.CancelExecutionRequestCreate {
	if o == nil {
		return components.CancelExecutionRequestCreate{}
	}
	return o.CancelExecutionRequestCreate
}

type BookingCancelExecutionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	CancelExecutionResponse *components.CancelExecutionResponse
	// INVALID_ARGUMENT: The request is not valid.
	// FAILED_PRECONDITION: The operation was rejected because the system is not in a state required for the operation's processing.
	Status *components.Status
}

func (o *BookingCancelExecutionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *BookingCancelExecutionResponse) GetCancelExecutionResponse() *components.CancelExecutionResponse {
	if o == nil {
		return nil
	}
	return o.CancelExecutionResponse
}

func (o *BookingCancelExecutionResponse) GetStatus() *components.Status {
	if o == nil {
		return nil
	}
	return o.Status
}
