// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"

	"github.com/afs-public/ascend-sdk-go/models/components"
)

// View - The view to return. Defaults to `BASIC`.
type View string

const (
	ViewAccountViewUnspecified View = "ACCOUNT_VIEW_UNSPECIFIED"
	ViewBasic                  View = "BASIC"
	ViewFull                   View = "FULL"
)

func (e View) ToPointer() *View {
	return &e
}
func (e *View) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT_VIEW_UNSPECIFIED":
		fallthrough
	case "BASIC":
		fallthrough
	case "FULL":
		*e = View(v)
		return nil
	default:
		return fmt.Errorf("invalid value for View: %v", v)
	}
}

type AccountsListAccountsRequest struct {
	// The maximum number of accounts to return. The service may return fewer than this value. If unspecified, at most 25 accounts will be returned. The maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int `queryParam:"style=form,explode=true,name=page_size"`
	// A page token, received from a previous `ListAccounts` call. Provide this to retrieve the subsequent page.
	//
	//  When paginating, all other parameters provided to `ListAccounts` must match the call that provided the page token.
	PageToken *string `queryParam:"style=form,explode=true,name=page_token"`
	// The order in which accounts are listed. Can order by:
	//  `account_id`
	//  `account_number`
	//  `title`
	//  `state`
	//  `account_group_id`
	OrderBy *string `queryParam:"style=form,explode=true,name=order_by"`
	// A CEL string to filter results; Use `upperAscii()` for case-insensitive searches; E.g. `parties.exists(parties,parties.legal_natural_person.family_name.upperAscii()=="dOuGh".upperAscii())`; See the [CEL Search](https://developer.apexclearing.com/apex-fintech-solutions/docs/cel-search) page in Guides for more information; Filter options include:
	//  `account_id`
	//  `account_number`
	//  `correspondent_id`
	//  `title`
	//  `state`
	//  `margin_group_id`
	//  `account_group_id`
	//  `registration_type`
	//  `reserve_class`
	//  `parties.legal_natural_person.legal_natural_person_id`
	//  `parties.legal_natural_person.given_name`
	//  `parties.legal_natural_person.family_name`
	//  `parties.legal_natural_person.tax_id_type`
	//  `parties.legal_natural_person.tax_id`
	//  `parties.legal_entity.legal_entity_id`
	//  `parties.legal_entity.entity_name`
	//  `parties.legal_entity.tax_id_type`
	//  `parties.legal_entity.tax_id`
	//  `parties.legal_natural_person.foreign_identification.identification_number`
	//  `parties.legal_natural_person.foreign_identification.type`
	//  `enrollments.enrollment_id`
	//  `enrollments.type`
	//  `enrollments.state`
	//  `identifiers.type`
	//  `identifiers.value`
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// The view to return. Defaults to `BASIC`.
	View *View `queryParam:"style=form,explode=true,name=view"`
}

func (o *AccountsListAccountsRequest) GetPageSize() *int {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *AccountsListAccountsRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *AccountsListAccountsRequest) GetOrderBy() *string {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *AccountsListAccountsRequest) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *AccountsListAccountsRequest) GetView() *View {
	if o == nil {
		return nil
	}
	return o.View
}

type AccountsListAccountsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	ListAccountsResponse *components.ListAccountsResponse
	// INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
	Status *components.Status
}

func (o *AccountsListAccountsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AccountsListAccountsResponse) GetListAccountsResponse() *components.ListAccountsResponse {
	if o == nil {
		return nil
	}
	return o.ListAccountsResponse
}

func (o *AccountsListAccountsResponse) GetStatus() *components.Status {
	if o == nil {
		return nil
	}
	return o.Status
}
