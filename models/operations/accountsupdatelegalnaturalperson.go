// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/afs-public/ascend-sdk-go/models/components"
)

type AccountsUpdateLegalNaturalPersonRequest struct {
	// The legalNaturalPerson id.
	LegalNaturalPersonID string `pathParam:"style=simple,explode=false,name=legalNaturalPerson_id"`
	// The list of fields to update. Updatable Fields  `marital_status`  `citizenship_countries`  `personal_address.address_lines`  `personal_address.locality`  `personal_address.administrative_area`  `personal_address.region_code`  `personal_address.postal_code`  `control_person_company_symbols`  `finra_associated_entity`  `politically_exposed_organization`  `politically_exposed_immediate_family_names`  `is_correspondent_employee`  `employment.employer`  `employment.occupation`  `employment.start_year`  `employment.employment_status`  `employment.employer_address.address_lines`  `employment.employer_address.locality`  `employment.employer_address.administrative_area`  `employment.employer_address.region_code`  `employment.employer_address.postal_code`  `given_name`  `middle_names`  `family_name`  `tax_id`  `birth_date.year`  `birth_date.month`  `birth_date.day`  `death_date.day`  `death_date.month`  `death_date.year`  `identity_verification_result.raw_vendor_data_document_id`  `identity_verification_result.identity_verification_document_ids`  `accredited_investor`  `adviser`  `institutional_customer`  `foreign_identification.ftin`  `foreign_identification.identification_number`  `foreign_identification.issuing_region_code`  `foreign_identification.type`  `foreign_identification.issue_date.year`  `foreign_identification.issue_date.month`  `foreign_identification.issue_date.day`  `foreign_identification.expiration_date.year`  `foreign_identification.expiration_date.month`  `foreign_identification.expiration_date.day`  `tax_profile.withholding_state`  `tax_profile.legal_tax_region_code`  `natural_person_fdd.customer_referral_source.name`  `natural_person_fdd.customer_referral_source.relationship_to_applicant`  `natural_person_fdd.customer_referral_source.relationship_years_with_applicant`  `natural_person_fdd.customer_referral_source.relationship_years_with_broker`  `natural_person_fdd.customer_non_referral_source`  `natural_person_fdd.employment_and_employer_description`  `natural_person_fdd.negative_news.owner_has_negative_news_against_related_parties`  `natural_person_fdd.negative_news.negative_news_against_related_parties_description`  `natural_person_fdd.other_sources_of_wealth.applicant_has_other_sources_of_wealth`  `natural_person_fdd.other_sources_of_wealth.other_sources_of_wealth`  `natural_person_fdd.other_sources_of_wealth.other_source_of_wealth_verification`  `doing_business_as`
	UpdateMask               *string                             `queryParam:"style=form,explode=true,name=update_mask"`
	LegalNaturalPersonUpdate components.LegalNaturalPersonUpdate `request:"mediaType=application/json"`
}

func (o *AccountsUpdateLegalNaturalPersonRequest) GetLegalNaturalPersonID() string {
	if o == nil {
		return ""
	}
	return o.LegalNaturalPersonID
}

func (o *AccountsUpdateLegalNaturalPersonRequest) GetUpdateMask() *string {
	if o == nil {
		return nil
	}
	return o.UpdateMask
}

func (o *AccountsUpdateLegalNaturalPersonRequest) GetLegalNaturalPersonUpdate() components.LegalNaturalPersonUpdate {
	if o == nil {
		return components.LegalNaturalPersonUpdate{}
	}
	return o.LegalNaturalPersonUpdate
}

type AccountsUpdateLegalNaturalPersonResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	LegalNaturalPerson *components.LegalNaturalPerson
	// INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
	Status *components.Status
}

func (o *AccountsUpdateLegalNaturalPersonResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AccountsUpdateLegalNaturalPersonResponse) GetLegalNaturalPerson() *components.LegalNaturalPerson {
	if o == nil {
		return nil
	}
	return o.LegalNaturalPerson
}

func (o *AccountsUpdateLegalNaturalPersonResponse) GetStatus() *components.Status {
	if o == nil {
		return nil
	}
	return o.Status
}
