// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/afs-public/ascend-sdk-go/models/components"
)

type AccountsUpdateInterestedPartyRequest struct {
	// The account id.
	AccountID string `pathParam:"style=simple,explode=false,name=account_id"`
	// The interestedParty id.
	InterestedPartyID string `pathParam:"style=simple,explode=false,name=interestedParty_id"`
	// The list of fields to update. Updatable Fields  `recipient`  `statement_delivery_preference`  `trade_confirmation_delivery_preference`  `mailing_address.region_code`  `mailing_address.postal_code`  `mailing_address.administrative_area`  `mailing_address.locality`  `mailing_address.address_lines`
	UpdateMask            *string                          `queryParam:"style=form,explode=true,name=update_mask"`
	InterestedPartyUpdate components.InterestedPartyUpdate `request:"mediaType=application/json"`
}

func (o *AccountsUpdateInterestedPartyRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *AccountsUpdateInterestedPartyRequest) GetInterestedPartyID() string {
	if o == nil {
		return ""
	}
	return o.InterestedPartyID
}

func (o *AccountsUpdateInterestedPartyRequest) GetUpdateMask() *string {
	if o == nil {
		return nil
	}
	return o.UpdateMask
}

func (o *AccountsUpdateInterestedPartyRequest) GetInterestedPartyUpdate() components.InterestedPartyUpdate {
	if o == nil {
		return components.InterestedPartyUpdate{}
	}
	return o.InterestedPartyUpdate
}

type AccountsUpdateInterestedPartyResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	InterestedParty *components.InterestedParty
	// INVALID_ARGUMENT: The request is not valid, additional information may be present in the BadRequest details.
	Status *components.Status
}

func (o *AccountsUpdateInterestedPartyResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AccountsUpdateInterestedPartyResponse) GetInterestedParty() *components.InterestedParty {
	if o == nil {
		return nil
	}
	return o.InterestedParty
}

func (o *AccountsUpdateInterestedPartyResponse) GetStatus() *components.Status {
	if o == nil {
		return nil
	}
	return o.Status
}
