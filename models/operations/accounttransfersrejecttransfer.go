// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/afs-public/ascend-sdk-go/models/components"
)

type AccountTransfersRejectTransferRequest struct {
	// The correspondent id.
	CorrespondentID string `pathParam:"style=simple,explode=false,name=correspondent_id"`
	// The account id.
	AccountID string `pathParam:"style=simple,explode=false,name=account_id"`
	// The transfer id.
	TransferID                  string                                 `pathParam:"style=simple,explode=false,name=transfer_id"`
	RejectTransferRequestCreate components.RejectTransferRequestCreate `request:"mediaType=application/json"`
}

func (o *AccountTransfersRejectTransferRequest) GetCorrespondentID() string {
	if o == nil {
		return ""
	}
	return o.CorrespondentID
}

func (o *AccountTransfersRejectTransferRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *AccountTransfersRejectTransferRequest) GetTransferID() string {
	if o == nil {
		return ""
	}
	return o.TransferID
}

func (o *AccountTransfersRejectTransferRequest) GetRejectTransferRequestCreate() components.RejectTransferRequestCreate {
	if o == nil {
		return components.RejectTransferRequestCreate{}
	}
	return o.RejectTransferRequestCreate
}

type AccountTransfersRejectTransferResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	RejectTransferResponse *components.RejectTransferResponse
	// INVALID_ARGUMENT: The request has an invalid argument.
	// FAILED_PRECONDITION: The transfer resource is not in the correct state for this operation.
	Status *components.Status
}

func (o *AccountTransfersRejectTransferResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AccountTransfersRejectTransferResponse) GetRejectTransferResponse() *components.RejectTransferResponse {
	if o == nil {
		return nil
	}
	return o.RejectTransferResponse
}

func (o *AccountTransfersRejectTransferResponse) GetStatus() *components.Status {
	if o == nil {
		return nil
	}
	return o.Status
}
