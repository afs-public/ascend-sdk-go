// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"

	"github.com/afs-public/ascend-sdk-go/models/components"
)

// State - The state of bank relationships to filter by. Unspecified returns relationships of all states.
type State string

const (
	StateStateUnspecified State = "STATE_UNSPECIFIED"
	StatePending          State = "PENDING"
	StateApproved         State = "APPROVED"
	StateCanceled         State = "CANCELED"
	StateRejected         State = "REJECTED"
)

func (e State) ToPointer() *State {
	return &e
}
func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "APPROVED":
		fallthrough
	case "CANCELED":
		fallthrough
	case "REJECTED":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

type BankRelationshipsListBankRelationshipsRequest struct {
	// The account id.
	AccountID string `pathParam:"style=simple,explode=false,name=account_id"`
	// The maximum number of bank relationships to return. The service may return fewer than this value. If unspecified, at most 50 bank relationships will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize *int `queryParam:"style=form,explode=true,name=page_size"`
	// A page token, received from a previous `ListBankRelationships` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBankRelationships` must match the call that provided the page token.
	PageToken *string `queryParam:"style=form,explode=true,name=page_token"`
	// The state of bank relationships to filter by. Unspecified returns relationships of all states.
	State *State `queryParam:"style=form,explode=true,name=state"`
}

func (o *BankRelationshipsListBankRelationshipsRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *BankRelationshipsListBankRelationshipsRequest) GetPageSize() *int {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *BankRelationshipsListBankRelationshipsRequest) GetPageToken() *string {
	if o == nil {
		return nil
	}
	return o.PageToken
}

func (o *BankRelationshipsListBankRelationshipsRequest) GetState() *State {
	if o == nil {
		return nil
	}
	return o.State
}

type BankRelationshipsListBankRelationshipsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	ListBankRelationshipsResponse *components.ListBankRelationshipsResponse
	// INVALID_ARGUMENT: The request has an invalid argument.
	Status *components.Status

	Next func() (*BankRelationshipsListBankRelationshipsResponse, error)
}

func (o *BankRelationshipsListBankRelationshipsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *BankRelationshipsListBankRelationshipsResponse) GetListBankRelationshipsResponse() *components.ListBankRelationshipsResponse {
	if o == nil {
		return nil
	}
	return o.ListBankRelationshipsResponse
}

func (o *BankRelationshipsListBankRelationshipsResponse) GetStatus() *components.Status {
	if o == nil {
		return nil
	}
	return o.Status
}
