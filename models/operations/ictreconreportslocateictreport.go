// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"ascend-sdk/models/components"
	"encoding/json"
	"fmt"
)

// ProgramDateFilterProgram - The ICT program for which to locate the report.
type ProgramDateFilterProgram string

const (
	ProgramDateFilterProgramIctProgramUnspecified ProgramDateFilterProgram = "ICT_PROGRAM_UNSPECIFIED"
	ProgramDateFilterProgramBrokerPartner         ProgramDateFilterProgram = "BROKER_PARTNER"
	ProgramDateFilterProgramDepositOnly           ProgramDateFilterProgram = "DEPOSIT_ONLY"
	ProgramDateFilterProgramBankingPartner        ProgramDateFilterProgram = "BANKING_PARTNER"
	ProgramDateFilterProgramMoneyTransmitter      ProgramDateFilterProgram = "MONEY_TRANSMITTER"
	ProgramDateFilterProgramWithdrawalOnly        ProgramDateFilterProgram = "WITHDRAWAL_ONLY"
	ProgramDateFilterProgramDigitalPartner        ProgramDateFilterProgram = "DIGITAL_PARTNER"
)

func (e ProgramDateFilterProgram) ToPointer() *ProgramDateFilterProgram {
	return &e
}
func (e *ProgramDateFilterProgram) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ICT_PROGRAM_UNSPECIFIED":
		fallthrough
	case "BROKER_PARTNER":
		fallthrough
	case "DEPOSIT_ONLY":
		fallthrough
	case "BANKING_PARTNER":
		fallthrough
	case "MONEY_TRANSMITTER":
		fallthrough
	case "WITHDRAWAL_ONLY":
		fallthrough
	case "DIGITAL_PARTNER":
		*e = ProgramDateFilterProgram(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProgramDateFilterProgram: %v", v)
	}
}

type IctReconReportsLocateIctReportRequest struct {
	// The correspondent id.
	CorrespondentID string `pathParam:"style=simple,explode=false,name=correspondent_id"`
	// The id of the ICT batch for which to locate the report.
	BatchID *string `queryParam:"style=form,explode=true,name=batch_id"`
	// The ICT program for which to locate the report.
	ProgramDateFilterProgram *ProgramDateFilterProgram `queryParam:"style=form,explode=true,name=program_date_filter.program"`
	// The process date for which to locate the report.
	ProgramDateFilterProcessDate *components.DateCreate `queryParam:"style=form,explode=true,name=program_date_filter.process_date"`
}

func (o *IctReconReportsLocateIctReportRequest) GetCorrespondentID() string {
	if o == nil {
		return ""
	}
	return o.CorrespondentID
}

func (o *IctReconReportsLocateIctReportRequest) GetBatchID() *string {
	if o == nil {
		return nil
	}
	return o.BatchID
}

func (o *IctReconReportsLocateIctReportRequest) GetProgramDateFilterProgram() *ProgramDateFilterProgram {
	if o == nil {
		return nil
	}
	return o.ProgramDateFilterProgram
}

func (o *IctReconReportsLocateIctReportRequest) GetProgramDateFilterProcessDate() *components.DateCreate {
	if o == nil {
		return nil
	}
	return o.ProgramDateFilterProcessDate
}

type IctReconReportsLocateIctReportResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	LocateIctReportResponse *components.LocateIctReportResponse
	// INVALID_ARGUMENT: The request has an invalid argument.
	Status *components.Status
}

func (o *IctReconReportsLocateIctReportResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *IctReconReportsLocateIctReportResponse) GetLocateIctReportResponse() *components.LocateIctReportResponse {
	if o == nil {
		return nil
	}
	return o.LocateIctReportResponse
}

func (o *IctReconReportsLocateIctReportResponse) GetStatus() *components.Status {
	if o == nil {
		return nil
	}
	return o.Status
}
