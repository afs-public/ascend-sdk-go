// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// CompleteTradeResponseAssetType - Type of the asset being traded. Required for SYMBOL and CUSIP.
type CompleteTradeResponseAssetType string

const (
	CompleteTradeResponseAssetTypeAssetTypeUnspecified CompleteTradeResponseAssetType = "ASSET_TYPE_UNSPECIFIED"
	CompleteTradeResponseAssetTypeEquity               CompleteTradeResponseAssetType = "EQUITY"
	CompleteTradeResponseAssetTypeFixedIncome          CompleteTradeResponseAssetType = "FIXED_INCOME"
)

func (e CompleteTradeResponseAssetType) ToPointer() *CompleteTradeResponseAssetType {
	return &e
}

// CompleteTradeResponseBrokerCapacity - Broker capacity for the trade.
type CompleteTradeResponseBrokerCapacity string

const (
	CompleteTradeResponseBrokerCapacityCapacityUnspecified CompleteTradeResponseBrokerCapacity = "CAPACITY_UNSPECIFIED"
	CompleteTradeResponseBrokerCapacityAgency              CompleteTradeResponseBrokerCapacity = "AGENCY"
	CompleteTradeResponseBrokerCapacityPrincipal           CompleteTradeResponseBrokerCapacity = "PRINCIPAL"
	CompleteTradeResponseBrokerCapacityMixed               CompleteTradeResponseBrokerCapacity = "MIXED"
)

func (e CompleteTradeResponseBrokerCapacity) ToPointer() *CompleteTradeResponseBrokerCapacity {
	return &e
}

// CompleteTradeResponseIdentifierType - Identifier type for the asset being traded.
type CompleteTradeResponseIdentifierType string

const (
	CompleteTradeResponseIdentifierTypeIdentifierTypeUnspecified CompleteTradeResponseIdentifierType = "IDENTIFIER_TYPE_UNSPECIFIED"
	CompleteTradeResponseIdentifierTypeAssetID                   CompleteTradeResponseIdentifierType = "ASSET_ID"
	CompleteTradeResponseIdentifierTypeSymbol                    CompleteTradeResponseIdentifierType = "SYMBOL"
	CompleteTradeResponseIdentifierTypeCusip                     CompleteTradeResponseIdentifierType = "CUSIP"
	CompleteTradeResponseIdentifierTypeIsin                      CompleteTradeResponseIdentifierType = "ISIN"
)

func (e CompleteTradeResponseIdentifierType) ToPointer() *CompleteTradeResponseIdentifierType {
	return &e
}

// CompleteTradeResponseLocalMarketTradeDate - Date field to support extended trading hours.
type CompleteTradeResponseLocalMarketTradeDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *CompleteTradeResponseLocalMarketTradeDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *CompleteTradeResponseLocalMarketTradeDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *CompleteTradeResponseLocalMarketTradeDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// CompleteTradeResponseRouteType - Route type for the trade.
type CompleteTradeResponseRouteType string

const (
	CompleteTradeResponseRouteTypeRouteTypeUnspecified CompleteTradeResponseRouteType = "ROUTE_TYPE_UNSPECIFIED"
	CompleteTradeResponseRouteTypeDma                  CompleteTradeResponseRouteType = "DMA"
	CompleteTradeResponseRouteTypeMngd                 CompleteTradeResponseRouteType = "MNGD"
	CompleteTradeResponseRouteTypeQuik                 CompleteTradeResponseRouteType = "QUIK"
	CompleteTradeResponseRouteTypeAlgo                 CompleteTradeResponseRouteType = "ALGO"
	CompleteTradeResponseRouteTypeAway                 CompleteTradeResponseRouteType = "AWAY"
	CompleteTradeResponseRouteTypeCorr                 CompleteTradeResponseRouteType = "CORR"
	CompleteTradeResponseRouteTypeBoats                CompleteTradeResponseRouteType = "BOATS"
)

func (e CompleteTradeResponseRouteType) ToPointer() *CompleteTradeResponseRouteType {
	return &e
}

// CompleteTradeResponseSettlementDate - Defaults to T+1 for equities if this is not provided. Calculated by the execution's execution_time field in Eastern Time.
type CompleteTradeResponseSettlementDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *CompleteTradeResponseSettlementDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *CompleteTradeResponseSettlementDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *CompleteTradeResponseSettlementDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// CompleteTradeResponseSide - Denotes if the trade is a SELL or a BUY.
type CompleteTradeResponseSide string

const (
	CompleteTradeResponseSideSideUnspecified CompleteTradeResponseSide = "SIDE_UNSPECIFIED"
	CompleteTradeResponseSideBuy             CompleteTradeResponseSide = "BUY"
	CompleteTradeResponseSideSell            CompleteTradeResponseSide = "SELL"
)

func (e CompleteTradeResponseSide) ToPointer() *CompleteTradeResponseSide {
	return &e
}

// CompleteTradeResponseSideModifier - Side modifier for the trade.
type CompleteTradeResponseSideModifier string

const (
	CompleteTradeResponseSideModifierSideModifierUnspecified CompleteTradeResponseSideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	CompleteTradeResponseSideModifierShort                   CompleteTradeResponseSideModifier = "SHORT"
	CompleteTradeResponseSideModifierShortExempt             CompleteTradeResponseSideModifier = "SHORT_EXEMPT"
	CompleteTradeResponseSideModifierShortCover              CompleteTradeResponseSideModifier = "SHORT_COVER"
	CompleteTradeResponseSideModifierOpen                    CompleteTradeResponseSideModifier = "OPEN"
	CompleteTradeResponseSideModifierClose                   CompleteTradeResponseSideModifier = "CLOSE"
)

func (e CompleteTradeResponseSideModifier) ToPointer() *CompleteTradeResponseSideModifier {
	return &e
}

type CompleteTradeResponseSpecialInstructions string

const (
	CompleteTradeResponseSpecialInstructionsSpecialInstructionsUnspecified CompleteTradeResponseSpecialInstructions = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
	CompleteTradeResponseSpecialInstructionsRule144                        CompleteTradeResponseSpecialInstructions = "RULE_144"
	CompleteTradeResponseSpecialInstructionsWithDividend                   CompleteTradeResponseSpecialInstructions = "WITH_DIVIDEND"
	CompleteTradeResponseSpecialInstructionsWithRights                     CompleteTradeResponseSpecialInstructions = "WITH_RIGHTS"
	CompleteTradeResponseSpecialInstructionsCloseContract                  CompleteTradeResponseSpecialInstructions = "CLOSE_CONTRACT"
	CompleteTradeResponseSpecialInstructionsCoverShort                     CompleteTradeResponseSpecialInstructions = "COVER_SHORT"
	CompleteTradeResponseSpecialInstructionsCrossTrade                     CompleteTradeResponseSpecialInstructions = "CROSS_TRADE"
	CompleteTradeResponseSpecialInstructionsOpenContractCovered            CompleteTradeResponseSpecialInstructions = "OPEN_CONTRACT_COVERED"
	CompleteTradeResponseSpecialInstructionsDiscretionExercised            CompleteTradeResponseSpecialInstructions = "DISCRETION_EXERCISED"
	CompleteTradeResponseSpecialInstructionsDiscretionNotExercised         CompleteTradeResponseSpecialInstructions = "DISCRETION_NOT_EXERCISED"
	CompleteTradeResponseSpecialInstructionsOptionAssignment               CompleteTradeResponseSpecialInstructions = "OPTION_ASSIGNMENT"
	CompleteTradeResponseSpecialInstructionsEmployeeStockOption            CompleteTradeResponseSpecialInstructions = "EMPLOYEE_STOCK_OPTION"
	CompleteTradeResponseSpecialInstructionsInvestmentBanking              CompleteTradeResponseSpecialInstructions = "INVESTMENT_BANKING"
	CompleteTradeResponseSpecialInstructionsBrokerDealerOrder              CompleteTradeResponseSpecialInstructions = "BROKER_DEALER_ORDER"
	CompleteTradeResponseSpecialInstructionsMakeMarketInSecurity           CompleteTradeResponseSpecialInstructions = "MAKE_MARKET_IN_SECURITY"
	CompleteTradeResponseSpecialInstructionsMakeMarketSolicited            CompleteTradeResponseSpecialInstructions = "MAKE_MARKET_SOLICITED"
	CompleteTradeResponseSpecialInstructionsMakeMarketUnsolicited          CompleteTradeResponseSpecialInstructions = "MAKE_MARKET_UNSOLICITED"
	CompleteTradeResponseSpecialInstructionsCustomerDirected               CompleteTradeResponseSpecialInstructions = "CUSTOMER_DIRECTED"
	CompleteTradeResponseSpecialInstructionsFullyRegistered                CompleteTradeResponseSpecialInstructions = "FULLY_REGISTERED"
	CompleteTradeResponseSpecialInstructionsOpenContract                   CompleteTradeResponseSpecialInstructions = "OPEN_CONTRACT"
	CompleteTradeResponseSpecialInstructionsOddlotDiffOnRequest            CompleteTradeResponseSpecialInstructions = "ODDLOT_DIFF_ON_REQUEST"
	CompleteTradeResponseSpecialInstructionsProspectusEnclosed             CompleteTradeResponseSpecialInstructions = "PROSPECTUS_ENCLOSED"
	CompleteTradeResponseSpecialInstructionsProspectusSeparateMail         CompleteTradeResponseSpecialInstructions = "PROSPECTUS_SEPARATE_MAIL"
	CompleteTradeResponseSpecialInstructionsSolicited                      CompleteTradeResponseSpecialInstructions = "SOLICITED"
	CompleteTradeResponseSpecialInstructionsUnsolicited                    CompleteTradeResponseSpecialInstructions = "UNSOLICITED"
	CompleteTradeResponseSpecialInstructionsXDividend                      CompleteTradeResponseSpecialInstructions = "X_DIVIDEND"
	CompleteTradeResponseSpecialInstructionsActingAsPrincipal              CompleteTradeResponseSpecialInstructions = "ACTING_AS_PRINCIPAL"
	CompleteTradeResponseSpecialInstructionsAveragePrice                   CompleteTradeResponseSpecialInstructions = "AVERAGE_PRICE"
	CompleteTradeResponseSpecialInstructionsBrokerLiquidation              CompleteTradeResponseSpecialInstructions = "BROKER_LIQUIDATION"
	CompleteTradeResponseSpecialInstructionsCouponBooks                    CompleteTradeResponseSpecialInstructions = "COUPON_BOOKS"
	CompleteTradeResponseSpecialInstructionsHasPostageFee                  CompleteTradeResponseSpecialInstructions = "HAS_POSTAGE_FEE"
	CompleteTradeResponseSpecialInstructionsInternetOrder                  CompleteTradeResponseSpecialInstructions = "INTERNET_ORDER"
	CompleteTradeResponseSpecialInstructionsMarginSellout                  CompleteTradeResponseSpecialInstructions = "MARGIN_SELLOUT"
	CompleteTradeResponseSpecialInstructionsMarketMakersAsPrincipal        CompleteTradeResponseSpecialInstructions = "MARKET_MAKERS_AS_PRINCIPAL"
	CompleteTradeResponseSpecialInstructionsNegativeNetProceed             CompleteTradeResponseSpecialInstructions = "NEGATIVE_NET_PROCEED"
	CompleteTradeResponseSpecialInstructionsPreFigIndicator                CompleteTradeResponseSpecialInstructions = "PRE_FIG_INDICATOR"
	CompleteTradeResponseSpecialInstructionsRisklessPrincipalInstruction   CompleteTradeResponseSpecialInstructions = "RISKLESS_PRINCIPAL_INSTRUCTION"
	CompleteTradeResponseSpecialInstructionsShortInstruction               CompleteTradeResponseSpecialInstructions = "SHORT_INSTRUCTION"
	CompleteTradeResponseSpecialInstructionsThirdMarket                    CompleteTradeResponseSpecialInstructions = "THIRD_MARKET"
	CompleteTradeResponseSpecialInstructionsSuppressMsrbTransmission       CompleteTradeResponseSpecialInstructions = "SUPPRESS_MSRB_TRANSMISSION"
	CompleteTradeResponseSpecialInstructionsSuppressTraceReporting         CompleteTradeResponseSpecialInstructions = "SUPPRESS_TRACE_REPORTING"
	CompleteTradeResponseSpecialInstructionsSuppressEmailNotification      CompleteTradeResponseSpecialInstructions = "SUPPRESS_EMAIL_NOTIFICATION"
	CompleteTradeResponseSpecialInstructionsStockReward                    CompleteTradeResponseSpecialInstructions = "STOCK_REWARD"
	CompleteTradeResponseSpecialInstructionsSuppressRegFees                CompleteTradeResponseSpecialInstructions = "SUPPRESS_REG_FEES"
	CompleteTradeResponseSpecialInstructionsSuppressSecFee                 CompleteTradeResponseSpecialInstructions = "SUPPRESS_SEC_FEE"
	CompleteTradeResponseSpecialInstructionsSuppressTafFee                 CompleteTradeResponseSpecialInstructions = "SUPPRESS_TAF_FEE"
	CompleteTradeResponseSpecialInstructionsDividendReinvestment           CompleteTradeResponseSpecialInstructions = "DIVIDEND_REINVESTMENT"
)

func (e CompleteTradeResponseSpecialInstructions) ToPointer() *CompleteTradeResponseSpecialInstructions {
	return &e
}

// CompleteTradeResponseVenue - Exchange venue
type CompleteTradeResponseVenue string

const (
	CompleteTradeResponseVenueExchangeVenueUnspecified CompleteTradeResponseVenue = "EXCHANGE_VENUE_UNSPECIFIED"
	CompleteTradeResponseVenueAmex                     CompleteTradeResponseVenue = "AMEX"
	CompleteTradeResponseVenueArca                     CompleteTradeResponseVenue = "ARCA"
	CompleteTradeResponseVenueBats                     CompleteTradeResponseVenue = "BATS"
	CompleteTradeResponseVenueBatsByx                  CompleteTradeResponseVenue = "BATS_BYX"
	CompleteTradeResponseVenueBoston                   CompleteTradeResponseVenue = "BOSTON"
	CompleteTradeResponseVenueBox                      CompleteTradeResponseVenue = "BOX"
	CompleteTradeResponseVenueBzx                      CompleteTradeResponseVenue = "BZX"
	CompleteTradeResponseVenueC2                       CompleteTradeResponseVenue = "C2"
	CompleteTradeResponseVenueCboe                     CompleteTradeResponseVenue = "CBOE"
	CompleteTradeResponseVenueChicago                  CompleteTradeResponseVenue = "CHICAGO"
	CompleteTradeResponseVenueCincinnati               CompleteTradeResponseVenue = "CINCINNATI"
	CompleteTradeResponseVenueEdga                     CompleteTradeResponseVenue = "EDGA"
	CompleteTradeResponseVenueEdgx                     CompleteTradeResponseVenue = "EDGX"
	CompleteTradeResponseVenueExclearing               CompleteTradeResponseVenue = "EXCLEARING"
	CompleteTradeResponseVenueIex                      CompleteTradeResponseVenue = "IEX"
	CompleteTradeResponseVenueIse                      CompleteTradeResponseVenue = "ISE"
	CompleteTradeResponseVenueIseGemini                CompleteTradeResponseVenue = "ISE_GEMINI"
	CompleteTradeResponseVenueMiax                     CompleteTradeResponseVenue = "MIAX"
	CompleteTradeResponseVenueNasdaq                   CompleteTradeResponseVenue = "NASDAQ"
	CompleteTradeResponseVenueNasdaqOmxBx              CompleteTradeResponseVenue = "NASDAQ_OMX_BX"
	CompleteTradeResponseVenueNyse                     CompleteTradeResponseVenue = "NYSE"
	CompleteTradeResponseVenuePhlx                     CompleteTradeResponseVenue = "PHLX"
	CompleteTradeResponseVenueOtc                      CompleteTradeResponseVenue = "OTC"
	CompleteTradeResponseVenueQsr                      CompleteTradeResponseVenue = "QSR"
)

func (e CompleteTradeResponseVenue) ToPointer() *CompleteTradeResponseVenue {
	return &e
}

// CompleteTradeResponseWhenIssued - Denotes that this trade was either when_issued or when_distributed.
type CompleteTradeResponseWhenIssued string

const (
	CompleteTradeResponseWhenIssuedWhenIssuedTypeUnspecified CompleteTradeResponseWhenIssued = "WHEN_ISSUED_TYPE_UNSPECIFIED"
	CompleteTradeResponseWhenIssuedWhenIssued                CompleteTradeResponseWhenIssued = "WHEN_ISSUED"
	CompleteTradeResponseWhenIssuedWhenDistributed           CompleteTradeResponseWhenIssued = "WHEN_DISTRIBUTED"
)

func (e CompleteTradeResponseWhenIssued) ToPointer() *CompleteTradeResponseWhenIssued {
	return &e
}

// Trade - The completed trade.
type Trade struct {
	// A globally unique identifier referencing a single account.
	AccountID *string `json:"account_id,omitempty"`
	// The current activity_id of this trade in the Ledger.
	ActivityID *string `json:"activity_id,omitempty"`
	// Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Fractional support for market-makers' internal order ids.
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// Type of the asset being traded. Required for SYMBOL and CUSIP.
	AssetType *CompleteTradeResponseAssetType `json:"asset_type,omitempty"`
	// Broker capacity for the trade.
	BrokerCapacity *CompleteTradeResponseBrokerCapacity `json:"broker_capacity,omitempty"`
	// The unique identifier that is associated with an order. Must be unique by date per trade per client.
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Executing broker of the trade.
	ExecutingBroker *string `json:"executing_broker,omitempty"`
	// The executions (sometimes referred to as partial-fills) that comprise the trade.
	Executions []Execution `json:"executions,omitempty"`
	// Any client calculated fees associated with the trade. Only allowed if trade.open = false. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed.
	Fees []BookingFee `json:"fees,omitempty"`
	// Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Identifier type for the asset being traded.
	IdentifierType *CompleteTradeResponseIdentifierType `json:"identifier_type,omitempty"`
	// Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP.
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// Date field to support extended trading hours.
	LocalMarketTradeDate *CompleteTradeResponseLocalMarketTradeDate `json:"local_market_trade_date,omitempty"`
	// One or many lot matching instructions for the trade.
	LotMatchingInstructions []BookingLot `json:"lot_matching_instructions,omitempty"`
	// Market Identifier Code
	MicCode *string `json:"mic_code,omitempty"`
	// The resource name of the trade.
	Name *string `json:"name,omitempty"`
	// State of this trade's completeness in filling. True: trade is not done filling and can append more executions onto the trade False: trade is done filling and cannot append more executions onto the trade By default, trades are closed when they are created. An open trade can later be closed by calling the CompleteTrade endpoint. Additional executions can be appended to an open trade by calling the CreateExecution endpoint. Trades that are left open will be automatically closed nightly before Ledger's EOD.
	Open *bool `json:"open,omitempty"`
	// Street-level order id, unique by day per broker.
	OrderID *string `json:"order_id,omitempty"`
	// Route type for the trade.
	RouteType *CompleteTradeResponseRouteType `json:"route_type,omitempty"`
	// Defaults to T+1 for equities if this is not provided. Calculated by the execution's execution_time field in Eastern Time.
	SettlementDate *CompleteTradeResponseSettlementDate `json:"settlement_date,omitempty"`
	// Denotes if the trade is a SELL or a BUY.
	Side *CompleteTradeResponseSide `json:"side,omitempty"`
	// Side modifier for the trade.
	SideModifier *CompleteTradeResponseSideModifier `json:"side_modifier,omitempty"`
	// The source of the submission.
	SourceApplication *string `json:"source_application,omitempty"`
	// An enumerated list of values used to indicate certain attributes about a trade (E.g. DISCRETION_EXERCISED, BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)
	SpecialInstructions []CompleteTradeResponseSpecialInstructions `json:"special_instructions,omitempty"`
	// A ULID to uniquely identify the trade globally.
	TradeID *string `json:"trade_id,omitempty"`
	// Exchange venue
	Venue *CompleteTradeResponseVenue `json:"venue,omitempty"`
	// Denotes that this trade was either when_issued or when_distributed.
	WhenIssued *CompleteTradeResponseWhenIssued `json:"when_issued,omitempty"`
}

func (o *Trade) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *Trade) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *Trade) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *Trade) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *Trade) GetAssetType() *CompleteTradeResponseAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *Trade) GetBrokerCapacity() *CompleteTradeResponseBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *Trade) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *Trade) GetExecutingBroker() *string {
	if o == nil {
		return nil
	}
	return o.ExecutingBroker
}

func (o *Trade) GetExecutions() []Execution {
	if o == nil {
		return nil
	}
	return o.Executions
}

func (o *Trade) GetFees() []BookingFee {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *Trade) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *Trade) GetIdentifierType() *CompleteTradeResponseIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *Trade) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *Trade) GetLocalMarketTradeDate() *CompleteTradeResponseLocalMarketTradeDate {
	if o == nil {
		return nil
	}
	return o.LocalMarketTradeDate
}

func (o *Trade) GetLotMatchingInstructions() []BookingLot {
	if o == nil {
		return nil
	}
	return o.LotMatchingInstructions
}

func (o *Trade) GetMicCode() *string {
	if o == nil {
		return nil
	}
	return o.MicCode
}

func (o *Trade) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Trade) GetOpen() *bool {
	if o == nil {
		return nil
	}
	return o.Open
}

func (o *Trade) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *Trade) GetRouteType() *CompleteTradeResponseRouteType {
	if o == nil {
		return nil
	}
	return o.RouteType
}

func (o *Trade) GetSettlementDate() *CompleteTradeResponseSettlementDate {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *Trade) GetSide() *CompleteTradeResponseSide {
	if o == nil {
		return nil
	}
	return o.Side
}

func (o *Trade) GetSideModifier() *CompleteTradeResponseSideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *Trade) GetSourceApplication() *string {
	if o == nil {
		return nil
	}
	return o.SourceApplication
}

func (o *Trade) GetSpecialInstructions() []CompleteTradeResponseSpecialInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *Trade) GetTradeID() *string {
	if o == nil {
		return nil
	}
	return o.TradeID
}

func (o *Trade) GetVenue() *CompleteTradeResponseVenue {
	if o == nil {
		return nil
	}
	return o.Venue
}

func (o *Trade) GetWhenIssued() *CompleteTradeResponseWhenIssued {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

// CompleteTradeResponse - A response to the complete trade method.
type CompleteTradeResponse struct {
	// The completed trade.
	Trade *Trade `json:"trade,omitempty"`
}

func (o *CompleteTradeResponse) GetTrade() *Trade {
	if o == nil {
		return nil
	}
	return o.Trade
}
