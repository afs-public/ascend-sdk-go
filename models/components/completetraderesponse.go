// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// CompleteTradeResponseBrokerCapacity - Used to calculate broadridge blotter code
type CompleteTradeResponseBrokerCapacity string

const (
	CompleteTradeResponseBrokerCapacityCapacityUnspecified CompleteTradeResponseBrokerCapacity = "CAPACITY_UNSPECIFIED"
	CompleteTradeResponseBrokerCapacityAgency              CompleteTradeResponseBrokerCapacity = "AGENCY"
	CompleteTradeResponseBrokerCapacityPrincipal           CompleteTradeResponseBrokerCapacity = "PRINCIPAL"
	CompleteTradeResponseBrokerCapacityMixed               CompleteTradeResponseBrokerCapacity = "MIXED"
)

func (e CompleteTradeResponseBrokerCapacity) ToPointer() *CompleteTradeResponseBrokerCapacity {
	return &e
}

// CompleteTradeResponsePrevailingMarketPrice - The price for the instrument that is prevailing in the market.
type CompleteTradeResponsePrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CompleteTradeResponsePrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CompleteTradeResponsePriceAdjustmentAmount - Total monetary value of the price_adjustment
type CompleteTradeResponsePriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CompleteTradeResponsePriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CompleteTradeResponsePriceAdjustmentPercent - The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
type CompleteTradeResponsePriceAdjustmentPercent struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CompleteTradeResponsePriceAdjustmentPercent) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CompleteTradeResponsePriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security
type CompleteTradeResponsePriceAdjustmentType string

const (
	CompleteTradeResponsePriceAdjustmentTypePriceAdjustmentTypeUnspecified CompleteTradeResponsePriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	CompleteTradeResponsePriceAdjustmentTypeMarkup                         CompleteTradeResponsePriceAdjustmentType = "MARKUP"
	CompleteTradeResponsePriceAdjustmentTypeMarkdown                       CompleteTradeResponsePriceAdjustmentType = "MARKDOWN"
	CompleteTradeResponsePriceAdjustmentTypeSalesLoad                      CompleteTradeResponsePriceAdjustmentType = "SALES_LOAD"
)

func (e CompleteTradeResponsePriceAdjustmentType) ToPointer() *CompleteTradeResponsePriceAdjustmentType {
	return &e
}

// CompleteTradeResponsePriceAdjustmentRecord - Information about any price adjustments applied to the security
type CompleteTradeResponsePriceAdjustmentRecord struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *CompleteTradeResponsePriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
	PriceAdjustmentPercent *CompleteTradeResponsePriceAdjustmentPercent `json:"price_adjustment_percent,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security
	PriceAdjustmentType *CompleteTradeResponsePriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *CompleteTradeResponsePriceAdjustmentRecord) GetPriceAdjustmentAmount() *CompleteTradeResponsePriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *CompleteTradeResponsePriceAdjustmentRecord) GetPriceAdjustmentPercent() *CompleteTradeResponsePriceAdjustmentPercent {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentPercent
}

func (o *CompleteTradeResponsePriceAdjustmentRecord) GetPriceAdjustmentType() *CompleteTradeResponsePriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// CompleteTradeResponseTrade - The completed trade.
type CompleteTradeResponseTrade struct {
	// Free form text field containing additional information for a trade
	AdditionalInstructions []string `json:"additional_instructions,omitempty"`
	// Max Length 100 characters. Alternate order id from the street used for FRAC trades
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// uuid assigned by the Booking API if a trade belongs to an allocation
	BookingAPITradeAllocationID *string `json:"booking_api_trade_allocation_id,omitempty"`
	// uuid assigned by the Booking API to all trades
	BookingAPITradeID *string `json:"booking_api_trade_id,omitempty"`
	// Executing broker of the trade
	Broker *string `json:"broker,omitempty"`
	// Used to calculate broadridge blotter code
	BrokerCapacity *CompleteTradeResponseBrokerCapacity `json:"broker_capacity,omitempty"`
	// Free form text submitted by the client for internal purposes
	ClientMemos []string `json:"client_memos,omitempty"`
	// 32 characters. The client order ID from the order submitted
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// MIC code for the exchange
	Exchange *string `json:"exchange,omitempty"`
	// Execution id from the street
	ExecutionID *string `json:"execution_id,omitempty"`
	// Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
	ExecutionOnly *bool `json:"execution_only,omitempty"`
	// Max Length 100 characters. External system id provided by a client
	ExternalID *string `json:"external_id,omitempty"`
	// The confirmation number associated with a mutual fund trade
	FundConfirmationNumber *string `json:"fund_confirmation_number,omitempty"`
	// Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
	GatewayClientOrderID *string `json:"gateway_client_order_id,omitempty"`
	// If set to true, indicates the trade should be omitted from client billing
	InternalError *bool `json:"internal_error,omitempty"`
	// Set on penny-for-the-lot trades
	IsWriteoff *bool `json:"is_writeoff,omitempty"`
	// Repeated record containing information about the tax lots, if specified
	Lots []Lot `json:"lots,omitempty"`
	// Max Length 100 characters. Internally generated order id that is returned to client on exec reports
	OrderID *string `json:"order_id,omitempty"`
	// The price for the instrument that is prevailing in the market.
	PrevailingMarketPrice *CompleteTradeResponsePrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Information about any price adjustments applied to the security
	PriceAdjustmentRecord *CompleteTradeResponsePriceAdjustmentRecord `json:"price_adjustment_record,omitempty"`
	// Used to calculate broadridge blotter code
	Route *string `json:"route,omitempty"`
	// The special instructions for a trade
	SpecialInstructions []string `json:"special_instructions,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the particular issue
	SymbolDescription *string `json:"symbol_description,omitempty"`
	// Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
	WhenIssued *bool `json:"when_issued,omitempty"`
	// The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
	YieldRecords []YieldRecord `json:"yield_records,omitempty"`
}

func (o *CompleteTradeResponseTrade) GetAdditionalInstructions() []string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *CompleteTradeResponseTrade) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *CompleteTradeResponseTrade) GetBookingAPITradeAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeAllocationID
}

func (o *CompleteTradeResponseTrade) GetBookingAPITradeID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeID
}

func (o *CompleteTradeResponseTrade) GetBroker() *string {
	if o == nil {
		return nil
	}
	return o.Broker
}

func (o *CompleteTradeResponseTrade) GetBrokerCapacity() *CompleteTradeResponseBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *CompleteTradeResponseTrade) GetClientMemos() []string {
	if o == nil {
		return nil
	}
	return o.ClientMemos
}

func (o *CompleteTradeResponseTrade) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *CompleteTradeResponseTrade) GetExchange() *string {
	if o == nil {
		return nil
	}
	return o.Exchange
}

func (o *CompleteTradeResponseTrade) GetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionID
}

func (o *CompleteTradeResponseTrade) GetExecutionOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ExecutionOnly
}

func (o *CompleteTradeResponseTrade) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CompleteTradeResponseTrade) GetFundConfirmationNumber() *string {
	if o == nil {
		return nil
	}
	return o.FundConfirmationNumber
}

func (o *CompleteTradeResponseTrade) GetGatewayClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.GatewayClientOrderID
}

func (o *CompleteTradeResponseTrade) GetInternalError() *bool {
	if o == nil {
		return nil
	}
	return o.InternalError
}

func (o *CompleteTradeResponseTrade) GetIsWriteoff() *bool {
	if o == nil {
		return nil
	}
	return o.IsWriteoff
}

func (o *CompleteTradeResponseTrade) GetLots() []Lot {
	if o == nil {
		return nil
	}
	return o.Lots
}

func (o *CompleteTradeResponseTrade) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *CompleteTradeResponseTrade) GetPrevailingMarketPrice() *CompleteTradeResponsePrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *CompleteTradeResponseTrade) GetPriceAdjustmentRecord() *CompleteTradeResponsePriceAdjustmentRecord {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentRecord
}

func (o *CompleteTradeResponseTrade) GetRoute() *string {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *CompleteTradeResponseTrade) GetSpecialInstructions() []string {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *CompleteTradeResponseTrade) GetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.SymbolDescription
}

func (o *CompleteTradeResponseTrade) GetWhenIssued() *bool {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

func (o *CompleteTradeResponseTrade) GetYieldRecords() []YieldRecord {
	if o == nil {
		return nil
	}
	return o.YieldRecords
}

// CompleteTradeResponse - A response to the complete trade method.
type CompleteTradeResponse struct {
	// The completed trade.
	Trade *CompleteTradeResponseTrade `json:"trade,omitempty"`
}

func (o *CompleteTradeResponse) GetTrade() *CompleteTradeResponseTrade {
	if o == nil {
		return nil
	}
	return o.Trade
}
