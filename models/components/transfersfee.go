// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// TransfersFeeAmount - The amount of the fee being charged from the investor's account
type TransfersFeeAmount struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TransfersFeeAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TransfersFeeStateState - The high level state of a transfer, one of:
// - `PROCESSING` - The transfer is being processed and will be posted if successful.
// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
// - `COMPLETED` - The transfer has been batched and completed.
// - `REJECTED` - The transfer was rejected.
// - `CANCELED` - The transfer was canceled.
// - `RETURNED` - The transfer was returned.
// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
type TransfersFeeStateState string

const (
	TransfersFeeStateStateStateUnspecified TransfersFeeStateState = "STATE_UNSPECIFIED"
	TransfersFeeStateStateProcessing       TransfersFeeStateState = "PROCESSING"
	TransfersFeeStateStatePendingReview    TransfersFeeStateState = "PENDING_REVIEW"
	TransfersFeeStateStatePosted           TransfersFeeStateState = "POSTED"
	TransfersFeeStateStateCompleted        TransfersFeeStateState = "COMPLETED"
	TransfersFeeStateStateRejected         TransfersFeeStateState = "REJECTED"
	TransfersFeeStateStateCanceled         TransfersFeeStateState = "CANCELED"
	TransfersFeeStateStateReturned         TransfersFeeStateState = "RETURNED"
	TransfersFeeStateStatePostponed        TransfersFeeStateState = "POSTPONED"
)

func (e TransfersFeeStateState) ToPointer() *TransfersFeeStateState {
	return &e
}

// TransfersFeeState - The current state of the fee
type TransfersFeeState struct {
	// The user or service that triggered the state update.
	Actor *string `json:"actor,omitempty"`
	// Additional description of the transfer state.
	Message *string `json:"message,omitempty"`
	// Additional metadata relating to the transfer state. Included data depends on the state, e.g.:
	//  - Rejection reasons are included when the `state` is `REJECTED`
	//  - Reason and comment are included when `state` is `CANCELED`
	Metadata map[string]any `json:"metadata,omitempty"`
	// The high level state of a transfer, one of:
	// - `PROCESSING` - The transfer is being processed and will be posted if successful.
	// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
	// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
	// - `COMPLETED` - The transfer has been batched and completed.
	// - `REJECTED` - The transfer was rejected.
	// - `CANCELED` - The transfer was canceled.
	// - `RETURNED` - The transfer was returned.
	// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
	State *TransfersFeeStateState `json:"state,omitempty"`
	// The time of the state update.
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

func (t TransfersFeeState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransfersFeeState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransfersFeeState) GetActor() *string {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *TransfersFeeState) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *TransfersFeeState) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *TransfersFeeState) GetState() *TransfersFeeStateState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *TransfersFeeState) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

// TransfersFeeType - The type of the fee being charged
type TransfersFeeType string

const (
	TransfersFeeTypeTypeUnspecified TransfersFeeType = "TYPE_UNSPECIFIED"
	TransfersFeeTypeManagement      TransfersFeeType = "MANAGEMENT"
	TransfersFeeTypeAdvisory        TransfersFeeType = "ADVISORY"
	TransfersFeeTypeExchange        TransfersFeeType = "EXCHANGE"
	TransfersFeeTypePlatform        TransfersFeeType = "PLATFORM"
	TransfersFeeTypeInactivity      TransfersFeeType = "INACTIVITY"
)

func (e TransfersFeeType) ToPointer() *TransfersFeeType {
	return &e
}

// TransfersFee - A transfer using the FEE mechanism. Funds are moved from a customer's brokerage account to the firm account
type TransfersFee struct {
	// The amount of the fee being charged from the investor's account
	Amount *TransfersFeeAmount `json:"amount,omitempty"`
	// External identifier supplied by the API caller. Each request must have a unique pairing of client_transfer_id and account
	ClientTransferID *string `json:"client_transfer_id,omitempty"`
	// Optional description information that will attach to this transaction
	Description *string `json:"description,omitempty"`
	// Optional account field to denote where the fee amount should be deposited into. If provided, the account must be a fee operating account. In the case of multiple fee operating accounts under the same correspondent, this field must be provided. If not provided, this will be looked up asynchronously (therefore will not be in the initial response)
	FeeOperatingAccount *string `json:"fee_operating_account,omitempty"`
	// Full name of the fee resource, which contains account id and fee transaction id
	Name *string `json:"name,omitempty"`
	// The current state of the fee
	State *TransfersFeeState `json:"state,omitempty"`
	// The type of the fee being charged
	Type *TransfersFeeType `json:"type,omitempty"`
}

func (o *TransfersFee) GetAmount() *TransfersFeeAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransfersFee) GetClientTransferID() *string {
	if o == nil {
		return nil
	}
	return o.ClientTransferID
}

func (o *TransfersFee) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TransfersFee) GetFeeOperatingAccount() *string {
	if o == nil {
		return nil
	}
	return o.FeeOperatingAccount
}

func (o *TransfersFee) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TransfersFee) GetState() *TransfersFeeState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *TransfersFee) GetType() *TransfersFeeType {
	if o == nil {
		return nil
	}
	return o.Type
}
