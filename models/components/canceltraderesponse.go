// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// CancelTradeResponseAssetType - Type of the asset being traded.
type CancelTradeResponseAssetType string

const (
	CancelTradeResponseAssetTypeAssetTypeUnspecified CancelTradeResponseAssetType = "ASSET_TYPE_UNSPECIFIED"
	CancelTradeResponseAssetTypeEquity               CancelTradeResponseAssetType = "EQUITY"
	CancelTradeResponseAssetTypeFixedIncome          CancelTradeResponseAssetType = "FIXED_INCOME"
)

func (e CancelTradeResponseAssetType) ToPointer() *CancelTradeResponseAssetType {
	return &e
}

// CancelTradeResponseBrokerCapacity - Broker capacity for the trade.
type CancelTradeResponseBrokerCapacity string

const (
	CancelTradeResponseBrokerCapacityCapacityUnspecified CancelTradeResponseBrokerCapacity = "CAPACITY_UNSPECIFIED"
	CancelTradeResponseBrokerCapacityAgency              CancelTradeResponseBrokerCapacity = "AGENCY"
	CancelTradeResponseBrokerCapacityPrincipal           CancelTradeResponseBrokerCapacity = "PRINCIPAL"
	CancelTradeResponseBrokerCapacityMixed               CancelTradeResponseBrokerCapacity = "MIXED"
)

func (e CancelTradeResponseBrokerCapacity) ToPointer() *CancelTradeResponseBrokerCapacity {
	return &e
}

// CancelTradeResponseIdentifierType - Identifier type for the asset being traded.
type CancelTradeResponseIdentifierType string

const (
	CancelTradeResponseIdentifierTypeIdentifierTypeUnspecified CancelTradeResponseIdentifierType = "IDENTIFIER_TYPE_UNSPECIFIED"
	CancelTradeResponseIdentifierTypeAssetID                   CancelTradeResponseIdentifierType = "ASSET_ID"
	CancelTradeResponseIdentifierTypeSymbol                    CancelTradeResponseIdentifierType = "SYMBOL"
	CancelTradeResponseIdentifierTypeCusip                     CancelTradeResponseIdentifierType = "CUSIP"
	CancelTradeResponseIdentifierTypeIsin                      CancelTradeResponseIdentifierType = "ISIN"
)

func (e CancelTradeResponseIdentifierType) ToPointer() *CancelTradeResponseIdentifierType {
	return &e
}

// CancelTradeResponseLocalMarketTradeDate - Date field to support extended trading hours.
type CancelTradeResponseLocalMarketTradeDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *CancelTradeResponseLocalMarketTradeDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *CancelTradeResponseLocalMarketTradeDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *CancelTradeResponseLocalMarketTradeDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// CancelTradeResponseRouteType - Route type for the trade.
type CancelTradeResponseRouteType string

const (
	CancelTradeResponseRouteTypeRouteTypeUnspecified CancelTradeResponseRouteType = "ROUTE_TYPE_UNSPECIFIED"
	CancelTradeResponseRouteTypeDma                  CancelTradeResponseRouteType = "DMA"
	CancelTradeResponseRouteTypeMngd                 CancelTradeResponseRouteType = "MNGD"
	CancelTradeResponseRouteTypeQuik                 CancelTradeResponseRouteType = "QUIK"
	CancelTradeResponseRouteTypeAlgo                 CancelTradeResponseRouteType = "ALGO"
	CancelTradeResponseRouteTypeAway                 CancelTradeResponseRouteType = "AWAY"
	CancelTradeResponseRouteTypeCorr                 CancelTradeResponseRouteType = "CORR"
	CancelTradeResponseRouteTypeBoats                CancelTradeResponseRouteType = "BOATS"
)

func (e CancelTradeResponseRouteType) ToPointer() *CancelTradeResponseRouteType {
	return &e
}

// CancelTradeResponseSettlementDate - Defaults to T+1 for equities if this is not provided. Calculated by the execution's execution_time field in Eastern Time.
type CancelTradeResponseSettlementDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *CancelTradeResponseSettlementDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *CancelTradeResponseSettlementDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *CancelTradeResponseSettlementDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// CancelTradeResponseSide - Denotes if the trade is a SELL or a BUY.
type CancelTradeResponseSide string

const (
	CancelTradeResponseSideSideUnspecified CancelTradeResponseSide = "SIDE_UNSPECIFIED"
	CancelTradeResponseSideBuy             CancelTradeResponseSide = "BUY"
	CancelTradeResponseSideSell            CancelTradeResponseSide = "SELL"
)

func (e CancelTradeResponseSide) ToPointer() *CancelTradeResponseSide {
	return &e
}

// CancelTradeResponseSideModifier - Side modifier for the trade.
type CancelTradeResponseSideModifier string

const (
	CancelTradeResponseSideModifierSideModifierUnspecified CancelTradeResponseSideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	CancelTradeResponseSideModifierShort                   CancelTradeResponseSideModifier = "SHORT"
	CancelTradeResponseSideModifierShortExempt             CancelTradeResponseSideModifier = "SHORT_EXEMPT"
	CancelTradeResponseSideModifierShortCover              CancelTradeResponseSideModifier = "SHORT_COVER"
	CancelTradeResponseSideModifierOpen                    CancelTradeResponseSideModifier = "OPEN"
	CancelTradeResponseSideModifierClose                   CancelTradeResponseSideModifier = "CLOSE"
)

func (e CancelTradeResponseSideModifier) ToPointer() *CancelTradeResponseSideModifier {
	return &e
}

type CancelTradeResponseSpecialInstructions string

const (
	CancelTradeResponseSpecialInstructionsSpecialInstructionsUnspecified CancelTradeResponseSpecialInstructions = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
	CancelTradeResponseSpecialInstructionsRule144                        CancelTradeResponseSpecialInstructions = "RULE_144"
	CancelTradeResponseSpecialInstructionsWithDividend                   CancelTradeResponseSpecialInstructions = "WITH_DIVIDEND"
	CancelTradeResponseSpecialInstructionsWithRights                     CancelTradeResponseSpecialInstructions = "WITH_RIGHTS"
	CancelTradeResponseSpecialInstructionsCloseContract                  CancelTradeResponseSpecialInstructions = "CLOSE_CONTRACT"
	CancelTradeResponseSpecialInstructionsCoverShort                     CancelTradeResponseSpecialInstructions = "COVER_SHORT"
	CancelTradeResponseSpecialInstructionsCrossTrade                     CancelTradeResponseSpecialInstructions = "CROSS_TRADE"
	CancelTradeResponseSpecialInstructionsOpenContractCovered            CancelTradeResponseSpecialInstructions = "OPEN_CONTRACT_COVERED"
	CancelTradeResponseSpecialInstructionsDiscretionExercised            CancelTradeResponseSpecialInstructions = "DISCRETION_EXERCISED"
	CancelTradeResponseSpecialInstructionsDiscretionNotExercised         CancelTradeResponseSpecialInstructions = "DISCRETION_NOT_EXERCISED"
	CancelTradeResponseSpecialInstructionsOptionAssignment               CancelTradeResponseSpecialInstructions = "OPTION_ASSIGNMENT"
	CancelTradeResponseSpecialInstructionsEmployeeStockOption            CancelTradeResponseSpecialInstructions = "EMPLOYEE_STOCK_OPTION"
	CancelTradeResponseSpecialInstructionsInvestmentBanking              CancelTradeResponseSpecialInstructions = "INVESTMENT_BANKING"
	CancelTradeResponseSpecialInstructionsBrokerDealerOrder              CancelTradeResponseSpecialInstructions = "BROKER_DEALER_ORDER"
	CancelTradeResponseSpecialInstructionsMakeMarketInSecurity           CancelTradeResponseSpecialInstructions = "MAKE_MARKET_IN_SECURITY"
	CancelTradeResponseSpecialInstructionsMakeMarketSolicited            CancelTradeResponseSpecialInstructions = "MAKE_MARKET_SOLICITED"
	CancelTradeResponseSpecialInstructionsMakeMarketUnsolicited          CancelTradeResponseSpecialInstructions = "MAKE_MARKET_UNSOLICITED"
	CancelTradeResponseSpecialInstructionsCustomerDirected               CancelTradeResponseSpecialInstructions = "CUSTOMER_DIRECTED"
	CancelTradeResponseSpecialInstructionsFullyRegistered                CancelTradeResponseSpecialInstructions = "FULLY_REGISTERED"
	CancelTradeResponseSpecialInstructionsOpenContract                   CancelTradeResponseSpecialInstructions = "OPEN_CONTRACT"
	CancelTradeResponseSpecialInstructionsOddlotDiffOnRequest            CancelTradeResponseSpecialInstructions = "ODDLOT_DIFF_ON_REQUEST"
	CancelTradeResponseSpecialInstructionsProspectusEnclosed             CancelTradeResponseSpecialInstructions = "PROSPECTUS_ENCLOSED"
	CancelTradeResponseSpecialInstructionsProspectusSeparateMail         CancelTradeResponseSpecialInstructions = "PROSPECTUS_SEPARATE_MAIL"
	CancelTradeResponseSpecialInstructionsSolicited                      CancelTradeResponseSpecialInstructions = "SOLICITED"
	CancelTradeResponseSpecialInstructionsUnsolicited                    CancelTradeResponseSpecialInstructions = "UNSOLICITED"
	CancelTradeResponseSpecialInstructionsXDividend                      CancelTradeResponseSpecialInstructions = "X_DIVIDEND"
	CancelTradeResponseSpecialInstructionsActingAsPrincipal              CancelTradeResponseSpecialInstructions = "ACTING_AS_PRINCIPAL"
	CancelTradeResponseSpecialInstructionsAveragePrice                   CancelTradeResponseSpecialInstructions = "AVERAGE_PRICE"
	CancelTradeResponseSpecialInstructionsBrokerLiquidation              CancelTradeResponseSpecialInstructions = "BROKER_LIQUIDATION"
	CancelTradeResponseSpecialInstructionsCouponBooks                    CancelTradeResponseSpecialInstructions = "COUPON_BOOKS"
	CancelTradeResponseSpecialInstructionsHasPostageFee                  CancelTradeResponseSpecialInstructions = "HAS_POSTAGE_FEE"
	CancelTradeResponseSpecialInstructionsInternetOrder                  CancelTradeResponseSpecialInstructions = "INTERNET_ORDER"
	CancelTradeResponseSpecialInstructionsMarginSellout                  CancelTradeResponseSpecialInstructions = "MARGIN_SELLOUT"
	CancelTradeResponseSpecialInstructionsMarketMakersAsPrincipal        CancelTradeResponseSpecialInstructions = "MARKET_MAKERS_AS_PRINCIPAL"
	CancelTradeResponseSpecialInstructionsNegativeNetProceed             CancelTradeResponseSpecialInstructions = "NEGATIVE_NET_PROCEED"
	CancelTradeResponseSpecialInstructionsPreFigIndicator                CancelTradeResponseSpecialInstructions = "PRE_FIG_INDICATOR"
	CancelTradeResponseSpecialInstructionsRisklessPrincipalInstruction   CancelTradeResponseSpecialInstructions = "RISKLESS_PRINCIPAL_INSTRUCTION"
	CancelTradeResponseSpecialInstructionsShortInstruction               CancelTradeResponseSpecialInstructions = "SHORT_INSTRUCTION"
	CancelTradeResponseSpecialInstructionsThirdMarket                    CancelTradeResponseSpecialInstructions = "THIRD_MARKET"
	CancelTradeResponseSpecialInstructionsSuppressMsrbTransmission       CancelTradeResponseSpecialInstructions = "SUPPRESS_MSRB_TRANSMISSION"
	CancelTradeResponseSpecialInstructionsSuppressTraceReporting         CancelTradeResponseSpecialInstructions = "SUPPRESS_TRACE_REPORTING"
	CancelTradeResponseSpecialInstructionsSuppressEmailNotification      CancelTradeResponseSpecialInstructions = "SUPPRESS_EMAIL_NOTIFICATION"
	CancelTradeResponseSpecialInstructionsStockReward                    CancelTradeResponseSpecialInstructions = "STOCK_REWARD"
	CancelTradeResponseSpecialInstructionsSuppressRegFees                CancelTradeResponseSpecialInstructions = "SUPPRESS_REG_FEES"
	CancelTradeResponseSpecialInstructionsSuppressSecFee                 CancelTradeResponseSpecialInstructions = "SUPPRESS_SEC_FEE"
	CancelTradeResponseSpecialInstructionsSuppressTafFee                 CancelTradeResponseSpecialInstructions = "SUPPRESS_TAF_FEE"
	CancelTradeResponseSpecialInstructionsDividendReinvestment           CancelTradeResponseSpecialInstructions = "DIVIDEND_REINVESTMENT"
)

func (e CancelTradeResponseSpecialInstructions) ToPointer() *CancelTradeResponseSpecialInstructions {
	return &e
}

// CancelTradeResponseVenue - Exchange venue
type CancelTradeResponseVenue string

const (
	CancelTradeResponseVenueExchangeVenueUnspecified CancelTradeResponseVenue = "EXCHANGE_VENUE_UNSPECIFIED"
	CancelTradeResponseVenueAmex                     CancelTradeResponseVenue = "AMEX"
	CancelTradeResponseVenueArca                     CancelTradeResponseVenue = "ARCA"
	CancelTradeResponseVenueBats                     CancelTradeResponseVenue = "BATS"
	CancelTradeResponseVenueBatsByx                  CancelTradeResponseVenue = "BATS_BYX"
	CancelTradeResponseVenueBoston                   CancelTradeResponseVenue = "BOSTON"
	CancelTradeResponseVenueBox                      CancelTradeResponseVenue = "BOX"
	CancelTradeResponseVenueBzx                      CancelTradeResponseVenue = "BZX"
	CancelTradeResponseVenueC2                       CancelTradeResponseVenue = "C2"
	CancelTradeResponseVenueCboe                     CancelTradeResponseVenue = "CBOE"
	CancelTradeResponseVenueChicago                  CancelTradeResponseVenue = "CHICAGO"
	CancelTradeResponseVenueCincinnati               CancelTradeResponseVenue = "CINCINNATI"
	CancelTradeResponseVenueEdga                     CancelTradeResponseVenue = "EDGA"
	CancelTradeResponseVenueEdgx                     CancelTradeResponseVenue = "EDGX"
	CancelTradeResponseVenueExclearing               CancelTradeResponseVenue = "EXCLEARING"
	CancelTradeResponseVenueIex                      CancelTradeResponseVenue = "IEX"
	CancelTradeResponseVenueIse                      CancelTradeResponseVenue = "ISE"
	CancelTradeResponseVenueIseGemini                CancelTradeResponseVenue = "ISE_GEMINI"
	CancelTradeResponseVenueMiax                     CancelTradeResponseVenue = "MIAX"
	CancelTradeResponseVenueNasdaq                   CancelTradeResponseVenue = "NASDAQ"
	CancelTradeResponseVenueNasdaqOmxBx              CancelTradeResponseVenue = "NASDAQ_OMX_BX"
	CancelTradeResponseVenueNyse                     CancelTradeResponseVenue = "NYSE"
	CancelTradeResponseVenuePhlx                     CancelTradeResponseVenue = "PHLX"
	CancelTradeResponseVenueOtc                      CancelTradeResponseVenue = "OTC"
	CancelTradeResponseVenueQsr                      CancelTradeResponseVenue = "QSR"
)

func (e CancelTradeResponseVenue) ToPointer() *CancelTradeResponseVenue {
	return &e
}

// CancelTradeResponseWhenIssued - Denotes that this trade was either when_issued or when_distributed.
type CancelTradeResponseWhenIssued string

const (
	CancelTradeResponseWhenIssuedWhenIssuedTypeUnspecified CancelTradeResponseWhenIssued = "WHEN_ISSUED_TYPE_UNSPECIFIED"
	CancelTradeResponseWhenIssuedWhenIssued                CancelTradeResponseWhenIssued = "WHEN_ISSUED"
	CancelTradeResponseWhenIssuedWhenDistributed           CancelTradeResponseWhenIssued = "WHEN_DISTRIBUTED"
)

func (e CancelTradeResponseWhenIssued) ToPointer() *CancelTradeResponseWhenIssued {
	return &e
}

// CancelTradeResponseTrade - The trade that was canceled.
type CancelTradeResponseTrade struct {
	// A globally unique identifier referencing a single account.
	AccountID *string `json:"account_id,omitempty"`
	// The current activity_id of this trade in the Ledger.
	ActivityID *string `json:"activity_id,omitempty"`
	// Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Fractional support for market-makers' internal order ids.
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// Type of the asset being traded.
	AssetType *CancelTradeResponseAssetType `json:"asset_type,omitempty"`
	// Broker capacity for the trade.
	BrokerCapacity *CancelTradeResponseBrokerCapacity `json:"broker_capacity,omitempty"`
	// The unique identifier that is associated with an order. Must be unique by date per trade per client.
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Executing broker of the trade.
	ExecutingBroker *string `json:"executing_broker,omitempty"`
	// The executions (sometimes referred to as partial-fills) that comprise the trade.
	Executions []Execution `json:"executions,omitempty"`
	// Any client calculated fees associated with the trade. Only allowed if trade.open = false. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed.
	Fees []BookingFee `json:"fees,omitempty"`
	// Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Identifier type for the asset being traded.
	IdentifierType *CancelTradeResponseIdentifierType `json:"identifier_type,omitempty"`
	// Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP.
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// Date field to support extended trading hours.
	LocalMarketTradeDate *CancelTradeResponseLocalMarketTradeDate `json:"local_market_trade_date,omitempty"`
	// One or many lot matching instructions for the trade.
	LotMatchingInstructions []BookingLot `json:"lot_matching_instructions,omitempty"`
	// Market Identifier Code
	MicCode *string `json:"mic_code,omitempty"`
	// The resource name of the trade.
	Name *string `json:"name,omitempty"`
	// State of this trade's completeness in filling. True: trade is not done filling and can append more executions onto the trade False: trade is done filling and cannot append more executions onto the trade By default, trades are closed when they are created. An open trade can later be closed by calling the CompleteTrade endpoint. Additional executions can be appended to an open trade by calling the CreateExecution endpoint. Trades that are left open will be automatically closed nightly before Ledger's EOD.
	Open *bool `json:"open,omitempty"`
	// Street-level order id, unique by day per broker.
	OrderID *string `json:"order_id,omitempty"`
	// Route type for the trade.
	RouteType *CancelTradeResponseRouteType `json:"route_type,omitempty"`
	// Defaults to T+1 for equities if this is not provided. Calculated by the execution's execution_time field in Eastern Time.
	SettlementDate *CancelTradeResponseSettlementDate `json:"settlement_date,omitempty"`
	// Denotes if the trade is a SELL or a BUY.
	Side *CancelTradeResponseSide `json:"side,omitempty"`
	// Side modifier for the trade.
	SideModifier *CancelTradeResponseSideModifier `json:"side_modifier,omitempty"`
	// The source of the submission.
	SourceApplication *string `json:"source_application,omitempty"`
	// An enumerated list of values used to indicate certain attributes about a trade (E.g. DISCRETION_EXERCISED, BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)
	SpecialInstructions []CancelTradeResponseSpecialInstructions `json:"special_instructions,omitempty"`
	// A ULID to uniquely identify the trade globally.
	TradeID *string `json:"trade_id,omitempty"`
	// Exchange venue
	Venue *CancelTradeResponseVenue `json:"venue,omitempty"`
	// Denotes that this trade was either when_issued or when_distributed.
	WhenIssued *CancelTradeResponseWhenIssued `json:"when_issued,omitempty"`
}

func (o *CancelTradeResponseTrade) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *CancelTradeResponseTrade) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *CancelTradeResponseTrade) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *CancelTradeResponseTrade) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *CancelTradeResponseTrade) GetAssetType() *CancelTradeResponseAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *CancelTradeResponseTrade) GetBrokerCapacity() *CancelTradeResponseBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *CancelTradeResponseTrade) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *CancelTradeResponseTrade) GetExecutingBroker() *string {
	if o == nil {
		return nil
	}
	return o.ExecutingBroker
}

func (o *CancelTradeResponseTrade) GetExecutions() []Execution {
	if o == nil {
		return nil
	}
	return o.Executions
}

func (o *CancelTradeResponseTrade) GetFees() []BookingFee {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *CancelTradeResponseTrade) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *CancelTradeResponseTrade) GetIdentifierType() *CancelTradeResponseIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *CancelTradeResponseTrade) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *CancelTradeResponseTrade) GetLocalMarketTradeDate() *CancelTradeResponseLocalMarketTradeDate {
	if o == nil {
		return nil
	}
	return o.LocalMarketTradeDate
}

func (o *CancelTradeResponseTrade) GetLotMatchingInstructions() []BookingLot {
	if o == nil {
		return nil
	}
	return o.LotMatchingInstructions
}

func (o *CancelTradeResponseTrade) GetMicCode() *string {
	if o == nil {
		return nil
	}
	return o.MicCode
}

func (o *CancelTradeResponseTrade) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CancelTradeResponseTrade) GetOpen() *bool {
	if o == nil {
		return nil
	}
	return o.Open
}

func (o *CancelTradeResponseTrade) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *CancelTradeResponseTrade) GetRouteType() *CancelTradeResponseRouteType {
	if o == nil {
		return nil
	}
	return o.RouteType
}

func (o *CancelTradeResponseTrade) GetSettlementDate() *CancelTradeResponseSettlementDate {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *CancelTradeResponseTrade) GetSide() *CancelTradeResponseSide {
	if o == nil {
		return nil
	}
	return o.Side
}

func (o *CancelTradeResponseTrade) GetSideModifier() *CancelTradeResponseSideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *CancelTradeResponseTrade) GetSourceApplication() *string {
	if o == nil {
		return nil
	}
	return o.SourceApplication
}

func (o *CancelTradeResponseTrade) GetSpecialInstructions() []CancelTradeResponseSpecialInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *CancelTradeResponseTrade) GetTradeID() *string {
	if o == nil {
		return nil
	}
	return o.TradeID
}

func (o *CancelTradeResponseTrade) GetVenue() *CancelTradeResponseVenue {
	if o == nil {
		return nil
	}
	return o.Venue
}

func (o *CancelTradeResponseTrade) GetWhenIssued() *CancelTradeResponseWhenIssued {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

// CancelTradeResponse - A response for the cancel trade method.
type CancelTradeResponse struct {
	// The trade that was canceled.
	Trade *CancelTradeResponseTrade `json:"trade,omitempty"`
}

func (o *CancelTradeResponse) GetTrade() *CancelTradeResponseTrade {
	if o == nil {
		return nil
	}
	return o.Trade
}
