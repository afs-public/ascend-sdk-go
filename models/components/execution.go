// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// ExecutionAccruedInterestAmount - The amount of interest that has been accrued in the issuing currency for a single instrument. Requirement of 15 or less integral number and 2 or less fractional precision. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
type ExecutionAccruedInterestAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ExecutionAccruedInterestAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CommissionAmount - Commission amount of the execution. Requirement of 11 or less integral number and 2 or less fractional precision.
type CommissionAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CommissionAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// GrossAmount - Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Requirement of 11 or less integral number and 2 or less fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
type GrossAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *GrossAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ExecutionPrevailingMarketPrice - The price for the instrument that is prevailing in the market. Requirement of 8 or less integral number and 8 or less fractional precision. Required for FIXED_INCOME trades when the broker_capacity is PRINCIPAL.
type ExecutionPrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ExecutionPrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ExecutionPrice - Price with requirement of 8 or less integral number and 8 or less fractional precision.
type ExecutionPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ExecutionPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ExecutionPriceAdjustmentAmount - Total monetary value of the price_adjustment
type ExecutionPriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ExecutionPriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ExecutionPriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security.
type ExecutionPriceAdjustmentType string

const (
	ExecutionPriceAdjustmentTypePriceAdjustmentTypeUnspecified ExecutionPriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	ExecutionPriceAdjustmentTypeMarkup                         ExecutionPriceAdjustmentType = "MARKUP"
	ExecutionPriceAdjustmentTypeMarkdown                       ExecutionPriceAdjustmentType = "MARKDOWN"
	ExecutionPriceAdjustmentTypeGrossCredit                    ExecutionPriceAdjustmentType = "GROSS_CREDIT"
)

func (e ExecutionPriceAdjustmentType) ToPointer() *ExecutionPriceAdjustmentType {
	return &e
}

// PriceAdjustment - Price adjustment that will be applied to the net price of the security.
type PriceAdjustment struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *ExecutionPriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security.
	PriceAdjustmentType *ExecutionPriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *PriceAdjustment) GetPriceAdjustmentAmount() *ExecutionPriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *PriceAdjustment) GetPriceAdjustmentType() *ExecutionPriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// ExecutionQuantity - Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
type ExecutionQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ExecutionQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ExecutionState - The state that the trade is in.
type ExecutionState string

const (
	ExecutionStateStateUnspecified ExecutionState = "STATE_UNSPECIFIED"
	ExecutionStateCreating         ExecutionState = "CREATING"
	ExecutionStateRebooking        ExecutionState = "REBOOKING"
	ExecutionStateCanceling        ExecutionState = "CANCELING"
	ExecutionStateBooked           ExecutionState = "BOOKED"
	ExecutionStateRebooked         ExecutionState = "REBOOKED"
	ExecutionStateCanceled         ExecutionState = "CANCELED"
	ExecutionStateFailed           ExecutionState = "FAILED"
)

func (e ExecutionState) ToPointer() *ExecutionState {
	return &e
}

// Execution - An execution represents a partial-fill or a fill that is part of an order. Executions are children to a Trade, which collectively represents an entire order made by a client.
type Execution struct {
	// The amount of interest that has been accrued in the issuing currency for a single instrument. Requirement of 15 or less integral number and 2 or less fractional precision. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	AccruedInterestAmount *ExecutionAccruedInterestAmount `json:"accrued_interest_amount,omitempty"`
	// The id of the activity in the Ledger that represents this trade.
	ActivityID *string `json:"activity_id,omitempty"`
	// The yield associated with an individual fill of a fixed income trade. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	BondYield []BondYield `json:"bond_yield,omitempty"`
	// Commission amount of the execution. Requirement of 11 or less integral number and 2 or less fractional precision.
	CommissionAmount *CommissionAmount `json:"commission_amount,omitempty"`
	// A ULID that uniquely identifies the execution.
	ExecutionID *string `json:"execution_id,omitempty"`
	// Timestamp of when the execution took place. If settlement_date is not provided, this field will be converted into Eastern Time and used to calculate settlement_date.
	ExecutionTime *time.Time `json:"execution_time,omitempty"`
	// Used to generate execution_id, should be unique on the day for each source_application caller.
	ExternalID *string `json:"external_id,omitempty"`
	// Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Requirement of 11 or less integral number and 2 or less fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
	GrossAmount *GrossAmount `json:"gross_amount,omitempty"`
	// Caller provided but can be used for booking-service to note original trade details when booking into the error account or using the error asset.
	Memo *string `json:"memo,omitempty"`
	// The resource name of the execution.
	Name *string `json:"name,omitempty"`
	// The price for the instrument that is prevailing in the market. Requirement of 8 or less integral number and 8 or less fractional precision. Required for FIXED_INCOME trades when the broker_capacity is PRINCIPAL.
	PrevailingMarketPrice *ExecutionPrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Price with requirement of 8 or less integral number and 8 or less fractional precision.
	Price *ExecutionPrice `json:"price,omitempty"`
	// Price adjustment that will be applied to the net price of the security.
	PriceAdjustment *PriceAdjustment `json:"price_adjustment,omitempty"`
	// Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
	Quantity *ExecutionQuantity `json:"quantity,omitempty"`
	// The state that the trade is in.
	State *ExecutionState `json:"state,omitempty"`
	// Street-level execution id, unique by day per execution venue.
	StreetExecutionID *string `json:"street_execution_id,omitempty"`
	// The unique identifier of the trade this execution belongs to.
	TradeID *string `json:"trade_id,omitempty"`
}

func (e Execution) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Execution) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Execution) GetAccruedInterestAmount() *ExecutionAccruedInterestAmount {
	if o == nil {
		return nil
	}
	return o.AccruedInterestAmount
}

func (o *Execution) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *Execution) GetBondYield() []BondYield {
	if o == nil {
		return nil
	}
	return o.BondYield
}

func (o *Execution) GetCommissionAmount() *CommissionAmount {
	if o == nil {
		return nil
	}
	return o.CommissionAmount
}

func (o *Execution) GetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionID
}

func (o *Execution) GetExecutionTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExecutionTime
}

func (o *Execution) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *Execution) GetGrossAmount() *GrossAmount {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *Execution) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *Execution) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Execution) GetPrevailingMarketPrice() *ExecutionPrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *Execution) GetPrice() *ExecutionPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *Execution) GetPriceAdjustment() *PriceAdjustment {
	if o == nil {
		return nil
	}
	return o.PriceAdjustment
}

func (o *Execution) GetQuantity() *ExecutionQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *Execution) GetState() *ExecutionState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *Execution) GetStreetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.StreetExecutionID
}

func (o *Execution) GetTradeID() *string {
	if o == nil {
		return nil
	}
	return o.TradeID
}
