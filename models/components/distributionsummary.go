// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// DistributionSummaryRegularAmount - Summed distribution amounts throughout the year
type DistributionSummaryRegularAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *DistributionSummaryRegularAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// DistributionSummaryAmount - The required annual distribution amount in USD. This value is calculated as `prior_year_end_account_balance / life_expectancy_factor`.
type DistributionSummaryAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *DistributionSummaryAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// LifeExpectancyFactor - The life expectancy factor in years based on the account owner(s) age(s). This value is used to calculate the RMD amount. Sourced from IRS Publication 590-B.
type LifeExpectancyFactor struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *LifeExpectancyFactor) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PriorYearEndAccountBalance - The account balance at the end of the prior year in USD. This value is used to calculate the RMD amount.
type PriorYearEndAccountBalance struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *PriorYearEndAccountBalance) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RemainingDistributionRequired - The remaining amount required to be distributed for the tax year. Calculated as the difference between the RMD for the account and its regular distribution total to date. This will return zero if the account is not required to make a distribution during the tax year or has already met its distribution requirement.
type RemainingDistributionRequired struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RemainingDistributionRequired) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RequiredMinimumDistribution - The required minimum distribution (RMD). Will be unset if the account is not required to make a distribution during the tax year. Distributions are only required for some account registrations and when the account owner reaches a certain age.
type RequiredMinimumDistribution struct {
	// The required annual distribution amount in USD. This value is calculated as `prior_year_end_account_balance / life_expectancy_factor`.
	Amount *DistributionSummaryAmount `json:"amount,omitempty"`
	// The life expectancy factor in years based on the account owner(s) age(s). This value is used to calculate the RMD amount. Sourced from IRS Publication 590-B.
	LifeExpectancyFactor *LifeExpectancyFactor `json:"life_expectancy_factor,omitempty"`
	// The account balance at the end of the prior year in USD. This value is used to calculate the RMD amount.
	PriorYearEndAccountBalance *PriorYearEndAccountBalance `json:"prior_year_end_account_balance,omitempty"`
	// The remaining amount required to be distributed for the tax year. Calculated as the difference between the RMD for the account and its regular distribution total to date. This will return zero if the account is not required to make a distribution during the tax year or has already met its distribution requirement.
	RemainingDistributionRequired *RemainingDistributionRequired `json:"remaining_distribution_required,omitempty"`
}

func (o *RequiredMinimumDistribution) GetAmount() *DistributionSummaryAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *RequiredMinimumDistribution) GetLifeExpectancyFactor() *LifeExpectancyFactor {
	if o == nil {
		return nil
	}
	return o.LifeExpectancyFactor
}

func (o *RequiredMinimumDistribution) GetPriorYearEndAccountBalance() *PriorYearEndAccountBalance {
	if o == nil {
		return nil
	}
	return o.PriorYearEndAccountBalance
}

func (o *RequiredMinimumDistribution) GetRemainingDistributionRequired() *RemainingDistributionRequired {
	if o == nil {
		return nil
	}
	return o.RemainingDistributionRequired
}

// DistributionSummaryRolloverAmount - Rollover distribution amount
type DistributionSummaryRolloverAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *DistributionSummaryRolloverAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// DistributionSummary - Regular and rollover distribution amounts for one tax year
type DistributionSummary struct {
	// The resource name of the distribution summary
	Name *string `json:"name,omitempty"`
	// Summed distribution amounts throughout the year
	RegularAmount *DistributionSummaryRegularAmount `json:"regular_amount,omitempty"`
	// The required minimum distribution (RMD). Will be unset if the account is not required to make a distribution during the tax year. Distributions are only required for some account registrations and when the account owner reaches a certain age.
	RequiredMinimumDistribution *RequiredMinimumDistribution `json:"required_minimum_distribution,omitempty"`
	// Rollover distribution amount
	RolloverAmount *DistributionSummaryRolloverAmount `json:"rollover_amount,omitempty"`
	// Tax year these distribution amounts are for
	TaxYear *int `json:"tax_year,omitempty"`
}

func (o *DistributionSummary) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DistributionSummary) GetRegularAmount() *DistributionSummaryRegularAmount {
	if o == nil {
		return nil
	}
	return o.RegularAmount
}

func (o *DistributionSummary) GetRequiredMinimumDistribution() *RequiredMinimumDistribution {
	if o == nil {
		return nil
	}
	return o.RequiredMinimumDistribution
}

func (o *DistributionSummary) GetRolloverAmount() *DistributionSummaryRolloverAmount {
	if o == nil {
		return nil
	}
	return o.RolloverAmount
}

func (o *DistributionSummary) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}
