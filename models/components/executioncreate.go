// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// ExecutionCreate - An execution represents a partial-fill or a fill that is part of an order. Executions are children to a Trade, which collectively represents an entire order made by a client.
type ExecutionCreate struct {
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	AccruedInterestAmount *DecimalCreate `json:"accrued_interest_amount,omitempty"`
	// The yield associated with an individual fill of a fixed income trade. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	BondYield []BondYieldCreate `json:"bond_yield,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	CommissionAmount *DecimalCreate `json:"commission_amount,omitempty"`
	// Timestamp of when the execution took place. If settlement_date is not provided, this field will be converted into Eastern Time and used to calculate settlement_date.
	ExecutionTime *time.Time `json:"execution_time"`
	// Used to generate execution_id, should be unique on the day for each source_application caller.
	ExternalID string `json:"external_id"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	GrossAmount *DecimalCreate `json:"gross_amount,omitempty"`
	// Caller provided but can be used for booking-service to note original trade details when booking into the error account or using the error asset.
	Memo *string `json:"memo,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	PrevailingMarketPrice *DecimalCreate `json:"prevailing_market_price,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	Price DecimalCreate `json:"price"`
	// Price adjustment that will be applied to the net price of the security.
	PriceAdjustment *PriceAdjustmentCreate `json:"price_adjustment,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	Quantity DecimalCreate `json:"quantity"`
	// Street-level execution id, unique by day per execution venue.
	StreetExecutionID *string `json:"street_execution_id,omitempty"`
}

func (e ExecutionCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExecutionCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ExecutionCreate) GetAccruedInterestAmount() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.AccruedInterestAmount
}

func (o *ExecutionCreate) GetBondYield() []BondYieldCreate {
	if o == nil {
		return nil
	}
	return o.BondYield
}

func (o *ExecutionCreate) GetCommissionAmount() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.CommissionAmount
}

func (o *ExecutionCreate) GetExecutionTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExecutionTime
}

func (o *ExecutionCreate) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *ExecutionCreate) GetGrossAmount() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *ExecutionCreate) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *ExecutionCreate) GetPrevailingMarketPrice() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *ExecutionCreate) GetPrice() DecimalCreate {
	if o == nil {
		return DecimalCreate{}
	}
	return o.Price
}

func (o *ExecutionCreate) GetPriceAdjustment() *PriceAdjustmentCreate {
	if o == nil {
		return nil
	}
	return o.PriceAdjustment
}

func (o *ExecutionCreate) GetQuantity() DecimalCreate {
	if o == nil {
		return DecimalCreate{}
	}
	return o.Quantity
}

func (o *ExecutionCreate) GetStreetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.StreetExecutionID
}
