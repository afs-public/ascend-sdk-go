// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// RebookExecutionResponseAccruedInterestAmount - The amount of interest that has been accrued in the issuing currency for a single instrument. Requirement of 15 or less integral number and 2 or less fractional precision. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
type RebookExecutionResponseAccruedInterestAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookExecutionResponseAccruedInterestAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookExecutionResponseCommissionAmount - Commission amount of the execution. Requirement of 11 or less integral number and 2 or less fractional precision.
type RebookExecutionResponseCommissionAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookExecutionResponseCommissionAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookExecutionResponseGrossAmount - Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Requirement of 11 or less integral number and 2 or less fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
type RebookExecutionResponseGrossAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookExecutionResponseGrossAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookExecutionResponsePrevailingMarketPrice - The price for the instrument that is prevailing in the market. Requirement of 8 or less integral number and 8 or less fractional precision. Required for FIXED_INCOME trades when the broker_capacity is PRINCIPAL.
type RebookExecutionResponsePrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookExecutionResponsePrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookExecutionResponsePrice - Price with requirement of 8 or less integral number and 8 or less fractional precision.
type RebookExecutionResponsePrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookExecutionResponsePrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookExecutionResponsePriceAdjustmentAmount - Total monetary value of the price_adjustment
type RebookExecutionResponsePriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookExecutionResponsePriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookExecutionResponsePriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security.
type RebookExecutionResponsePriceAdjustmentType string

const (
	RebookExecutionResponsePriceAdjustmentTypePriceAdjustmentTypeUnspecified RebookExecutionResponsePriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	RebookExecutionResponsePriceAdjustmentTypeMarkup                         RebookExecutionResponsePriceAdjustmentType = "MARKUP"
	RebookExecutionResponsePriceAdjustmentTypeMarkdown                       RebookExecutionResponsePriceAdjustmentType = "MARKDOWN"
	RebookExecutionResponsePriceAdjustmentTypeGrossCredit                    RebookExecutionResponsePriceAdjustmentType = "GROSS_CREDIT"
)

func (e RebookExecutionResponsePriceAdjustmentType) ToPointer() *RebookExecutionResponsePriceAdjustmentType {
	return &e
}

// RebookExecutionResponsePriceAdjustment - Price adjustment that will be applied to the net price of the security.
type RebookExecutionResponsePriceAdjustment struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *RebookExecutionResponsePriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security.
	PriceAdjustmentType *RebookExecutionResponsePriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *RebookExecutionResponsePriceAdjustment) GetPriceAdjustmentAmount() *RebookExecutionResponsePriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *RebookExecutionResponsePriceAdjustment) GetPriceAdjustmentType() *RebookExecutionResponsePriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// RebookExecutionResponseQuantity - Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
type RebookExecutionResponseQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookExecutionResponseQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookExecutionResponseState - The state that the trade is in.
type RebookExecutionResponseState string

const (
	RebookExecutionResponseStateStateUnspecified RebookExecutionResponseState = "STATE_UNSPECIFIED"
	RebookExecutionResponseStateCreating         RebookExecutionResponseState = "CREATING"
	RebookExecutionResponseStateRebooking        RebookExecutionResponseState = "REBOOKING"
	RebookExecutionResponseStateCanceling        RebookExecutionResponseState = "CANCELING"
	RebookExecutionResponseStateBooked           RebookExecutionResponseState = "BOOKED"
	RebookExecutionResponseStateRebooked         RebookExecutionResponseState = "REBOOKED"
	RebookExecutionResponseStateCanceled         RebookExecutionResponseState = "CANCELED"
	RebookExecutionResponseStateFailed           RebookExecutionResponseState = "FAILED"
)

func (e RebookExecutionResponseState) ToPointer() *RebookExecutionResponseState {
	return &e
}

// RebookExecutionResponseExecution - The new execution that was rebooked.
type RebookExecutionResponseExecution struct {
	// The amount of interest that has been accrued in the issuing currency for a single instrument. Requirement of 15 or less integral number and 2 or less fractional precision. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	AccruedInterestAmount *RebookExecutionResponseAccruedInterestAmount `json:"accrued_interest_amount,omitempty"`
	// The id of the activity in the Ledger that represents this trade.
	ActivityID *string `json:"activity_id,omitempty"`
	// The yield associated with an individual fill of a fixed income trade. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	BondYield []BondYield `json:"bond_yield,omitempty"`
	// Commission amount of the execution. Requirement of 11 or less integral number and 2 or less fractional precision.
	CommissionAmount *RebookExecutionResponseCommissionAmount `json:"commission_amount,omitempty"`
	// A ULID that uniquely identifies the execution.
	ExecutionID *string `json:"execution_id,omitempty"`
	// Timestamp of when the execution took place. If settlement_date is not provided, this field will be converted into Eastern Time and used to calculate settlement_date.
	ExecutionTime *time.Time `json:"execution_time,omitempty"`
	// Used to generate execution_id, should be unique on the day for each source_application caller.
	ExternalID *string `json:"external_id,omitempty"`
	// Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Requirement of 11 or less integral number and 2 or less fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
	GrossAmount *RebookExecutionResponseGrossAmount `json:"gross_amount,omitempty"`
	// Caller provided but can be used for booking-service to note original trade details when booking into the error account or using the error asset.
	Memo *string `json:"memo,omitempty"`
	// The resource name of the execution.
	Name *string `json:"name,omitempty"`
	// The price for the instrument that is prevailing in the market. Requirement of 8 or less integral number and 8 or less fractional precision. Required for FIXED_INCOME trades when the broker_capacity is PRINCIPAL.
	PrevailingMarketPrice *RebookExecutionResponsePrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Price with requirement of 8 or less integral number and 8 or less fractional precision.
	Price *RebookExecutionResponsePrice `json:"price,omitempty"`
	// Price adjustment that will be applied to the net price of the security.
	PriceAdjustment *RebookExecutionResponsePriceAdjustment `json:"price_adjustment,omitempty"`
	// Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
	Quantity *RebookExecutionResponseQuantity `json:"quantity,omitempty"`
	// The state that the trade is in.
	State *RebookExecutionResponseState `json:"state,omitempty"`
	// Street-level execution id, unique by day per execution venue.
	StreetExecutionID *string `json:"street_execution_id,omitempty"`
	// The unique identifier of the trade this execution belongs to.
	TradeID *string `json:"trade_id,omitempty"`
}

func (r RebookExecutionResponseExecution) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RebookExecutionResponseExecution) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RebookExecutionResponseExecution) GetAccruedInterestAmount() *RebookExecutionResponseAccruedInterestAmount {
	if o == nil {
		return nil
	}
	return o.AccruedInterestAmount
}

func (o *RebookExecutionResponseExecution) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *RebookExecutionResponseExecution) GetBondYield() []BondYield {
	if o == nil {
		return nil
	}
	return o.BondYield
}

func (o *RebookExecutionResponseExecution) GetCommissionAmount() *RebookExecutionResponseCommissionAmount {
	if o == nil {
		return nil
	}
	return o.CommissionAmount
}

func (o *RebookExecutionResponseExecution) GetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionID
}

func (o *RebookExecutionResponseExecution) GetExecutionTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExecutionTime
}

func (o *RebookExecutionResponseExecution) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *RebookExecutionResponseExecution) GetGrossAmount() *RebookExecutionResponseGrossAmount {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *RebookExecutionResponseExecution) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *RebookExecutionResponseExecution) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *RebookExecutionResponseExecution) GetPrevailingMarketPrice() *RebookExecutionResponsePrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *RebookExecutionResponseExecution) GetPrice() *RebookExecutionResponsePrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *RebookExecutionResponseExecution) GetPriceAdjustment() *RebookExecutionResponsePriceAdjustment {
	if o == nil {
		return nil
	}
	return o.PriceAdjustment
}

func (o *RebookExecutionResponseExecution) GetQuantity() *RebookExecutionResponseQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *RebookExecutionResponseExecution) GetState() *RebookExecutionResponseState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *RebookExecutionResponseExecution) GetStreetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.StreetExecutionID
}

func (o *RebookExecutionResponseExecution) GetTradeID() *string {
	if o == nil {
		return nil
	}
	return o.TradeID
}

// RebookExecutionResponse - A response to the Rebook Execution method.
type RebookExecutionResponse struct {
	// The new execution that was rebooked.
	Execution *RebookExecutionResponseExecution `json:"execution,omitempty"`
}

func (o *RebookExecutionResponse) GetExecution() *RebookExecutionResponseExecution {
	if o == nil {
		return nil
	}
	return o.Execution
}
