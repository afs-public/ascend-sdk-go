// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// AgreementSource - An internal indicator from where the agreement was generated; Typically `ACCOUNTS_SERVICE` if accessing our public APIs
type AgreementSource string

const (
	AgreementSourceAgreementSourceUnspecified AgreementSource = "AGREEMENT_SOURCE_UNSPECIFIED"
	AgreementSourceAtlasForm                  AgreementSource = "ATLAS_FORM"
	AgreementSourceOtherSource                AgreementSource = "OTHER_SOURCE"
	AgreementSourceAccountsService            AgreementSource = "ACCOUNTS_SERVICE"
)

func (e AgreementSource) ToPointer() *AgreementSource {
	return &e
}

// AgreementState - The status of an agreement which blocks an enrollment; `REQUIRED` if not yet received, or `AFFIRMED` if acknowledgement has been received by AFS
type AgreementState string

const (
	AgreementStateAgreementStateUnspecified AgreementState = "AGREEMENT_STATE_UNSPECIFIED"
	AgreementStateRequired                  AgreementState = "REQUIRED"
	AgreementStateAffirmed                  AgreementState = "AFFIRMED"
	AgreementStateVoided                    AgreementState = "VOIDED"
)

func (e AgreementState) ToPointer() *AgreementState {
	return &e
}

// Agreement - A legal Agreement for an Account.
type Agreement struct {
	// The time recorded relating to when a given agreement is `AFFIRMED` by the Customer; This is set to the time when the affirmation is processed by AFS
	AffirmationTime *time.Time `json:"affirmation_time,omitempty"`
	// An Apex-generated identifier used to reference a single legal agreement associated with the account
	AgreementID *string `json:"agreement_id,omitempty"`
	// The friendly name of the agreement; Typically mirrors the enrollment it is attached to (e.g., `LENDING_FULLY_PAID_STOCK_LOAN`)
	AgreementName *string `json:"agreement_name,omitempty"`
	// An internal indicator from where the agreement was generated; Typically `ACCOUNTS_SERVICE` if accessing our public APIs
	AgreementSource *AgreementSource `json:"agreement_source,omitempty"`
	// The status of an agreement which blocks an enrollment; `REQUIRED` if not yet received, or `AFFIRMED` if acknowledgement has been received by AFS
	AgreementState *AgreementState `json:"agreement_state,omitempty"`
	// A URI referencing a static PDF containing the legalese of a given agreement; All agreements of the same nature link to the same publicly-available PDF.
	AgreementURI *string `json:"agreement_uri,omitempty"`
	// An internal version number based on typographical revisions of the related agreement; Version numbers are automatically updated when new agreements are available and should be of no technical concern to the integrator
	AgreementVersion *string `json:"agreement_version,omitempty"`
	// A system-generated unique identifier referencing a single instance of an enrollment; Used to access the record after creation
	EnrollmentID *string `json:"enrollment_id,omitempty"`
	// References a single entity
	LegalEntityID *string `json:"legal_entity_id,omitempty"`
	// References a single natural person
	LegalNaturalPersonID *string `json:"legal_natural_person_id,omitempty"`
	// The name field Format: accounts/{account}/agreements/{agreement}
	Name *string `json:"name,omitempty"`
}

func (a Agreement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Agreement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Agreement) GetAffirmationTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.AffirmationTime
}

func (o *Agreement) GetAgreementID() *string {
	if o == nil {
		return nil
	}
	return o.AgreementID
}

func (o *Agreement) GetAgreementName() *string {
	if o == nil {
		return nil
	}
	return o.AgreementName
}

func (o *Agreement) GetAgreementSource() *AgreementSource {
	if o == nil {
		return nil
	}
	return o.AgreementSource
}

func (o *Agreement) GetAgreementState() *AgreementState {
	if o == nil {
		return nil
	}
	return o.AgreementState
}

func (o *Agreement) GetAgreementURI() *string {
	if o == nil {
		return nil
	}
	return o.AgreementURI
}

func (o *Agreement) GetAgreementVersion() *string {
	if o == nil {
		return nil
	}
	return o.AgreementVersion
}

func (o *Agreement) GetEnrollmentID() *string {
	if o == nil {
		return nil
	}
	return o.EnrollmentID
}

func (o *Agreement) GetLegalEntityID() *string {
	if o == nil {
		return nil
	}
	return o.LegalEntityID
}

func (o *Agreement) GetLegalNaturalPersonID() *string {
	if o == nil {
		return nil
	}
	return o.LegalNaturalPersonID
}

func (o *Agreement) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}
