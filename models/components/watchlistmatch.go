// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// MatchState - Match state - whether or not the match is confirmed
type MatchState string

const (
	MatchStateMatchUnspecified MatchState = "MATCH_UNSPECIFIED"
	MatchStateConfirmedMatch   MatchState = "CONFIRMED_MATCH"
	MatchStatePotentialMatch   MatchState = "POTENTIAL_MATCH"
	MatchStateNoMatch          MatchState = "NO_MATCH"
	MatchStateInconclusive     MatchState = "INCONCLUSIVE"
)

func (e MatchState) ToPointer() *MatchState {
	return &e
}
func (e *MatchState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MATCH_UNSPECIFIED":
		fallthrough
	case "CONFIRMED_MATCH":
		fallthrough
	case "POTENTIAL_MATCH":
		fallthrough
	case "NO_MATCH":
		fallthrough
	case "INCONCLUSIVE":
		*e = MatchState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MatchState: %v", v)
	}
}

// WatchlistMatch - Matched profile details
type WatchlistMatch struct {
	// Identifies if the entry is active or not
	Active *bool `json:"active,omitempty"`
	// Identifies that a confirmed watchlist match can be excluded when calculating the related screen state
	ExcludeFromScreening *bool `json:"exclude_from_screening,omitempty"`
	// Match state - whether or not the match is confirmed
	MatchState *MatchState `json:"match_state,omitempty"`
	// Indicates the watchlist source for a given match
	WatchlistID *string `json:"watchlist_id,omitempty"`
	// Identification number for the watchlist item that was matched
	WatchlistItemID *int `json:"watchlist_item_id,omitempty"`
}

func (o *WatchlistMatch) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *WatchlistMatch) GetExcludeFromScreening() *bool {
	if o == nil {
		return nil
	}
	return o.ExcludeFromScreening
}

func (o *WatchlistMatch) GetMatchState() *MatchState {
	if o == nil {
		return nil
	}
	return o.MatchState
}

func (o *WatchlistMatch) GetWatchlistID() *string {
	if o == nil {
		return nil
	}
	return o.WatchlistID
}

func (o *WatchlistMatch) GetWatchlistItemID() *int {
	if o == nil {
		return nil
	}
	return o.WatchlistItemID
}
