// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// RebookTradeAllocationResponseAccruedInterestAmount - The amount of interest that has been accrued in the issuing currency for a single instrument.
type RebookTradeAllocationResponseAccruedInterestAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponseAccruedInterestAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponseAssetType - Type of the asset being traded. Required for SYMBOL and CUSIP.
type RebookTradeAllocationResponseAssetType string

const (
	RebookTradeAllocationResponseAssetTypeAssetTypeUnspecified RebookTradeAllocationResponseAssetType = "ASSET_TYPE_UNSPECIFIED"
	RebookTradeAllocationResponseAssetTypeEquity               RebookTradeAllocationResponseAssetType = "EQUITY"
	RebookTradeAllocationResponseAssetTypeFixedIncome          RebookTradeAllocationResponseAssetType = "FIXED_INCOME"
)

func (e RebookTradeAllocationResponseAssetType) ToPointer() *RebookTradeAllocationResponseAssetType {
	return &e
}

// RebookTradeAllocationResponseBrokerCapacity - Broker capacity for the trade.
type RebookTradeAllocationResponseBrokerCapacity string

const (
	RebookTradeAllocationResponseBrokerCapacityCapacityUnspecified RebookTradeAllocationResponseBrokerCapacity = "CAPACITY_UNSPECIFIED"
	RebookTradeAllocationResponseBrokerCapacityAgency              RebookTradeAllocationResponseBrokerCapacity = "AGENCY"
	RebookTradeAllocationResponseBrokerCapacityPrincipal           RebookTradeAllocationResponseBrokerCapacity = "PRINCIPAL"
	RebookTradeAllocationResponseBrokerCapacityMixed               RebookTradeAllocationResponseBrokerCapacity = "MIXED"
)

func (e RebookTradeAllocationResponseBrokerCapacity) ToPointer() *RebookTradeAllocationResponseBrokerCapacity {
	return &e
}

// RebookTradeAllocationResponseCommissionAmount - Commission amount of the trade allocation that will only be applied to the to_account_id.
type RebookTradeAllocationResponseCommissionAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponseCommissionAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponseGrossAmount - Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
type RebookTradeAllocationResponseGrossAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponseGrossAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponseIdentifierType - Identifier type for the asset being traded.
type RebookTradeAllocationResponseIdentifierType string

const (
	RebookTradeAllocationResponseIdentifierTypeIdentifierTypeUnspecified RebookTradeAllocationResponseIdentifierType = "IDENTIFIER_TYPE_UNSPECIFIED"
	RebookTradeAllocationResponseIdentifierTypeAssetID                   RebookTradeAllocationResponseIdentifierType = "ASSET_ID"
	RebookTradeAllocationResponseIdentifierTypeSymbol                    RebookTradeAllocationResponseIdentifierType = "SYMBOL"
	RebookTradeAllocationResponseIdentifierTypeCusip                     RebookTradeAllocationResponseIdentifierType = "CUSIP"
	RebookTradeAllocationResponseIdentifierTypeIsin                      RebookTradeAllocationResponseIdentifierType = "ISIN"
)

func (e RebookTradeAllocationResponseIdentifierType) ToPointer() *RebookTradeAllocationResponseIdentifierType {
	return &e
}

// RebookTradeAllocationResponsePrevailingMarketPrice - The price for the instrument that is prevailing in the market. Required for FIXED_INCOME trade allocations when the broker_capacity is PRINCIPAL.
type RebookTradeAllocationResponsePrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponsePrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponsePrice - Price with requirement of 8 or less integral number and 8 or less fractional precision.
type RebookTradeAllocationResponsePrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponsePrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponsePriceAdjustmentAmount - Total monetary value of the price_adjustment
type RebookTradeAllocationResponsePriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponsePriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponsePriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security.
type RebookTradeAllocationResponsePriceAdjustmentType string

const (
	RebookTradeAllocationResponsePriceAdjustmentTypePriceAdjustmentTypeUnspecified RebookTradeAllocationResponsePriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	RebookTradeAllocationResponsePriceAdjustmentTypeMarkup                         RebookTradeAllocationResponsePriceAdjustmentType = "MARKUP"
	RebookTradeAllocationResponsePriceAdjustmentTypeMarkdown                       RebookTradeAllocationResponsePriceAdjustmentType = "MARKDOWN"
	RebookTradeAllocationResponsePriceAdjustmentTypeGrossCredit                    RebookTradeAllocationResponsePriceAdjustmentType = "GROSS_CREDIT"
)

func (e RebookTradeAllocationResponsePriceAdjustmentType) ToPointer() *RebookTradeAllocationResponsePriceAdjustmentType {
	return &e
}

// RebookTradeAllocationResponsePriceAdjustment - Price adjustment that will be applied to the net price of the security.
type RebookTradeAllocationResponsePriceAdjustment struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *RebookTradeAllocationResponsePriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security.
	PriceAdjustmentType *RebookTradeAllocationResponsePriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *RebookTradeAllocationResponsePriceAdjustment) GetPriceAdjustmentAmount() *RebookTradeAllocationResponsePriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *RebookTradeAllocationResponsePriceAdjustment) GetPriceAdjustmentType() *RebookTradeAllocationResponsePriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// RebookTradeAllocationResponseQuantity - Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
type RebookTradeAllocationResponseQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponseQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponseSettlementDate - Defaults to T+1 for equities if this is not provided. Calculated using the execution_time field in Eastern Time.
type RebookTradeAllocationResponseSettlementDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *RebookTradeAllocationResponseSettlementDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *RebookTradeAllocationResponseSettlementDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *RebookTradeAllocationResponseSettlementDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// RebookTradeAllocationResponseSideModifier - Side modifier for the trade allocation.
type RebookTradeAllocationResponseSideModifier string

const (
	RebookTradeAllocationResponseSideModifierSideModifierUnspecified RebookTradeAllocationResponseSideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	RebookTradeAllocationResponseSideModifierShort                   RebookTradeAllocationResponseSideModifier = "SHORT"
	RebookTradeAllocationResponseSideModifierShortExempt             RebookTradeAllocationResponseSideModifier = "SHORT_EXEMPT"
	RebookTradeAllocationResponseSideModifierShortCover              RebookTradeAllocationResponseSideModifier = "SHORT_COVER"
	RebookTradeAllocationResponseSideModifierOpen                    RebookTradeAllocationResponseSideModifier = "OPEN"
	RebookTradeAllocationResponseSideModifierClose                   RebookTradeAllocationResponseSideModifier = "CLOSE"
)

func (e RebookTradeAllocationResponseSideModifier) ToPointer() *RebookTradeAllocationResponseSideModifier {
	return &e
}

type RebookTradeAllocationResponseSpecialInstructions string

const (
	RebookTradeAllocationResponseSpecialInstructionsSpecialInstructionsUnspecified RebookTradeAllocationResponseSpecialInstructions = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
	RebookTradeAllocationResponseSpecialInstructionsRule144                        RebookTradeAllocationResponseSpecialInstructions = "RULE_144"
	RebookTradeAllocationResponseSpecialInstructionsWithDividend                   RebookTradeAllocationResponseSpecialInstructions = "WITH_DIVIDEND"
	RebookTradeAllocationResponseSpecialInstructionsWithRights                     RebookTradeAllocationResponseSpecialInstructions = "WITH_RIGHTS"
	RebookTradeAllocationResponseSpecialInstructionsCloseContract                  RebookTradeAllocationResponseSpecialInstructions = "CLOSE_CONTRACT"
	RebookTradeAllocationResponseSpecialInstructionsCoverShort                     RebookTradeAllocationResponseSpecialInstructions = "COVER_SHORT"
	RebookTradeAllocationResponseSpecialInstructionsCrossTrade                     RebookTradeAllocationResponseSpecialInstructions = "CROSS_TRADE"
	RebookTradeAllocationResponseSpecialInstructionsOpenContractCovered            RebookTradeAllocationResponseSpecialInstructions = "OPEN_CONTRACT_COVERED"
	RebookTradeAllocationResponseSpecialInstructionsDiscretionExercised            RebookTradeAllocationResponseSpecialInstructions = "DISCRETION_EXERCISED"
	RebookTradeAllocationResponseSpecialInstructionsDiscretionNotExercised         RebookTradeAllocationResponseSpecialInstructions = "DISCRETION_NOT_EXERCISED"
	RebookTradeAllocationResponseSpecialInstructionsOptionAssignment               RebookTradeAllocationResponseSpecialInstructions = "OPTION_ASSIGNMENT"
	RebookTradeAllocationResponseSpecialInstructionsEmployeeStockOption            RebookTradeAllocationResponseSpecialInstructions = "EMPLOYEE_STOCK_OPTION"
	RebookTradeAllocationResponseSpecialInstructionsInvestmentBanking              RebookTradeAllocationResponseSpecialInstructions = "INVESTMENT_BANKING"
	RebookTradeAllocationResponseSpecialInstructionsBrokerDealerOrder              RebookTradeAllocationResponseSpecialInstructions = "BROKER_DEALER_ORDER"
	RebookTradeAllocationResponseSpecialInstructionsMakeMarketInSecurity           RebookTradeAllocationResponseSpecialInstructions = "MAKE_MARKET_IN_SECURITY"
	RebookTradeAllocationResponseSpecialInstructionsMakeMarketSolicited            RebookTradeAllocationResponseSpecialInstructions = "MAKE_MARKET_SOLICITED"
	RebookTradeAllocationResponseSpecialInstructionsMakeMarketUnsolicited          RebookTradeAllocationResponseSpecialInstructions = "MAKE_MARKET_UNSOLICITED"
	RebookTradeAllocationResponseSpecialInstructionsCustomerDirected               RebookTradeAllocationResponseSpecialInstructions = "CUSTOMER_DIRECTED"
	RebookTradeAllocationResponseSpecialInstructionsFullyRegistered                RebookTradeAllocationResponseSpecialInstructions = "FULLY_REGISTERED"
	RebookTradeAllocationResponseSpecialInstructionsOpenContract                   RebookTradeAllocationResponseSpecialInstructions = "OPEN_CONTRACT"
	RebookTradeAllocationResponseSpecialInstructionsOddlotDiffOnRequest            RebookTradeAllocationResponseSpecialInstructions = "ODDLOT_DIFF_ON_REQUEST"
	RebookTradeAllocationResponseSpecialInstructionsProspectusEnclosed             RebookTradeAllocationResponseSpecialInstructions = "PROSPECTUS_ENCLOSED"
	RebookTradeAllocationResponseSpecialInstructionsProspectusSeparateMail         RebookTradeAllocationResponseSpecialInstructions = "PROSPECTUS_SEPARATE_MAIL"
	RebookTradeAllocationResponseSpecialInstructionsSolicited                      RebookTradeAllocationResponseSpecialInstructions = "SOLICITED"
	RebookTradeAllocationResponseSpecialInstructionsUnsolicited                    RebookTradeAllocationResponseSpecialInstructions = "UNSOLICITED"
	RebookTradeAllocationResponseSpecialInstructionsXDividend                      RebookTradeAllocationResponseSpecialInstructions = "X_DIVIDEND"
	RebookTradeAllocationResponseSpecialInstructionsActingAsPrincipal              RebookTradeAllocationResponseSpecialInstructions = "ACTING_AS_PRINCIPAL"
	RebookTradeAllocationResponseSpecialInstructionsAveragePrice                   RebookTradeAllocationResponseSpecialInstructions = "AVERAGE_PRICE"
	RebookTradeAllocationResponseSpecialInstructionsBrokerLiquidation              RebookTradeAllocationResponseSpecialInstructions = "BROKER_LIQUIDATION"
	RebookTradeAllocationResponseSpecialInstructionsCouponBooks                    RebookTradeAllocationResponseSpecialInstructions = "COUPON_BOOKS"
	RebookTradeAllocationResponseSpecialInstructionsHasPostageFee                  RebookTradeAllocationResponseSpecialInstructions = "HAS_POSTAGE_FEE"
	RebookTradeAllocationResponseSpecialInstructionsInternetOrder                  RebookTradeAllocationResponseSpecialInstructions = "INTERNET_ORDER"
	RebookTradeAllocationResponseSpecialInstructionsMarginSellout                  RebookTradeAllocationResponseSpecialInstructions = "MARGIN_SELLOUT"
	RebookTradeAllocationResponseSpecialInstructionsMarketMakersAsPrincipal        RebookTradeAllocationResponseSpecialInstructions = "MARKET_MAKERS_AS_PRINCIPAL"
	RebookTradeAllocationResponseSpecialInstructionsNegativeNetProceed             RebookTradeAllocationResponseSpecialInstructions = "NEGATIVE_NET_PROCEED"
	RebookTradeAllocationResponseSpecialInstructionsPreFigIndicator                RebookTradeAllocationResponseSpecialInstructions = "PRE_FIG_INDICATOR"
	RebookTradeAllocationResponseSpecialInstructionsRisklessPrincipalInstruction   RebookTradeAllocationResponseSpecialInstructions = "RISKLESS_PRINCIPAL_INSTRUCTION"
	RebookTradeAllocationResponseSpecialInstructionsShortInstruction               RebookTradeAllocationResponseSpecialInstructions = "SHORT_INSTRUCTION"
	RebookTradeAllocationResponseSpecialInstructionsThirdMarket                    RebookTradeAllocationResponseSpecialInstructions = "THIRD_MARKET"
	RebookTradeAllocationResponseSpecialInstructionsSuppressMsrbTransmission       RebookTradeAllocationResponseSpecialInstructions = "SUPPRESS_MSRB_TRANSMISSION"
	RebookTradeAllocationResponseSpecialInstructionsSuppressTraceReporting         RebookTradeAllocationResponseSpecialInstructions = "SUPPRESS_TRACE_REPORTING"
	RebookTradeAllocationResponseSpecialInstructionsSuppressEmailNotification      RebookTradeAllocationResponseSpecialInstructions = "SUPPRESS_EMAIL_NOTIFICATION"
	RebookTradeAllocationResponseSpecialInstructionsStockReward                    RebookTradeAllocationResponseSpecialInstructions = "STOCK_REWARD"
	RebookTradeAllocationResponseSpecialInstructionsSuppressRegFees                RebookTradeAllocationResponseSpecialInstructions = "SUPPRESS_REG_FEES"
	RebookTradeAllocationResponseSpecialInstructionsSuppressSecFee                 RebookTradeAllocationResponseSpecialInstructions = "SUPPRESS_SEC_FEE"
	RebookTradeAllocationResponseSpecialInstructionsSuppressTafFee                 RebookTradeAllocationResponseSpecialInstructions = "SUPPRESS_TAF_FEE"
	RebookTradeAllocationResponseSpecialInstructionsDividendReinvestment           RebookTradeAllocationResponseSpecialInstructions = "DIVIDEND_REINVESTMENT"
)

func (e RebookTradeAllocationResponseSpecialInstructions) ToPointer() *RebookTradeAllocationResponseSpecialInstructions {
	return &e
}

// RebookTradeAllocationResponseState - The state that the trade allocation is in.
type RebookTradeAllocationResponseState string

const (
	RebookTradeAllocationResponseStateStateUnspecified RebookTradeAllocationResponseState = "STATE_UNSPECIFIED"
	RebookTradeAllocationResponseStateCreating         RebookTradeAllocationResponseState = "CREATING"
	RebookTradeAllocationResponseStateRebooking        RebookTradeAllocationResponseState = "REBOOKING"
	RebookTradeAllocationResponseStateCanceling        RebookTradeAllocationResponseState = "CANCELING"
	RebookTradeAllocationResponseStateBooked           RebookTradeAllocationResponseState = "BOOKED"
	RebookTradeAllocationResponseStateRebooked         RebookTradeAllocationResponseState = "REBOOKED"
	RebookTradeAllocationResponseStateCanceled         RebookTradeAllocationResponseState = "CANCELED"
	RebookTradeAllocationResponseStateFailed           RebookTradeAllocationResponseState = "FAILED"
)

func (e RebookTradeAllocationResponseState) ToPointer() *RebookTradeAllocationResponseState {
	return &e
}

// RebookTradeAllocationResponseToSide - Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
type RebookTradeAllocationResponseToSide string

const (
	RebookTradeAllocationResponseToSideSideUnspecified RebookTradeAllocationResponseToSide = "SIDE_UNSPECIFIED"
	RebookTradeAllocationResponseToSideBuy             RebookTradeAllocationResponseToSide = "BUY"
	RebookTradeAllocationResponseToSideSell            RebookTradeAllocationResponseToSide = "SELL"
)

func (e RebookTradeAllocationResponseToSide) ToPointer() *RebookTradeAllocationResponseToSide {
	return &e
}

// RebookTradeAllocationResponseWhenIssued - Denotes that this trade allocation was either when_issued or when_distributed.
type RebookTradeAllocationResponseWhenIssued string

const (
	RebookTradeAllocationResponseWhenIssuedWhenIssuedTypeUnspecified RebookTradeAllocationResponseWhenIssued = "WHEN_ISSUED_TYPE_UNSPECIFIED"
	RebookTradeAllocationResponseWhenIssuedWhenIssued                RebookTradeAllocationResponseWhenIssued = "WHEN_ISSUED"
	RebookTradeAllocationResponseWhenIssuedWhenDistributed           RebookTradeAllocationResponseWhenIssued = "WHEN_DISTRIBUTED"
)

func (e RebookTradeAllocationResponseWhenIssued) ToPointer() *RebookTradeAllocationResponseWhenIssued {
	return &e
}

// NewTradeAllocation - The new trade allocation that is booked.
type NewTradeAllocation struct {
	// The amount of interest that has been accrued in the issuing currency for a single instrument.
	AccruedInterestAmount *RebookTradeAllocationResponseAccruedInterestAmount `json:"accrued_interest_amount,omitempty"`
	// Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Type of the asset being traded. Required for SYMBOL and CUSIP.
	AssetType *RebookTradeAllocationResponseAssetType `json:"asset_type,omitempty"`
	// The yield associated with an individual fill of a fixed income trade. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	BondYield []BondYield `json:"bond_yield,omitempty"`
	// Broker capacity for the trade.
	BrokerCapacity *RebookTradeAllocationResponseBrokerCapacity `json:"broker_capacity,omitempty"`
	// The unique identifier that is associated with an order. This is useful for associating the trade allocation with the original trade. This will be assigned a unique UUID if not provided.
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Commission amount of the trade allocation that will only be applied to the to_account_id.
	CommissionAmount *RebookTradeAllocationResponseCommissionAmount `json:"commission_amount,omitempty"`
	// Timestamp of when the trade allocation took place. If settlement_date is not provided, this field will be converted into Eastern Time and used to calculate settlement_date.
	ExecutionTime *time.Time `json:"execution_time,omitempty"`
	// Client calculated fees that will only be applied to the to_account_id. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed.
	Fees []BookingFee `json:"fees,omitempty"`
	// The ULID formatted account_id that the positions will be moved from.
	FromAccountID *string `json:"from_account_id,omitempty"`
	// The current activity_id of the trade allocation that positions will be moved from in the Ledger.
	FromActivityID *string `json:"from_activity_id,omitempty"`
	// Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
	GrossAmount *RebookTradeAllocationResponseGrossAmount `json:"gross_amount,omitempty"`
	// Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Identifier type for the asset being traded.
	IdentifierType *RebookTradeAllocationResponseIdentifierType `json:"identifier_type,omitempty"`
	// Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP.
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// One or many lot matching instructions for the trade allocation.
	LotMatchingInstructions []BookingLot `json:"lot_matching_instructions,omitempty"`
	// Caller provided but can be used for booking-service to note original trade details when booking into the error account or using the error asset.
	Memo *string `json:"memo,omitempty"`
	// The resource name of the trade allocation.
	Name *string `json:"name,omitempty"`
	// The price for the instrument that is prevailing in the market. Required for FIXED_INCOME trade allocations when the broker_capacity is PRINCIPAL.
	PrevailingMarketPrice *RebookTradeAllocationResponsePrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Price with requirement of 8 or less integral number and 8 or less fractional precision.
	Price *RebookTradeAllocationResponsePrice `json:"price,omitempty"`
	// Price adjustment that will be applied to the net price of the security.
	PriceAdjustment *RebookTradeAllocationResponsePriceAdjustment `json:"price_adjustment,omitempty"`
	// Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
	Quantity *RebookTradeAllocationResponseQuantity `json:"quantity,omitempty"`
	// Defaults to T+1 for equities if this is not provided. Calculated using the execution_time field in Eastern Time.
	SettlementDate *RebookTradeAllocationResponseSettlementDate `json:"settlement_date,omitempty"`
	// Side modifier for the trade allocation.
	SideModifier *RebookTradeAllocationResponseSideModifier `json:"side_modifier,omitempty"`
	// The source of the submission.
	SourceApplication *string `json:"source_application,omitempty"`
	// An enumerated list of values used to indicate certain attributes about a trade allocation (E.g. BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)
	SpecialInstructions []RebookTradeAllocationResponseSpecialInstructions `json:"special_instructions,omitempty"`
	// The state that the trade allocation is in.
	State *RebookTradeAllocationResponseState `json:"state,omitempty"`
	// The ULID formatted account_id that the positions will be moved to.
	ToAccountID *string `json:"to_account_id,omitempty"`
	// The current activity_id of the trade allocation that positions will be moved to in the Ledger.
	ToActivityID *string `json:"to_activity_id,omitempty"`
	// Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
	ToSide *RebookTradeAllocationResponseToSide `json:"to_side,omitempty"`
	// A ULID to uniquely identify the trade allocation globally.
	TradeAllocationID *string `json:"trade_allocation_id,omitempty"`
	// Denotes that this trade allocation was either when_issued or when_distributed.
	WhenIssued *RebookTradeAllocationResponseWhenIssued `json:"when_issued,omitempty"`
}

func (n NewTradeAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NewTradeAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NewTradeAllocation) GetAccruedInterestAmount() *RebookTradeAllocationResponseAccruedInterestAmount {
	if o == nil {
		return nil
	}
	return o.AccruedInterestAmount
}

func (o *NewTradeAllocation) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *NewTradeAllocation) GetAssetType() *RebookTradeAllocationResponseAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *NewTradeAllocation) GetBondYield() []BondYield {
	if o == nil {
		return nil
	}
	return o.BondYield
}

func (o *NewTradeAllocation) GetBrokerCapacity() *RebookTradeAllocationResponseBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *NewTradeAllocation) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *NewTradeAllocation) GetCommissionAmount() *RebookTradeAllocationResponseCommissionAmount {
	if o == nil {
		return nil
	}
	return o.CommissionAmount
}

func (o *NewTradeAllocation) GetExecutionTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExecutionTime
}

func (o *NewTradeAllocation) GetFees() []BookingFee {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *NewTradeAllocation) GetFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.FromAccountID
}

func (o *NewTradeAllocation) GetFromActivityID() *string {
	if o == nil {
		return nil
	}
	return o.FromActivityID
}

func (o *NewTradeAllocation) GetGrossAmount() *RebookTradeAllocationResponseGrossAmount {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *NewTradeAllocation) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *NewTradeAllocation) GetIdentifierType() *RebookTradeAllocationResponseIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *NewTradeAllocation) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *NewTradeAllocation) GetLotMatchingInstructions() []BookingLot {
	if o == nil {
		return nil
	}
	return o.LotMatchingInstructions
}

func (o *NewTradeAllocation) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *NewTradeAllocation) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *NewTradeAllocation) GetPrevailingMarketPrice() *RebookTradeAllocationResponsePrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *NewTradeAllocation) GetPrice() *RebookTradeAllocationResponsePrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *NewTradeAllocation) GetPriceAdjustment() *RebookTradeAllocationResponsePriceAdjustment {
	if o == nil {
		return nil
	}
	return o.PriceAdjustment
}

func (o *NewTradeAllocation) GetQuantity() *RebookTradeAllocationResponseQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *NewTradeAllocation) GetSettlementDate() *RebookTradeAllocationResponseSettlementDate {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *NewTradeAllocation) GetSideModifier() *RebookTradeAllocationResponseSideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *NewTradeAllocation) GetSourceApplication() *string {
	if o == nil {
		return nil
	}
	return o.SourceApplication
}

func (o *NewTradeAllocation) GetSpecialInstructions() []RebookTradeAllocationResponseSpecialInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *NewTradeAllocation) GetState() *RebookTradeAllocationResponseState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *NewTradeAllocation) GetToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.ToAccountID
}

func (o *NewTradeAllocation) GetToActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ToActivityID
}

func (o *NewTradeAllocation) GetToSide() *RebookTradeAllocationResponseToSide {
	if o == nil {
		return nil
	}
	return o.ToSide
}

func (o *NewTradeAllocation) GetTradeAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.TradeAllocationID
}

func (o *NewTradeAllocation) GetWhenIssued() *RebookTradeAllocationResponseWhenIssued {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

// RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount - The amount of interest that has been accrued in the issuing currency for a single instrument.
type RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponseOriginalTradeAllocationAssetType - Type of the asset being traded. Required for SYMBOL and CUSIP.
type RebookTradeAllocationResponseOriginalTradeAllocationAssetType string

const (
	RebookTradeAllocationResponseOriginalTradeAllocationAssetTypeAssetTypeUnspecified RebookTradeAllocationResponseOriginalTradeAllocationAssetType = "ASSET_TYPE_UNSPECIFIED"
	RebookTradeAllocationResponseOriginalTradeAllocationAssetTypeEquity               RebookTradeAllocationResponseOriginalTradeAllocationAssetType = "EQUITY"
	RebookTradeAllocationResponseOriginalTradeAllocationAssetTypeFixedIncome          RebookTradeAllocationResponseOriginalTradeAllocationAssetType = "FIXED_INCOME"
)

func (e RebookTradeAllocationResponseOriginalTradeAllocationAssetType) ToPointer() *RebookTradeAllocationResponseOriginalTradeAllocationAssetType {
	return &e
}

// RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity - Broker capacity for the trade.
type RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity string

const (
	RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacityCapacityUnspecified RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity = "CAPACITY_UNSPECIFIED"
	RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacityAgency              RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity = "AGENCY"
	RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacityPrincipal           RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity = "PRINCIPAL"
	RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacityMixed               RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity = "MIXED"
)

func (e RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity) ToPointer() *RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity {
	return &e
}

// RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount - Commission amount of the trade allocation that will only be applied to the to_account_id.
type RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount - Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
type RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType - Identifier type for the asset being traded.
type RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType string

const (
	RebookTradeAllocationResponseOriginalTradeAllocationIdentifierTypeIdentifierTypeUnspecified RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType = "IDENTIFIER_TYPE_UNSPECIFIED"
	RebookTradeAllocationResponseOriginalTradeAllocationIdentifierTypeAssetID                   RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType = "ASSET_ID"
	RebookTradeAllocationResponseOriginalTradeAllocationIdentifierTypeSymbol                    RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType = "SYMBOL"
	RebookTradeAllocationResponseOriginalTradeAllocationIdentifierTypeCusip                     RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType = "CUSIP"
	RebookTradeAllocationResponseOriginalTradeAllocationIdentifierTypeIsin                      RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType = "ISIN"
)

func (e RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType) ToPointer() *RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType {
	return &e
}

// RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice - The price for the instrument that is prevailing in the market. Required for FIXED_INCOME trade allocations when the broker_capacity is PRINCIPAL.
type RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponseOriginalTradeAllocationPrice - Price with requirement of 8 or less integral number and 8 or less fractional precision.
type RebookTradeAllocationResponseOriginalTradeAllocationPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount - Total monetary value of the price_adjustment
type RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security.
type RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType string

const (
	RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentTypePriceAdjustmentTypeUnspecified RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentTypeMarkup                         RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType = "MARKUP"
	RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentTypeMarkdown                       RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType = "MARKDOWN"
	RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentTypeGrossCredit                    RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType = "GROSS_CREDIT"
)

func (e RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType) ToPointer() *RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType {
	return &e
}

// RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment - Price adjustment that will be applied to the net price of the security.
type RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security.
	PriceAdjustmentType *RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment) GetPriceAdjustmentAmount() *RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment) GetPriceAdjustmentType() *RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// RebookTradeAllocationResponseOriginalTradeAllocationQuantity - Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
type RebookTradeAllocationResponseOriginalTradeAllocationQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate - Defaults to T+1 for equities if this is not provided. Calculated using the execution_time field in Eastern Time.
type RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// RebookTradeAllocationResponseOriginalTradeAllocationSideModifier - Side modifier for the trade allocation.
type RebookTradeAllocationResponseOriginalTradeAllocationSideModifier string

const (
	RebookTradeAllocationResponseOriginalTradeAllocationSideModifierSideModifierUnspecified RebookTradeAllocationResponseOriginalTradeAllocationSideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	RebookTradeAllocationResponseOriginalTradeAllocationSideModifierShort                   RebookTradeAllocationResponseOriginalTradeAllocationSideModifier = "SHORT"
	RebookTradeAllocationResponseOriginalTradeAllocationSideModifierShortExempt             RebookTradeAllocationResponseOriginalTradeAllocationSideModifier = "SHORT_EXEMPT"
	RebookTradeAllocationResponseOriginalTradeAllocationSideModifierShortCover              RebookTradeAllocationResponseOriginalTradeAllocationSideModifier = "SHORT_COVER"
	RebookTradeAllocationResponseOriginalTradeAllocationSideModifierOpen                    RebookTradeAllocationResponseOriginalTradeAllocationSideModifier = "OPEN"
	RebookTradeAllocationResponseOriginalTradeAllocationSideModifierClose                   RebookTradeAllocationResponseOriginalTradeAllocationSideModifier = "CLOSE"
)

func (e RebookTradeAllocationResponseOriginalTradeAllocationSideModifier) ToPointer() *RebookTradeAllocationResponseOriginalTradeAllocationSideModifier {
	return &e
}

type RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions string

const (
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsSpecialInstructionsUnspecified RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsRule144                        RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "RULE_144"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsWithDividend                   RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "WITH_DIVIDEND"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsWithRights                     RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "WITH_RIGHTS"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsCloseContract                  RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "CLOSE_CONTRACT"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsCoverShort                     RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "COVER_SHORT"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsCrossTrade                     RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "CROSS_TRADE"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsOpenContractCovered            RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "OPEN_CONTRACT_COVERED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsDiscretionExercised            RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "DISCRETION_EXERCISED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsDiscretionNotExercised         RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "DISCRETION_NOT_EXERCISED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsOptionAssignment               RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "OPTION_ASSIGNMENT"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsEmployeeStockOption            RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "EMPLOYEE_STOCK_OPTION"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsInvestmentBanking              RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "INVESTMENT_BANKING"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsBrokerDealerOrder              RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "BROKER_DEALER_ORDER"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsMakeMarketInSecurity           RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "MAKE_MARKET_IN_SECURITY"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsMakeMarketSolicited            RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "MAKE_MARKET_SOLICITED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsMakeMarketUnsolicited          RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "MAKE_MARKET_UNSOLICITED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsCustomerDirected               RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "CUSTOMER_DIRECTED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsFullyRegistered                RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "FULLY_REGISTERED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsOpenContract                   RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "OPEN_CONTRACT"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsOddlotDiffOnRequest            RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "ODDLOT_DIFF_ON_REQUEST"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsProspectusEnclosed             RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "PROSPECTUS_ENCLOSED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsProspectusSeparateMail         RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "PROSPECTUS_SEPARATE_MAIL"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsSolicited                      RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "SOLICITED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsUnsolicited                    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "UNSOLICITED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsXDividend                      RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "X_DIVIDEND"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsActingAsPrincipal              RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "ACTING_AS_PRINCIPAL"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsAveragePrice                   RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "AVERAGE_PRICE"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsBrokerLiquidation              RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "BROKER_LIQUIDATION"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsCouponBooks                    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "COUPON_BOOKS"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsHasPostageFee                  RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "HAS_POSTAGE_FEE"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsInternetOrder                  RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "INTERNET_ORDER"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsMarginSellout                  RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "MARGIN_SELLOUT"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsMarketMakersAsPrincipal        RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "MARKET_MAKERS_AS_PRINCIPAL"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsNegativeNetProceed             RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "NEGATIVE_NET_PROCEED"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsPreFigIndicator                RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "PRE_FIG_INDICATOR"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsRisklessPrincipalInstruction   RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "RISKLESS_PRINCIPAL_INSTRUCTION"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsShortInstruction               RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "SHORT_INSTRUCTION"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsThirdMarket                    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "THIRD_MARKET"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsSuppressMsrbTransmission       RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "SUPPRESS_MSRB_TRANSMISSION"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsSuppressTraceReporting         RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "SUPPRESS_TRACE_REPORTING"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsSuppressEmailNotification      RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "SUPPRESS_EMAIL_NOTIFICATION"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsStockReward                    RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "STOCK_REWARD"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsSuppressRegFees                RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "SUPPRESS_REG_FEES"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsSuppressSecFee                 RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "SUPPRESS_SEC_FEE"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsSuppressTafFee                 RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "SUPPRESS_TAF_FEE"
	RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructionsDividendReinvestment           RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions = "DIVIDEND_REINVESTMENT"
)

func (e RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions) ToPointer() *RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions {
	return &e
}

// RebookTradeAllocationResponseOriginalTradeAllocationState - The state that the trade allocation is in.
type RebookTradeAllocationResponseOriginalTradeAllocationState string

const (
	RebookTradeAllocationResponseOriginalTradeAllocationStateStateUnspecified RebookTradeAllocationResponseOriginalTradeAllocationState = "STATE_UNSPECIFIED"
	RebookTradeAllocationResponseOriginalTradeAllocationStateCreating         RebookTradeAllocationResponseOriginalTradeAllocationState = "CREATING"
	RebookTradeAllocationResponseOriginalTradeAllocationStateRebooking        RebookTradeAllocationResponseOriginalTradeAllocationState = "REBOOKING"
	RebookTradeAllocationResponseOriginalTradeAllocationStateCanceling        RebookTradeAllocationResponseOriginalTradeAllocationState = "CANCELING"
	RebookTradeAllocationResponseOriginalTradeAllocationStateBooked           RebookTradeAllocationResponseOriginalTradeAllocationState = "BOOKED"
	RebookTradeAllocationResponseOriginalTradeAllocationStateRebooked         RebookTradeAllocationResponseOriginalTradeAllocationState = "REBOOKED"
	RebookTradeAllocationResponseOriginalTradeAllocationStateCanceled         RebookTradeAllocationResponseOriginalTradeAllocationState = "CANCELED"
	RebookTradeAllocationResponseOriginalTradeAllocationStateFailed           RebookTradeAllocationResponseOriginalTradeAllocationState = "FAILED"
)

func (e RebookTradeAllocationResponseOriginalTradeAllocationState) ToPointer() *RebookTradeAllocationResponseOriginalTradeAllocationState {
	return &e
}

// RebookTradeAllocationResponseOriginalTradeAllocationToSide - Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
type RebookTradeAllocationResponseOriginalTradeAllocationToSide string

const (
	RebookTradeAllocationResponseOriginalTradeAllocationToSideSideUnspecified RebookTradeAllocationResponseOriginalTradeAllocationToSide = "SIDE_UNSPECIFIED"
	RebookTradeAllocationResponseOriginalTradeAllocationToSideBuy             RebookTradeAllocationResponseOriginalTradeAllocationToSide = "BUY"
	RebookTradeAllocationResponseOriginalTradeAllocationToSideSell            RebookTradeAllocationResponseOriginalTradeAllocationToSide = "SELL"
)

func (e RebookTradeAllocationResponseOriginalTradeAllocationToSide) ToPointer() *RebookTradeAllocationResponseOriginalTradeAllocationToSide {
	return &e
}

// RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued - Denotes that this trade allocation was either when_issued or when_distributed.
type RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued string

const (
	RebookTradeAllocationResponseOriginalTradeAllocationWhenIssuedWhenIssuedTypeUnspecified RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued = "WHEN_ISSUED_TYPE_UNSPECIFIED"
	RebookTradeAllocationResponseOriginalTradeAllocationWhenIssuedWhenIssued                RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued = "WHEN_ISSUED"
	RebookTradeAllocationResponseOriginalTradeAllocationWhenIssuedWhenDistributed           RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued = "WHEN_DISTRIBUTED"
)

func (e RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued) ToPointer() *RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued {
	return &e
}

// OriginalTradeAllocation - The original trade allocation that was rebooked.
type OriginalTradeAllocation struct {
	// The amount of interest that has been accrued in the issuing currency for a single instrument.
	AccruedInterestAmount *RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount `json:"accrued_interest_amount,omitempty"`
	// Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Type of the asset being traded. Required for SYMBOL and CUSIP.
	AssetType *RebookTradeAllocationResponseOriginalTradeAllocationAssetType `json:"asset_type,omitempty"`
	// The yield associated with an individual fill of a fixed income trade. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	BondYield []BondYield `json:"bond_yield,omitempty"`
	// Broker capacity for the trade.
	BrokerCapacity *RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity `json:"broker_capacity,omitempty"`
	// The unique identifier that is associated with an order. This is useful for associating the trade allocation with the original trade. This will be assigned a unique UUID if not provided.
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Commission amount of the trade allocation that will only be applied to the to_account_id.
	CommissionAmount *RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount `json:"commission_amount,omitempty"`
	// Timestamp of when the trade allocation took place. If settlement_date is not provided, this field will be converted into Eastern Time and used to calculate settlement_date.
	ExecutionTime *time.Time `json:"execution_time,omitempty"`
	// Client calculated fees that will only be applied to the to_account_id. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed.
	Fees []BookingFee `json:"fees,omitempty"`
	// The ULID formatted account_id that the positions will be moved from.
	FromAccountID *string `json:"from_account_id,omitempty"`
	// The current activity_id of the trade allocation that positions will be moved from in the Ledger.
	FromActivityID *string `json:"from_activity_id,omitempty"`
	// Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
	GrossAmount *RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount `json:"gross_amount,omitempty"`
	// Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Identifier type for the asset being traded.
	IdentifierType *RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType `json:"identifier_type,omitempty"`
	// Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP.
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// One or many lot matching instructions for the trade allocation.
	LotMatchingInstructions []BookingLot `json:"lot_matching_instructions,omitempty"`
	// Caller provided but can be used for booking-service to note original trade details when booking into the error account or using the error asset.
	Memo *string `json:"memo,omitempty"`
	// The resource name of the trade allocation.
	Name *string `json:"name,omitempty"`
	// The price for the instrument that is prevailing in the market. Required for FIXED_INCOME trade allocations when the broker_capacity is PRINCIPAL.
	PrevailingMarketPrice *RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Price with requirement of 8 or less integral number and 8 or less fractional precision.
	Price *RebookTradeAllocationResponseOriginalTradeAllocationPrice `json:"price,omitempty"`
	// Price adjustment that will be applied to the net price of the security.
	PriceAdjustment *RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment `json:"price_adjustment,omitempty"`
	// Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
	Quantity *RebookTradeAllocationResponseOriginalTradeAllocationQuantity `json:"quantity,omitempty"`
	// Defaults to T+1 for equities if this is not provided. Calculated using the execution_time field in Eastern Time.
	SettlementDate *RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate `json:"settlement_date,omitempty"`
	// Side modifier for the trade allocation.
	SideModifier *RebookTradeAllocationResponseOriginalTradeAllocationSideModifier `json:"side_modifier,omitempty"`
	// The source of the submission.
	SourceApplication *string `json:"source_application,omitempty"`
	// An enumerated list of values used to indicate certain attributes about a trade allocation (E.g. BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)
	SpecialInstructions []RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions `json:"special_instructions,omitempty"`
	// The state that the trade allocation is in.
	State *RebookTradeAllocationResponseOriginalTradeAllocationState `json:"state,omitempty"`
	// The ULID formatted account_id that the positions will be moved to.
	ToAccountID *string `json:"to_account_id,omitempty"`
	// The current activity_id of the trade allocation that positions will be moved to in the Ledger.
	ToActivityID *string `json:"to_activity_id,omitempty"`
	// Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
	ToSide *RebookTradeAllocationResponseOriginalTradeAllocationToSide `json:"to_side,omitempty"`
	// A ULID to uniquely identify the trade allocation globally.
	TradeAllocationID *string `json:"trade_allocation_id,omitempty"`
	// Denotes that this trade allocation was either when_issued or when_distributed.
	WhenIssued *RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued `json:"when_issued,omitempty"`
}

func (o OriginalTradeAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OriginalTradeAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OriginalTradeAllocation) GetAccruedInterestAmount() *RebookTradeAllocationResponseOriginalTradeAllocationAccruedInterestAmount {
	if o == nil {
		return nil
	}
	return o.AccruedInterestAmount
}

func (o *OriginalTradeAllocation) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *OriginalTradeAllocation) GetAssetType() *RebookTradeAllocationResponseOriginalTradeAllocationAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *OriginalTradeAllocation) GetBondYield() []BondYield {
	if o == nil {
		return nil
	}
	return o.BondYield
}

func (o *OriginalTradeAllocation) GetBrokerCapacity() *RebookTradeAllocationResponseOriginalTradeAllocationBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *OriginalTradeAllocation) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *OriginalTradeAllocation) GetCommissionAmount() *RebookTradeAllocationResponseOriginalTradeAllocationCommissionAmount {
	if o == nil {
		return nil
	}
	return o.CommissionAmount
}

func (o *OriginalTradeAllocation) GetExecutionTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExecutionTime
}

func (o *OriginalTradeAllocation) GetFees() []BookingFee {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *OriginalTradeAllocation) GetFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.FromAccountID
}

func (o *OriginalTradeAllocation) GetFromActivityID() *string {
	if o == nil {
		return nil
	}
	return o.FromActivityID
}

func (o *OriginalTradeAllocation) GetGrossAmount() *RebookTradeAllocationResponseOriginalTradeAllocationGrossAmount {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *OriginalTradeAllocation) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *OriginalTradeAllocation) GetIdentifierType() *RebookTradeAllocationResponseOriginalTradeAllocationIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *OriginalTradeAllocation) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *OriginalTradeAllocation) GetLotMatchingInstructions() []BookingLot {
	if o == nil {
		return nil
	}
	return o.LotMatchingInstructions
}

func (o *OriginalTradeAllocation) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *OriginalTradeAllocation) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OriginalTradeAllocation) GetPrevailingMarketPrice() *RebookTradeAllocationResponseOriginalTradeAllocationPrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *OriginalTradeAllocation) GetPrice() *RebookTradeAllocationResponseOriginalTradeAllocationPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *OriginalTradeAllocation) GetPriceAdjustment() *RebookTradeAllocationResponseOriginalTradeAllocationPriceAdjustment {
	if o == nil {
		return nil
	}
	return o.PriceAdjustment
}

func (o *OriginalTradeAllocation) GetQuantity() *RebookTradeAllocationResponseOriginalTradeAllocationQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *OriginalTradeAllocation) GetSettlementDate() *RebookTradeAllocationResponseOriginalTradeAllocationSettlementDate {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *OriginalTradeAllocation) GetSideModifier() *RebookTradeAllocationResponseOriginalTradeAllocationSideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *OriginalTradeAllocation) GetSourceApplication() *string {
	if o == nil {
		return nil
	}
	return o.SourceApplication
}

func (o *OriginalTradeAllocation) GetSpecialInstructions() []RebookTradeAllocationResponseOriginalTradeAllocationSpecialInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *OriginalTradeAllocation) GetState() *RebookTradeAllocationResponseOriginalTradeAllocationState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *OriginalTradeAllocation) GetToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.ToAccountID
}

func (o *OriginalTradeAllocation) GetToActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ToActivityID
}

func (o *OriginalTradeAllocation) GetToSide() *RebookTradeAllocationResponseOriginalTradeAllocationToSide {
	if o == nil {
		return nil
	}
	return o.ToSide
}

func (o *OriginalTradeAllocation) GetTradeAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.TradeAllocationID
}

func (o *OriginalTradeAllocation) GetWhenIssued() *RebookTradeAllocationResponseOriginalTradeAllocationWhenIssued {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

// RebookTradeAllocationResponse - Rebooking a trade allocation will always return a new resource that contains the rebooked trade allocation.
type RebookTradeAllocationResponse struct {
	// The new trade allocation that is booked.
	NewTradeAllocation *NewTradeAllocation `json:"new_trade_allocation,omitempty"`
	// The original trade allocation that was rebooked.
	OriginalTradeAllocation *OriginalTradeAllocation `json:"original_trade_allocation,omitempty"`
}

func (o *RebookTradeAllocationResponse) GetNewTradeAllocation() *NewTradeAllocation {
	if o == nil {
		return nil
	}
	return o.NewTradeAllocation
}

func (o *RebookTradeAllocationResponse) GetOriginalTradeAllocation() *OriginalTradeAllocation {
	if o == nil {
		return nil
	}
	return o.OriginalTradeAllocation
}
