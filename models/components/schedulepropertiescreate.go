// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// TimeUnit - The time unit used to calculate the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
type TimeUnit string

const (
	TimeUnitDay   TimeUnit = "DAY"
	TimeUnitWeek  TimeUnit = "WEEK"
	TimeUnitMonth TimeUnit = "MONTH"
)

func (e TimeUnit) ToPointer() *TimeUnit {
	return &e
}

// SchedulePropertiesCreate - Properties common to all transfer schedules
type SchedulePropertiesCreate struct {
	// The number of occurrences (empty or 0 indicates unlimited occurrences)
	Occurrences *int `json:"occurrences,omitempty"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	StartDate DateCreate `json:"start_date"`
	// The time unit used to calculate the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
	TimeUnit TimeUnit `json:"time_unit"`
	// The multiplier used to determine the length of the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
	UnitMultiplier int `json:"unit_multiplier"`
}

func (o *SchedulePropertiesCreate) GetOccurrences() *int {
	if o == nil {
		return nil
	}
	return o.Occurrences
}

func (o *SchedulePropertiesCreate) GetStartDate() DateCreate {
	if o == nil {
		return DateCreate{}
	}
	return o.StartDate
}

func (o *SchedulePropertiesCreate) GetTimeUnit() TimeUnit {
	if o == nil {
		return TimeUnit("")
	}
	return o.TimeUnit
}

func (o *SchedulePropertiesCreate) GetUnitMultiplier() int {
	if o == nil {
		return 0
	}
	return o.UnitMultiplier
}
