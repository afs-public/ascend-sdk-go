// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"ascend-sdk/internal/utils"
	"encoding/json"
	"fmt"
	"time"
)

// AchWithdrawalAmount - The amount to withdraw in USD. The value should not be set if the withdrawal is `full_disbursement`.
type AchWithdrawalAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AchWithdrawalAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AchWithdrawalRetirementDistributionAmount - Fixed USD amount to withhold for taxes.
type AchWithdrawalRetirementDistributionAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AchWithdrawalRetirementDistributionAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AchWithdrawalPercentage - Percentage of total disbursement amount to withhold for taxes.
type AchWithdrawalPercentage struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AchWithdrawalPercentage) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// FederalTaxWithholding - The federal tax withholding.
type FederalTaxWithholding struct {
	// Fixed USD amount to withhold for taxes.
	Amount *AchWithdrawalRetirementDistributionAmount `json:"amount,omitempty"`
	// Percentage of total disbursement amount to withhold for taxes.
	Percentage *AchWithdrawalPercentage `json:"percentage,omitempty"`
}

func (o *FederalTaxWithholding) GetAmount() *AchWithdrawalRetirementDistributionAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *FederalTaxWithholding) GetPercentage() *AchWithdrawalPercentage {
	if o == nil {
		return nil
	}
	return o.Percentage
}

// AchWithdrawalRetirementDistributionStateTaxWithholdingAmount - Fixed USD amount to withhold for taxes.
type AchWithdrawalRetirementDistributionStateTaxWithholdingAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AchWithdrawalRetirementDistributionStateTaxWithholdingAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AchWithdrawalRetirementDistributionPercentage - Percentage of total disbursement amount to withhold for taxes.
type AchWithdrawalRetirementDistributionPercentage struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AchWithdrawalRetirementDistributionPercentage) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// StateTaxWithholding - The state tax withholding.
type StateTaxWithholding struct {
	// Fixed USD amount to withhold for taxes.
	Amount *AchWithdrawalRetirementDistributionStateTaxWithholdingAmount `json:"amount,omitempty"`
	// Percentage of total disbursement amount to withhold for taxes.
	Percentage *AchWithdrawalRetirementDistributionPercentage `json:"percentage,omitempty"`
}

func (o *StateTaxWithholding) GetAmount() *AchWithdrawalRetirementDistributionStateTaxWithholdingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *StateTaxWithholding) GetPercentage() *AchWithdrawalRetirementDistributionPercentage {
	if o == nil {
		return nil
	}
	return o.Percentage
}

// AchWithdrawalType - The type of retirement distribution.
type AchWithdrawalType string

const (
	AchWithdrawalTypeTypeUnspecified                            AchWithdrawalType = "TYPE_UNSPECIFIED"
	AchWithdrawalTypeNormal                                     AchWithdrawalType = "NORMAL"
	AchWithdrawalTypeDisability                                 AchWithdrawalType = "DISABILITY"
	AchWithdrawalTypeSosepp                                     AchWithdrawalType = "SOSEPP"
	AchWithdrawalTypePremature                                  AchWithdrawalType = "PREMATURE"
	AchWithdrawalTypeDeath                                      AchWithdrawalType = "DEATH"
	AchWithdrawalTypeExcessContributionRemovalBeforeTaxDeadline AchWithdrawalType = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE"
	AchWithdrawalTypeExcessContributionRemovalAfterTaxDeadline  AchWithdrawalType = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE"
	AchWithdrawalTypeRolloverToQualifiedPlan                    AchWithdrawalType = "ROLLOVER_TO_QUALIFIED_PLAN"
	AchWithdrawalTypeRolloverToIra                              AchWithdrawalType = "ROLLOVER_TO_IRA"
	AchWithdrawalTypeDistributionTransfer                       AchWithdrawalType = "DISTRIBUTION_TRANSFER"
	AchWithdrawalTypeRecharacterizationPriorYear                AchWithdrawalType = "RECHARACTERIZATION_PRIOR_YEAR"
	AchWithdrawalTypeRecharacterizationCurrentYear              AchWithdrawalType = "RECHARACTERIZATION_CURRENT_YEAR"
	AchWithdrawalTypeDistributionConversion                     AchWithdrawalType = "DISTRIBUTION_CONVERSION"
	AchWithdrawalTypeManagementFee                              AchWithdrawalType = "MANAGEMENT_FEE"
	AchWithdrawalTypePlanLoan401K                               AchWithdrawalType = "PLAN_LOAN_401K"
	AchWithdrawalTypePrematureSimpleIraLessThan2Years           AchWithdrawalType = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS"
	AchWithdrawalTypeNormalRothIraGreaterThan5Years             AchWithdrawalType = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS"
)

func (e AchWithdrawalType) ToPointer() *AchWithdrawalType {
	return &e
}
func (e *AchWithdrawalType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "NORMAL":
		fallthrough
	case "DISABILITY":
		fallthrough
	case "SOSEPP":
		fallthrough
	case "PREMATURE":
		fallthrough
	case "DEATH":
		fallthrough
	case "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE":
		fallthrough
	case "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE":
		fallthrough
	case "ROLLOVER_TO_QUALIFIED_PLAN":
		fallthrough
	case "ROLLOVER_TO_IRA":
		fallthrough
	case "DISTRIBUTION_TRANSFER":
		fallthrough
	case "RECHARACTERIZATION_PRIOR_YEAR":
		fallthrough
	case "RECHARACTERIZATION_CURRENT_YEAR":
		fallthrough
	case "DISTRIBUTION_CONVERSION":
		fallthrough
	case "MANAGEMENT_FEE":
		fallthrough
	case "PLAN_LOAN_401K":
		fallthrough
	case "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS":
		fallthrough
	case "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS":
		*e = AchWithdrawalType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchWithdrawalType: %v", v)
	}
}

// RetirementDistribution - The retirement distribution details.
type RetirementDistribution struct {
	// The federal tax withholding.
	FederalTaxWithholding *FederalTaxWithholding `json:"federal_tax_withholding,omitempty"`
	// The institution receiving retirement funds when performing a transfer to an identical retirement account type at a different financial institution. This is required for check and wire withdrawals because we can't always identify the institution using the transfer instructions. For cash journals this value will default to "Apex Clearing", regardless of what is passed in here
	ReceivingInstitution *string `json:"receiving_institution,omitempty"`
	// The state tax withholding.
	StateTaxWithholding *StateTaxWithholding `json:"state_tax_withholding,omitempty"`
	// Whether or not this distribution has a state withholding waiver.
	StateWithholdingWaiver *bool `json:"state_withholding_waiver,omitempty"`
	// Tax year for which the distribution is applied.
	TaxYear *int `json:"tax_year,omitempty"`
	// The type of retirement distribution.
	Type *AchWithdrawalType `json:"type,omitempty"`
}

func (o *RetirementDistribution) GetFederalTaxWithholding() *FederalTaxWithholding {
	if o == nil {
		return nil
	}
	return o.FederalTaxWithholding
}

func (o *RetirementDistribution) GetReceivingInstitution() *string {
	if o == nil {
		return nil
	}
	return o.ReceivingInstitution
}

func (o *RetirementDistribution) GetStateTaxWithholding() *StateTaxWithholding {
	if o == nil {
		return nil
	}
	return o.StateTaxWithholding
}

func (o *RetirementDistribution) GetStateWithholdingWaiver() *bool {
	if o == nil {
		return nil
	}
	return o.StateWithholdingWaiver
}

func (o *RetirementDistribution) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *RetirementDistribution) GetType() *AchWithdrawalType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AchWithdrawalStateState - The high level state of a transfer, one of:
// - `PROCESSING` - The transfer is being processed and will be posted if successful.
// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
// - `COMPLETED` - The transfer has been batched and completed.
// - `REJECTED` - The transfer was rejected.
// - `CANCELED` - The transfer was canceled.
// - `RETURNED` - The transfer was returned.
// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
type AchWithdrawalStateState string

const (
	AchWithdrawalStateStateStateUnspecified AchWithdrawalStateState = "STATE_UNSPECIFIED"
	AchWithdrawalStateStateProcessing       AchWithdrawalStateState = "PROCESSING"
	AchWithdrawalStateStatePendingReview    AchWithdrawalStateState = "PENDING_REVIEW"
	AchWithdrawalStateStatePosted           AchWithdrawalStateState = "POSTED"
	AchWithdrawalStateStateCompleted        AchWithdrawalStateState = "COMPLETED"
	AchWithdrawalStateStateRejected         AchWithdrawalStateState = "REJECTED"
	AchWithdrawalStateStateCanceled         AchWithdrawalStateState = "CANCELED"
	AchWithdrawalStateStateReturned         AchWithdrawalStateState = "RETURNED"
	AchWithdrawalStateStatePostponed        AchWithdrawalStateState = "POSTPONED"
)

func (e AchWithdrawalStateState) ToPointer() *AchWithdrawalStateState {
	return &e
}
func (e *AchWithdrawalStateState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "PENDING_REVIEW":
		fallthrough
	case "POSTED":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "CANCELED":
		fallthrough
	case "RETURNED":
		fallthrough
	case "POSTPONED":
		*e = AchWithdrawalStateState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AchWithdrawalStateState: %v", v)
	}
}

// AchWithdrawalState - The current state of the ACH withdrawal.
type AchWithdrawalState struct {
	// The user or service that triggered the state update.
	Actor *string `json:"actor,omitempty"`
	// Additional description of the transfer state.
	Message *string `json:"message,omitempty"`
	// Additional metadata relating to the transfer state. Included data depends on the state, e.g.:
	//  - Rejection reasons are included when the `state` is `REJECTED`
	//  - Reason and comment are included when `state` is `CANCELED`
	Metadata map[string]any `json:"metadata,omitempty"`
	// The high level state of a transfer, one of:
	// - `PROCESSING` - The transfer is being processed and will be posted if successful.
	// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
	// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
	// - `COMPLETED` - The transfer has been batched and completed.
	// - `REJECTED` - The transfer was rejected.
	// - `CANCELED` - The transfer was canceled.
	// - `RETURNED` - The transfer was returned.
	// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
	State *AchWithdrawalStateState `json:"state,omitempty"`
	// The time of the state update.
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

func (a AchWithdrawalState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AchWithdrawalState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AchWithdrawalState) GetActor() *string {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *AchWithdrawalState) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *AchWithdrawalState) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *AchWithdrawalState) GetState() *AchWithdrawalStateState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *AchWithdrawalState) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

// AchWithdrawal - A withdrawal transfer using the ACH mechanism.
type AchWithdrawal struct {
	// The amount to withdraw in USD. The value should not be set if the withdrawal is `full_disbursement`.
	Amount *AchWithdrawalAmount `json:"amount,omitempty"`
	// The bank relationship to be used for the ACH withdrawal.
	BankRelationship *string `json:"bank_relationship,omitempty"`
	// The external identifier supplied by the API caller. Each request must have a unique pairing of `client_transfer_id` and `account`.
	ClientTransferID *string `json:"client_transfer_id,omitempty"`
	// The memo that will appear on the customer's bank statement.
	Memo *string `json:"memo,omitempty"`
	// The resource name of the ACH withdrawal.
	Name *string `json:"name,omitempty"`
	// The retirement distribution details.
	RetirementDistribution *RetirementDistribution `json:"retirement_distribution,omitempty"`
	// The current state of the ACH withdrawal.
	State *AchWithdrawalState `json:"state,omitempty"`
}

func (o *AchWithdrawal) GetAmount() *AchWithdrawalAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *AchWithdrawal) GetBankRelationship() *string {
	if o == nil {
		return nil
	}
	return o.BankRelationship
}

func (o *AchWithdrawal) GetClientTransferID() *string {
	if o == nil {
		return nil
	}
	return o.ClientTransferID
}

func (o *AchWithdrawal) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *AchWithdrawal) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AchWithdrawal) GetRetirementDistribution() *RetirementDistribution {
	if o == nil {
		return nil
	}
	return o.RetirementDistribution
}

func (o *AchWithdrawal) GetState() *AchWithdrawalState {
	if o == nil {
		return nil
	}
	return o.State
}
