// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// AssetType - The type of the asset in this order
type AssetType string

const (
	AssetTypeAssetTypeUnspecified AssetType = "ASSET_TYPE_UNSPECIFIED"
	AssetTypeEquity               AssetType = "EQUITY"
	AssetTypeFixedIncome          AssetType = "FIXED_INCOME"
	AssetTypeMutualFund           AssetType = "MUTUAL_FUND"
)

func (e AssetType) ToPointer() *AssetType {
	return &e
}

// BrokerCapacity - Defaults to "AGENCY" if not specified. For Equities: Only "AGENCY" is allowed. For Mutual Funds: Only "AGENCY" is allowed. For Fixed Income: Either "AGENCY" or "PRINCIPAL" are allowed.
type BrokerCapacity string

const (
	BrokerCapacityBrokerCapacityUnspecified BrokerCapacity = "BROKER_CAPACITY_UNSPECIFIED"
	BrokerCapacityAgency                    BrokerCapacity = "AGENCY"
	BrokerCapacityPrincipal                 BrokerCapacity = "PRINCIPAL"
)

func (e BrokerCapacity) ToPointer() *BrokerCapacity {
	return &e
}

// IdentifierType - The identifier type of the asset being ordered. For Equities: only SYMBOL is supported For Mutual Funds: only SYMBOL and CUSIP are supported For Fixed Income: only CUSIP and ISIN are supported
type IdentifierType string

const (
	IdentifierTypeSymbol IdentifierType = "SYMBOL"
	IdentifierTypeCusip  IdentifierType = "CUSIP"
	IdentifierTypeIsin   IdentifierType = "ISIN"
)

func (e IdentifierType) ToPointer() *IdentifierType {
	return &e
}

// OrderType - The execution type of this order. For Equities: MARKET, LIMIT, or STOP are supported. For Mutual Funds: only MARKET is supported. For Fixed Income: only LIMIT is supported.
type OrderType string

const (
	OrderTypeOrderTypeUnspecified OrderType = "ORDER_TYPE_UNSPECIFIED"
	OrderTypeLimit                OrderType = "LIMIT"
	OrderTypeMarket               OrderType = "MARKET"
	OrderTypeStop                 OrderType = "STOP"
)

func (e OrderType) ToPointer() *OrderType {
	return &e
}

// Side - The side of this order.
type Side string

const (
	SideSideUnspecified Side = "SIDE_UNSPECIFIED"
	SideBuy             Side = "BUY"
	SideSell            Side = "SELL"
)

func (e Side) ToPointer() *Side {
	return &e
}

type SpecialReportingInstructions string

const (
	SpecialReportingInstructionsSpecialReportingInstructionsUnspecified SpecialReportingInstructions = "SPECIAL_REPORTING_INSTRUCTIONS_UNSPECIFIED"
	SpecialReportingInstructionsCustomerDirected                        SpecialReportingInstructions = "CUSTOMER_DIRECTED"
	SpecialReportingInstructionsWithDividend                            SpecialReportingInstructions = "WITH_DIVIDEND"
	SpecialReportingInstructionsWithRights                              SpecialReportingInstructions = "WITH_RIGHTS"
	SpecialReportingInstructionsDiscretionExercised                     SpecialReportingInstructions = "DISCRETION_EXERCISED"
	SpecialReportingInstructionsDiscretionNotExercised                  SpecialReportingInstructions = "DISCRETION_NOT_EXERCISED"
	SpecialReportingInstructionsBrokerDealerOrder                       SpecialReportingInstructions = "BROKER_DEALER_ORDER"
	SpecialReportingInstructionsFullyRegistered                         SpecialReportingInstructions = "FULLY_REGISTERED"
	SpecialReportingInstructionsOddlotDiffOnRequest                     SpecialReportingInstructions = "ODDLOT_DIFF_ON_REQUEST"
	SpecialReportingInstructionsProspectusEnclosed                      SpecialReportingInstructions = "PROSPECTUS_ENCLOSED"
	SpecialReportingInstructionsProspectusSeparateMail                  SpecialReportingInstructions = "PROSPECTUS_SEPARATE_MAIL"
	SpecialReportingInstructionsSolicited                               SpecialReportingInstructions = "SOLICITED"
	SpecialReportingInstructionsUnsolicited                             SpecialReportingInstructions = "UNSOLICITED"
	SpecialReportingInstructionsXDividend                               SpecialReportingInstructions = "X_DIVIDEND"
	SpecialReportingInstructionsActingAsPrincipal                       SpecialReportingInstructions = "ACTING_AS_PRINCIPAL"
	SpecialReportingInstructionsAveragePrice                            SpecialReportingInstructions = "AVERAGE_PRICE"
	SpecialReportingInstructionsBrokerLiquidation                       SpecialReportingInstructions = "BROKER_LIQUIDATION"
	SpecialReportingInstructionsInternetOrder                           SpecialReportingInstructions = "INTERNET_ORDER"
	SpecialReportingInstructionsMarginSellout                           SpecialReportingInstructions = "MARGIN_SELLOUT"
	SpecialReportingInstructionsNegativeNetProceed                      SpecialReportingInstructions = "NEGATIVE_NET_PROCEED"
	SpecialReportingInstructionsRisklessPrincipal                       SpecialReportingInstructions = "RISKLESS_PRINCIPAL"
	SpecialReportingInstructionsThirdMarket                             SpecialReportingInstructions = "THIRD_MARKET"
	SpecialReportingInstructionsSuppressTraceReporting                  SpecialReportingInstructions = "SUPPRESS_TRACE_REPORTING"
	SpecialReportingInstructionsWhenDistributed                         SpecialReportingInstructions = "WHEN_DISTRIBUTED"
)

func (e SpecialReportingInstructions) ToPointer() *SpecialReportingInstructions {
	return &e
}

// TimeInForce - Must be the value "DAY". Regulatory requirements dictate that the system capture the intended time_in_force, which is why this a mandatory field.
type TimeInForce string

const (
	TimeInForceTimeInForceUnspecified TimeInForce = "TIME_IN_FORCE_UNSPECIFIED"
	TimeInForceDay                    TimeInForce = "DAY"
)

func (e TimeInForce) ToPointer() *TimeInForce {
	return &e
}

// OrderCreate - The message describing an order
type OrderCreate struct {
	// The type of the asset in this order
	AssetType AssetType `json:"asset_type"`
	// Defaults to "AGENCY" if not specified. For Equities: Only "AGENCY" is allowed. For Mutual Funds: Only "AGENCY" is allowed. For Fixed Income: Either "AGENCY" or "PRINCIPAL" are allowed.
	BrokerCapacity *BrokerCapacity `json:"broker_capacity,omitempty"`
	// User-supplied unique order ID. Cannot be more than 40 characters long.
	ClientOrderID string `json:"client_order_id"`
	// Required for Equity Orders for any client who is having Apex do CAT reporting on their behalf. A value may be provided for non-Equity orders, and will be remembered, but valid timestamps will have no impact on how they are processed.
	ClientReceivedTime *time.Time `json:"client_received_time,omitempty"`
	// A custom commission applied to an order
	Commission *CommissionCreate `json:"commission,omitempty"`
	// Defaults to "USD". Only "USD" is supported. Full list of currency codes is defined at: https://en.wikipedia.org/wiki/ISO_4217
	CurrencyCode *string `json:"currency_code,omitempty"`
	// Fees that will be applied to this order.
	Fees []FeeCreate `json:"fees,omitempty"`
	// Identifier of the asset (of the type specified in `identifier_type`).
	Identifier string `json:"identifier"`
	// A string attribute denoting the country of issuance or where the asset is trading. Only available for Mutual Fund orders. Defaults to US, when trading non US mutual funds this field must be provided Complies with ISO-3166 Alpha-2 Codes
	IdentifierIssuingRegionCode *string `json:"identifier_issuing_region_code,omitempty"`
	// The identifier type of the asset being ordered. For Equities: only SYMBOL is supported For Mutual Funds: only SYMBOL and CUSIP are supported For Fixed Income: only CUSIP and ISIN are supported
	IdentifierType IdentifierType `json:"identifier_type"`
	// Letter of Intent (LOI). An LOI allows investors to receive sales charge discounts based on a commitment to buy a specified monetary amount of shares over a period of time, usually 13 months.
	LetterOfIntent *LetterOfIntentCreate `json:"letter_of_intent,omitempty"`
	// A limit price definition
	LimitPrice *LimitPriceCreate `json:"limit_price,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	MaxSellQuantity *DecimalCreate `json:"max_sell_quantity,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	NotionalValue *DecimalCreate `json:"notional_value,omitempty"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	OrderDate DateCreate `json:"order_date"`
	// The execution type of this order. For Equities: MARKET, LIMIT, or STOP are supported. For Mutual Funds: only MARKET is supported. For Fixed Income: only LIMIT is supported.
	OrderType OrderType `json:"order_type"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	Quantity *DecimalCreate `json:"quantity,omitempty"`
	// Rights of Accumulation (ROA). An ROA allows an investor to aggregate their own fund shares with the holdings of certain related parties toward achieving the investment thresholds at which sales charge discounts become available.
	RightsOfAccumulation *RightsOfAccumulationCreate `json:"rights_of_accumulation,omitempty"`
	// The side of this order.
	Side Side `json:"side"`
	// Special Reporting Instructions to be applied to this order. Can include multiple Instructions.
	SpecialReportingInstructions []SpecialReportingInstructions `json:"special_reporting_instructions,omitempty"`
	// A stop price definition
	StopPrice *StopPriceCreate `json:"stop_price,omitempty"`
	// Must be the value "DAY". Regulatory requirements dictate that the system capture the intended time_in_force, which is why this a mandatory field.
	TimeInForce TimeInForce `json:"time_in_force"`
}

func (o OrderCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OrderCreate) GetAssetType() AssetType {
	if o == nil {
		return AssetType("")
	}
	return o.AssetType
}

func (o *OrderCreate) GetBrokerCapacity() *BrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *OrderCreate) GetClientOrderID() string {
	if o == nil {
		return ""
	}
	return o.ClientOrderID
}

func (o *OrderCreate) GetClientReceivedTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClientReceivedTime
}

func (o *OrderCreate) GetCommission() *CommissionCreate {
	if o == nil {
		return nil
	}
	return o.Commission
}

func (o *OrderCreate) GetCurrencyCode() *string {
	if o == nil {
		return nil
	}
	return o.CurrencyCode
}

func (o *OrderCreate) GetFees() []FeeCreate {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *OrderCreate) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *OrderCreate) GetIdentifierIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IdentifierIssuingRegionCode
}

func (o *OrderCreate) GetIdentifierType() IdentifierType {
	if o == nil {
		return IdentifierType("")
	}
	return o.IdentifierType
}

func (o *OrderCreate) GetLetterOfIntent() *LetterOfIntentCreate {
	if o == nil {
		return nil
	}
	return o.LetterOfIntent
}

func (o *OrderCreate) GetLimitPrice() *LimitPriceCreate {
	if o == nil {
		return nil
	}
	return o.LimitPrice
}

func (o *OrderCreate) GetMaxSellQuantity() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.MaxSellQuantity
}

func (o *OrderCreate) GetNotionalValue() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.NotionalValue
}

func (o *OrderCreate) GetOrderDate() DateCreate {
	if o == nil {
		return DateCreate{}
	}
	return o.OrderDate
}

func (o *OrderCreate) GetOrderType() OrderType {
	if o == nil {
		return OrderType("")
	}
	return o.OrderType
}

func (o *OrderCreate) GetQuantity() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *OrderCreate) GetRightsOfAccumulation() *RightsOfAccumulationCreate {
	if o == nil {
		return nil
	}
	return o.RightsOfAccumulation
}

func (o *OrderCreate) GetSide() Side {
	if o == nil {
		return Side("")
	}
	return o.Side
}

func (o *OrderCreate) GetSpecialReportingInstructions() []SpecialReportingInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialReportingInstructions
}

func (o *OrderCreate) GetStopPrice() *StopPriceCreate {
	if o == nil {
		return nil
	}
	return o.StopPrice
}

func (o *OrderCreate) GetTimeInForce() TimeInForce {
	if o == nil {
		return TimeInForce("")
	}
	return o.TimeInForce
}
