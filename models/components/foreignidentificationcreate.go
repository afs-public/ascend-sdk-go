// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// Type - Identification type
type Type string

const (
	TypeIdentificationTypeUnspecified Type = "IDENTIFICATION_TYPE_UNSPECIFIED"
	TypePassport                      Type = "PASSPORT"
	TypeNationalID                    Type = "NATIONAL_ID"
	TypeDriversLicense                Type = "DRIVERS_LICENSE"
)

func (e Type) ToPointer() *Type {
	return &e
}

// ForeignIdentificationCreate - Foreign identification
type ForeignIdentificationCreate struct {
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	ExpirationDate *DateCreate `json:"expiration_date,omitempty"`
	// Denotes if the identification is a tax id or other
	Ftin bool `json:"ftin"`
	// Identification number
	IdentificationNumber string `json:"identification_number"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	IssueDate *DateCreate `json:"issue_date,omitempty"`
	// Region of issuance must be provided as a two-character CLDR country code
	IssuingRegionCode string `json:"issuing_region_code"`
	// Identification type
	Type *Type `json:"type,omitempty"`
}

func (o *ForeignIdentificationCreate) GetExpirationDate() *DateCreate {
	if o == nil {
		return nil
	}
	return o.ExpirationDate
}

func (o *ForeignIdentificationCreate) GetFtin() bool {
	if o == nil {
		return false
	}
	return o.Ftin
}

func (o *ForeignIdentificationCreate) GetIdentificationNumber() string {
	if o == nil {
		return ""
	}
	return o.IdentificationNumber
}

func (o *ForeignIdentificationCreate) GetIssueDate() *DateCreate {
	if o == nil {
		return nil
	}
	return o.IssueDate
}

func (o *ForeignIdentificationCreate) GetIssuingRegionCode() string {
	if o == nil {
		return ""
	}
	return o.IssuingRegionCode
}

func (o *ForeignIdentificationCreate) GetType() *Type {
	if o == nil {
		return nil
	}
	return o.Type
}
