// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// IctWithdrawalAmount - The amount of the transfer being withdrawn from the customer's account in USD. A value should not be provided if the withdrawal is a full disbursement.
type IctWithdrawalAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *IctWithdrawalAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// IctWithdrawalProgram - The name of the program that the ICT withdrawal is associated with.
type IctWithdrawalProgram string

const (
	IctWithdrawalProgramIctProgramUnspecified IctWithdrawalProgram = "ICT_PROGRAM_UNSPECIFIED"
	IctWithdrawalProgramBrokerPartner         IctWithdrawalProgram = "BROKER_PARTNER"
	IctWithdrawalProgramDepositOnly           IctWithdrawalProgram = "DEPOSIT_ONLY"
	IctWithdrawalProgramBankingPartner        IctWithdrawalProgram = "BANKING_PARTNER"
	IctWithdrawalProgramMoneyTransmitter      IctWithdrawalProgram = "MONEY_TRANSMITTER"
	IctWithdrawalProgramWithdrawalOnly        IctWithdrawalProgram = "WITHDRAWAL_ONLY"
	IctWithdrawalProgramDigitalPartner        IctWithdrawalProgram = "DIGITAL_PARTNER"
)

func (e IctWithdrawalProgram) ToPointer() *IctWithdrawalProgram {
	return &e
}

// IctWithdrawalRetirementDistributionAmount - Fixed USD amount to withhold for taxes.
type IctWithdrawalRetirementDistributionAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *IctWithdrawalRetirementDistributionAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// IctWithdrawalPercentage - Percentage of total disbursement amount to withhold for taxes.
type IctWithdrawalPercentage struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *IctWithdrawalPercentage) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// IctWithdrawalFederalTaxWithholding - The federal tax withholding.
type IctWithdrawalFederalTaxWithholding struct {
	// Fixed USD amount to withhold for taxes.
	Amount *IctWithdrawalRetirementDistributionAmount `json:"amount,omitempty"`
	// Percentage of total disbursement amount to withhold for taxes.
	Percentage *IctWithdrawalPercentage `json:"percentage,omitempty"`
}

func (o *IctWithdrawalFederalTaxWithholding) GetAmount() *IctWithdrawalRetirementDistributionAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *IctWithdrawalFederalTaxWithholding) GetPercentage() *IctWithdrawalPercentage {
	if o == nil {
		return nil
	}
	return o.Percentage
}

// IctWithdrawalRetirementDistributionStateTaxWithholdingAmount - Fixed USD amount to withhold for taxes.
type IctWithdrawalRetirementDistributionStateTaxWithholdingAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *IctWithdrawalRetirementDistributionStateTaxWithholdingAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// IctWithdrawalRetirementDistributionPercentage - Percentage of total disbursement amount to withhold for taxes.
type IctWithdrawalRetirementDistributionPercentage struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *IctWithdrawalRetirementDistributionPercentage) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// IctWithdrawalStateTaxWithholding - The state tax withholding.
type IctWithdrawalStateTaxWithholding struct {
	// Fixed USD amount to withhold for taxes.
	Amount *IctWithdrawalRetirementDistributionStateTaxWithholdingAmount `json:"amount,omitempty"`
	// Percentage of total disbursement amount to withhold for taxes.
	Percentage *IctWithdrawalRetirementDistributionPercentage `json:"percentage,omitempty"`
}

func (o *IctWithdrawalStateTaxWithholding) GetAmount() *IctWithdrawalRetirementDistributionStateTaxWithholdingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *IctWithdrawalStateTaxWithholding) GetPercentage() *IctWithdrawalRetirementDistributionPercentage {
	if o == nil {
		return nil
	}
	return o.Percentage
}

// IctWithdrawalType - The type of retirement distribution.
type IctWithdrawalType string

const (
	IctWithdrawalTypeTypeUnspecified                            IctWithdrawalType = "TYPE_UNSPECIFIED"
	IctWithdrawalTypeNormal                                     IctWithdrawalType = "NORMAL"
	IctWithdrawalTypeDisability                                 IctWithdrawalType = "DISABILITY"
	IctWithdrawalTypeSosepp                                     IctWithdrawalType = "SOSEPP"
	IctWithdrawalTypePremature                                  IctWithdrawalType = "PREMATURE"
	IctWithdrawalTypeDeath                                      IctWithdrawalType = "DEATH"
	IctWithdrawalTypeExcessContributionRemovalBeforeTaxDeadline IctWithdrawalType = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE"
	IctWithdrawalTypeExcessContributionRemovalAfterTaxDeadline  IctWithdrawalType = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE"
	IctWithdrawalTypeRolloverToQualifiedPlan                    IctWithdrawalType = "ROLLOVER_TO_QUALIFIED_PLAN"
	IctWithdrawalTypeRolloverToIra                              IctWithdrawalType = "ROLLOVER_TO_IRA"
	IctWithdrawalTypeDistributionTransfer                       IctWithdrawalType = "DISTRIBUTION_TRANSFER"
	IctWithdrawalTypeRecharacterizationPriorYear                IctWithdrawalType = "RECHARACTERIZATION_PRIOR_YEAR"
	IctWithdrawalTypeRecharacterizationCurrentYear              IctWithdrawalType = "RECHARACTERIZATION_CURRENT_YEAR"
	IctWithdrawalTypeDistributionConversion                     IctWithdrawalType = "DISTRIBUTION_CONVERSION"
	IctWithdrawalTypeManagementFee                              IctWithdrawalType = "MANAGEMENT_FEE"
	IctWithdrawalTypePlanLoan401K                               IctWithdrawalType = "PLAN_LOAN_401K"
	IctWithdrawalTypePrematureSimpleIraLessThan2Years           IctWithdrawalType = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS"
	IctWithdrawalTypeNormalRothIraGreaterThan5Years             IctWithdrawalType = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS"
	IctWithdrawalTypeNetIncomeAttributable                      IctWithdrawalType = "NET_INCOME_ATTRIBUTABLE"
	IctWithdrawalTypeRevocation                                 IctWithdrawalType = "REVOCATION"
	IctWithdrawalTypeNonReportable                              IctWithdrawalType = "NON_REPORTABLE"
)

func (e IctWithdrawalType) ToPointer() *IctWithdrawalType {
	return &e
}

// IctWithdrawalRetirementDistribution - Retirement distribution details for withdrawal from retirement account
type IctWithdrawalRetirementDistribution struct {
	// The federal tax withholding.
	FederalTaxWithholding *IctWithdrawalFederalTaxWithholding `json:"federal_tax_withholding,omitempty"`
	// The institution receiving retirement funds when performing a transfer to an identical retirement account type at a different financial institution. This is required for check and wire withdrawals because we can't always identify the institution using the transfer instructions. For cash journals this value will default to "Apex Clearing", regardless of what is passed in here
	ReceivingInstitution *string `json:"receiving_institution,omitempty"`
	// The state tax withholding.
	StateTaxWithholding *IctWithdrawalStateTaxWithholding `json:"state_tax_withholding,omitempty"`
	// Whether or not this distribution has a state withholding waiver.
	StateWithholdingWaiver *bool `json:"state_withholding_waiver,omitempty"`
	// Tax year for which the distribution is applied.
	TaxYear *int `json:"tax_year,omitempty"`
	// The type of retirement distribution.
	Type *IctWithdrawalType `json:"type,omitempty"`
}

func (o *IctWithdrawalRetirementDistribution) GetFederalTaxWithholding() *IctWithdrawalFederalTaxWithholding {
	if o == nil {
		return nil
	}
	return o.FederalTaxWithholding
}

func (o *IctWithdrawalRetirementDistribution) GetReceivingInstitution() *string {
	if o == nil {
		return nil
	}
	return o.ReceivingInstitution
}

func (o *IctWithdrawalRetirementDistribution) GetStateTaxWithholding() *IctWithdrawalStateTaxWithholding {
	if o == nil {
		return nil
	}
	return o.StateTaxWithholding
}

func (o *IctWithdrawalRetirementDistribution) GetStateWithholdingWaiver() *bool {
	if o == nil {
		return nil
	}
	return o.StateWithholdingWaiver
}

func (o *IctWithdrawalRetirementDistribution) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *IctWithdrawalRetirementDistribution) GetType() *IctWithdrawalType {
	if o == nil {
		return nil
	}
	return o.Type
}

// IctWithdrawalStateState - The high level state of a transfer, one of:
// - `PROCESSING` - The transfer is being processed and will be posted if successful.
// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
// - `COMPLETED` - The transfer has been batched and completed.
// - `REJECTED` - The transfer was rejected.
// - `CANCELED` - The transfer was canceled.
// - `RETURNED` - The transfer was returned.
// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
type IctWithdrawalStateState string

const (
	IctWithdrawalStateStateStateUnspecified IctWithdrawalStateState = "STATE_UNSPECIFIED"
	IctWithdrawalStateStateProcessing       IctWithdrawalStateState = "PROCESSING"
	IctWithdrawalStateStatePendingReview    IctWithdrawalStateState = "PENDING_REVIEW"
	IctWithdrawalStateStatePosted           IctWithdrawalStateState = "POSTED"
	IctWithdrawalStateStateCompleted        IctWithdrawalStateState = "COMPLETED"
	IctWithdrawalStateStateRejected         IctWithdrawalStateState = "REJECTED"
	IctWithdrawalStateStateCanceled         IctWithdrawalStateState = "CANCELED"
	IctWithdrawalStateStateReturned         IctWithdrawalStateState = "RETURNED"
	IctWithdrawalStateStatePostponed        IctWithdrawalStateState = "POSTPONED"
)

func (e IctWithdrawalStateState) ToPointer() *IctWithdrawalStateState {
	return &e
}

// IctWithdrawalState - The state of the ICT withdrawal
type IctWithdrawalState struct {
	// The user or service that triggered the state update.
	Actor *string `json:"actor,omitempty"`
	// Additional description of the transfer state.
	Message *string `json:"message,omitempty"`
	// Additional metadata relating to the transfer state. Included data depends on the state, e.g.:
	//  - Rejection reasons are included when the `state` is `REJECTED`
	//  - Reason and comment are included when `state` is `CANCELED`
	Metadata map[string]any `json:"metadata,omitempty"`
	// The high level state of a transfer, one of:
	// - `PROCESSING` - The transfer is being processed and will be posted if successful.
	// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
	// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
	// - `COMPLETED` - The transfer has been batched and completed.
	// - `REJECTED` - The transfer was rejected.
	// - `CANCELED` - The transfer was canceled.
	// - `RETURNED` - The transfer was returned.
	// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
	State *IctWithdrawalStateState `json:"state,omitempty"`
	// The time of the state update.
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

func (i IctWithdrawalState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IctWithdrawalState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *IctWithdrawalState) GetActor() *string {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *IctWithdrawalState) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *IctWithdrawalState) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *IctWithdrawalState) GetState() *IctWithdrawalStateState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *IctWithdrawalState) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

// IctWithdrawalTransferStateState - The high level state of a transfer, one of:
// - `PROCESSING` - The transfer is being processed and will be posted if successful.
// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
// - `COMPLETED` - The transfer has been batched and completed.
// - `REJECTED` - The transfer was rejected.
// - `CANCELED` - The transfer was canceled.
// - `RETURNED` - The transfer was returned.
// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
type IctWithdrawalTransferStateState string

const (
	IctWithdrawalTransferStateStateStateUnspecified IctWithdrawalTransferStateState = "STATE_UNSPECIFIED"
	IctWithdrawalTransferStateStateProcessing       IctWithdrawalTransferStateState = "PROCESSING"
	IctWithdrawalTransferStateStatePendingReview    IctWithdrawalTransferStateState = "PENDING_REVIEW"
	IctWithdrawalTransferStateStatePosted           IctWithdrawalTransferStateState = "POSTED"
	IctWithdrawalTransferStateStateCompleted        IctWithdrawalTransferStateState = "COMPLETED"
	IctWithdrawalTransferStateStateRejected         IctWithdrawalTransferStateState = "REJECTED"
	IctWithdrawalTransferStateStateCanceled         IctWithdrawalTransferStateState = "CANCELED"
	IctWithdrawalTransferStateStateReturned         IctWithdrawalTransferStateState = "RETURNED"
	IctWithdrawalTransferStateStatePostponed        IctWithdrawalTransferStateState = "POSTPONED"
)

func (e IctWithdrawalTransferStateState) ToPointer() *IctWithdrawalTransferStateState {
	return &e
}

// IctWithdrawalTransferState - Deprecated, use state instead
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type IctWithdrawalTransferState struct {
	// The user or service that triggered the state update.
	Actor *string `json:"actor,omitempty"`
	// Additional description of the transfer state.
	Message *string `json:"message,omitempty"`
	// Additional metadata relating to the transfer state. Included data depends on the state, e.g.:
	//  - Rejection reasons are included when the `state` is `REJECTED`
	//  - Reason and comment are included when `state` is `CANCELED`
	Metadata map[string]any `json:"metadata,omitempty"`
	// The high level state of a transfer, one of:
	// - `PROCESSING` - The transfer is being processed and will be posted if successful.
	// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
	// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
	// - `COMPLETED` - The transfer has been batched and completed.
	// - `REJECTED` - The transfer was rejected.
	// - `CANCELED` - The transfer was canceled.
	// - `RETURNED` - The transfer was returned.
	// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
	State *IctWithdrawalTransferStateState `json:"state,omitempty"`
	// The time of the state update.
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

func (i IctWithdrawalTransferState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IctWithdrawalTransferState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *IctWithdrawalTransferState) GetActor() *string {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *IctWithdrawalTransferState) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *IctWithdrawalTransferState) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *IctWithdrawalTransferState) GetState() *IctWithdrawalTransferStateState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *IctWithdrawalTransferState) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

// IctWithdrawalAddress - The address of the entity
type IctWithdrawalAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *IctWithdrawalAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *IctWithdrawalAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *IctWithdrawalAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *IctWithdrawalAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *IctWithdrawalAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *IctWithdrawalAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *IctWithdrawalAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *IctWithdrawalAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *IctWithdrawalAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *IctWithdrawalAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *IctWithdrawalAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// IctWithdrawalEntityOriginatingParty - An entity originating party
type IctWithdrawalEntityOriginatingParty struct {
	// The address of the entity
	Address *IctWithdrawalAddress `json:"address,omitempty"`
	// The tax identification number of the entity
	TaxID *string `json:"tax_id,omitempty"`
	// The name of the entity
	Title *string `json:"title,omitempty"`
}

func (o *IctWithdrawalEntityOriginatingParty) GetAddress() *IctWithdrawalAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *IctWithdrawalEntityOriginatingParty) GetTaxID() *string {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *IctWithdrawalEntityOriginatingParty) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

// IctWithdrawalTravelRuleAddress - The address of the entity
type IctWithdrawalTravelRuleAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *IctWithdrawalTravelRuleAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *IctWithdrawalTravelRuleAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *IctWithdrawalTravelRuleAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *IctWithdrawalTravelRuleAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *IctWithdrawalTravelRuleAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *IctWithdrawalTravelRuleAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *IctWithdrawalTravelRuleAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *IctWithdrawalTravelRuleAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *IctWithdrawalTravelRuleAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *IctWithdrawalTravelRuleAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *IctWithdrawalTravelRuleAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// IctWithdrawalEntityRecipientParty - An entity originating party
type IctWithdrawalEntityRecipientParty struct {
	// The address of the entity
	Address *IctWithdrawalTravelRuleAddress `json:"address,omitempty"`
	// The tax identification number of the entity
	TaxID *string `json:"tax_id,omitempty"`
	// The name of the entity
	Title *string `json:"title,omitempty"`
}

func (o *IctWithdrawalEntityRecipientParty) GetAddress() *IctWithdrawalTravelRuleAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *IctWithdrawalEntityRecipientParty) GetTaxID() *string {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *IctWithdrawalEntityRecipientParty) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

// IctWithdrawalTravelRuleIndividualOriginatingPartyAddress - The address of the party
type IctWithdrawalTravelRuleIndividualOriginatingPartyAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// IctWithdrawalIndividualOriginatingParty - An individual originating party
type IctWithdrawalIndividualOriginatingParty struct {
	// The address of the party
	Address *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress `json:"address,omitempty"`
	// The last name of the party
	FamilyName *string `json:"family_name,omitempty"`
	// The first name of the party as well as any non-primary given names (e.g. middle names)
	GivenNames []string `json:"given_names,omitempty"`
}

func (o *IctWithdrawalIndividualOriginatingParty) GetAddress() *IctWithdrawalTravelRuleIndividualOriginatingPartyAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *IctWithdrawalIndividualOriginatingParty) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *IctWithdrawalIndividualOriginatingParty) GetGivenNames() []string {
	if o == nil {
		return nil
	}
	return o.GivenNames
}

// IctWithdrawalTravelRuleIndividualRecipientPartyAddress - The address of the party
type IctWithdrawalTravelRuleIndividualRecipientPartyAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. Côte d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *IctWithdrawalTravelRuleIndividualRecipientPartyAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *IctWithdrawalTravelRuleIndividualRecipientPartyAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *IctWithdrawalTravelRuleIndividualRecipientPartyAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *IctWithdrawalTravelRuleIndividualRecipientPartyAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *IctWithdrawalTravelRuleIndividualRecipientPartyAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *IctWithdrawalTravelRuleIndividualRecipientPartyAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *IctWithdrawalTravelRuleIndividualRecipientPartyAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *IctWithdrawalTravelRuleIndividualRecipientPartyAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *IctWithdrawalTravelRuleIndividualRecipientPartyAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *IctWithdrawalTravelRuleIndividualRecipientPartyAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *IctWithdrawalTravelRuleIndividualRecipientPartyAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// IctWithdrawalIndividualRecipientParty - An individual recipient party
type IctWithdrawalIndividualRecipientParty struct {
	// The address of the party
	Address *IctWithdrawalTravelRuleIndividualRecipientPartyAddress `json:"address,omitempty"`
	// The last name of the party
	FamilyName *string `json:"family_name,omitempty"`
	// The first name of the party as well as any non-primary given names (e.g. middle names)
	GivenNames []string `json:"given_names,omitempty"`
}

func (o *IctWithdrawalIndividualRecipientParty) GetAddress() *IctWithdrawalTravelRuleIndividualRecipientPartyAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *IctWithdrawalIndividualRecipientParty) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *IctWithdrawalIndividualRecipientParty) GetGivenNames() []string {
	if o == nil {
		return nil
	}
	return o.GivenNames
}

// IctWithdrawalOriginatingInstitution - The name and account id of institution sourcing the funds. Always 'Apex Clearing' and investor account id for ICT withdrawals;
type IctWithdrawalOriginatingInstitution struct {
	// Account id at institution
	AccountID *string `json:"account_id,omitempty"`
	// Name of the institution
	Title *string `json:"title,omitempty"`
}

func (o *IctWithdrawalOriginatingInstitution) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *IctWithdrawalOriginatingInstitution) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

// IctWithdrawalRecipientInstitution - The name and account id of the external financial institution that will take receipt of the funds.
type IctWithdrawalRecipientInstitution struct {
	// Account id at institution
	AccountID *string `json:"account_id,omitempty"`
	// Name of the institution
	Title *string `json:"title,omitempty"`
}

func (o *IctWithdrawalRecipientInstitution) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *IctWithdrawalRecipientInstitution) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

// IctWithdrawalTravelRule - The travel rule information for the ICT withdrawal
type IctWithdrawalTravelRule struct {
	// An entity originating party
	EntityOriginatingParty *IctWithdrawalEntityOriginatingParty `json:"entity_originating_party,omitempty"`
	// An entity originating party
	EntityRecipientParty *IctWithdrawalEntityRecipientParty `json:"entity_recipient_party,omitempty"`
	// An individual originating party
	IndividualOriginatingParty *IctWithdrawalIndividualOriginatingParty `json:"individual_originating_party,omitempty"`
	// An individual recipient party
	IndividualRecipientParty *IctWithdrawalIndividualRecipientParty `json:"individual_recipient_party,omitempty"`
	// The name and account id of institution sourcing the funds. Always 'Apex Clearing' and investor account id for ICT withdrawals;
	OriginatingInstitution *IctWithdrawalOriginatingInstitution `json:"originating_institution,omitempty"`
	// The name and account id of the external financial institution that will take receipt of the funds.
	RecipientInstitution *IctWithdrawalRecipientInstitution `json:"recipient_institution,omitempty"`
}

func (o *IctWithdrawalTravelRule) GetEntityOriginatingParty() *IctWithdrawalEntityOriginatingParty {
	if o == nil {
		return nil
	}
	return o.EntityOriginatingParty
}

func (o *IctWithdrawalTravelRule) GetEntityRecipientParty() *IctWithdrawalEntityRecipientParty {
	if o == nil {
		return nil
	}
	return o.EntityRecipientParty
}

func (o *IctWithdrawalTravelRule) GetIndividualOriginatingParty() *IctWithdrawalIndividualOriginatingParty {
	if o == nil {
		return nil
	}
	return o.IndividualOriginatingParty
}

func (o *IctWithdrawalTravelRule) GetIndividualRecipientParty() *IctWithdrawalIndividualRecipientParty {
	if o == nil {
		return nil
	}
	return o.IndividualRecipientParty
}

func (o *IctWithdrawalTravelRule) GetOriginatingInstitution() *IctWithdrawalOriginatingInstitution {
	if o == nil {
		return nil
	}
	return o.OriginatingInstitution
}

func (o *IctWithdrawalTravelRule) GetRecipientInstitution() *IctWithdrawalRecipientInstitution {
	if o == nil {
		return nil
	}
	return o.RecipientInstitution
}

// IctWithdrawal - An Instant Cash Transfer. Funds are moved from a customer's brokerage account to a configured Firm account.
type IctWithdrawal struct {
	// The amount of the transfer being withdrawn from the customer's account in USD. A value should not be provided if the withdrawal is a full disbursement.
	Amount *IctWithdrawalAmount `json:"amount,omitempty"`
	// External identifier supplied by the API caller. Each request must have a unique pairing of client_transfer_id and account.
	ClientTransferID *string `json:"client_transfer_id,omitempty"`
	// Full name of the ICT withdrawal resource, which contains account id and ICT withdrawal id
	Name *string `json:"name,omitempty"`
	// The name of the program that the ICT withdrawal is associated with.
	Program *IctWithdrawalProgram `json:"program,omitempty"`
	// Retirement distribution details for withdrawal from retirement account
	RetirementDistribution *IctWithdrawalRetirementDistribution `json:"retirement_distribution,omitempty"`
	// The state of the ICT withdrawal
	State *IctWithdrawalState `json:"state,omitempty"`
	// Deprecated, use state instead
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	TransferState *IctWithdrawalTransferState `json:"transfer_state,omitempty"`
	// The travel rule information for the ICT withdrawal
	TravelRule *IctWithdrawalTravelRule `json:"travel_rule,omitempty"`
}

func (o *IctWithdrawal) GetAmount() *IctWithdrawalAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *IctWithdrawal) GetClientTransferID() *string {
	if o == nil {
		return nil
	}
	return o.ClientTransferID
}

func (o *IctWithdrawal) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *IctWithdrawal) GetProgram() *IctWithdrawalProgram {
	if o == nil {
		return nil
	}
	return o.Program
}

func (o *IctWithdrawal) GetRetirementDistribution() *IctWithdrawalRetirementDistribution {
	if o == nil {
		return nil
	}
	return o.RetirementDistribution
}

func (o *IctWithdrawal) GetState() *IctWithdrawalState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *IctWithdrawal) GetTransferState() *IctWithdrawalTransferState {
	if o == nil {
		return nil
	}
	return o.TransferState
}

func (o *IctWithdrawal) GetTravelRule() *IctWithdrawalTravelRule {
	if o == nil {
		return nil
	}
	return o.TravelRule
}
