// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// RebookTradeResponseBrokerCapacity - Used to calculate broadridge blotter code
type RebookTradeResponseBrokerCapacity string

const (
	RebookTradeResponseBrokerCapacityCapacityUnspecified RebookTradeResponseBrokerCapacity = "CAPACITY_UNSPECIFIED"
	RebookTradeResponseBrokerCapacityAgency              RebookTradeResponseBrokerCapacity = "AGENCY"
	RebookTradeResponseBrokerCapacityPrincipal           RebookTradeResponseBrokerCapacity = "PRINCIPAL"
	RebookTradeResponseBrokerCapacityMixed               RebookTradeResponseBrokerCapacity = "MIXED"
)

func (e RebookTradeResponseBrokerCapacity) ToPointer() *RebookTradeResponseBrokerCapacity {
	return &e
}

// RebookTradeResponsePrevailingMarketPrice - The price for the instrument that is prevailing in the market.
type RebookTradeResponsePrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeResponsePrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeResponsePriceAdjustmentAmount - Total monetary value of the price_adjustment
type RebookTradeResponsePriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeResponsePriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeResponsePriceAdjustmentPercent - The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
type RebookTradeResponsePriceAdjustmentPercent struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeResponsePriceAdjustmentPercent) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeResponsePriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security
type RebookTradeResponsePriceAdjustmentType string

const (
	RebookTradeResponsePriceAdjustmentTypePriceAdjustmentTypeUnspecified RebookTradeResponsePriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	RebookTradeResponsePriceAdjustmentTypeMarkup                         RebookTradeResponsePriceAdjustmentType = "MARKUP"
	RebookTradeResponsePriceAdjustmentTypeMarkdown                       RebookTradeResponsePriceAdjustmentType = "MARKDOWN"
	RebookTradeResponsePriceAdjustmentTypeSalesLoad                      RebookTradeResponsePriceAdjustmentType = "SALES_LOAD"
)

func (e RebookTradeResponsePriceAdjustmentType) ToPointer() *RebookTradeResponsePriceAdjustmentType {
	return &e
}

// RebookTradeResponsePriceAdjustmentRecord - Information about any price adjustments applied to the security
type RebookTradeResponsePriceAdjustmentRecord struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *RebookTradeResponsePriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
	PriceAdjustmentPercent *RebookTradeResponsePriceAdjustmentPercent `json:"price_adjustment_percent,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security
	PriceAdjustmentType *RebookTradeResponsePriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *RebookTradeResponsePriceAdjustmentRecord) GetPriceAdjustmentAmount() *RebookTradeResponsePriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *RebookTradeResponsePriceAdjustmentRecord) GetPriceAdjustmentPercent() *RebookTradeResponsePriceAdjustmentPercent {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentPercent
}

func (o *RebookTradeResponsePriceAdjustmentRecord) GetPriceAdjustmentType() *RebookTradeResponsePriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// NewTrade - The new trade that is booked.
type NewTrade struct {
	// Free form text field containing additional information for a trade
	AdditionalInstructions []string `json:"additional_instructions,omitempty"`
	// Max Length 100 characters. Alternate order id from the street used for FRAC trades
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// uuid assigned by the Booking API if a trade belongs to an allocation
	BookingAPITradeAllocationID *string `json:"booking_api_trade_allocation_id,omitempty"`
	// uuid assigned by the Booking API to all trades
	BookingAPITradeID *string `json:"booking_api_trade_id,omitempty"`
	// Executing broker of the trade
	Broker *string `json:"broker,omitempty"`
	// Used to calculate broadridge blotter code
	BrokerCapacity *RebookTradeResponseBrokerCapacity `json:"broker_capacity,omitempty"`
	// Free form text submitted by the client for internal purposes
	ClientMemos []string `json:"client_memos,omitempty"`
	// 32 characters. The client order ID from the order submitted
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// MIC code for the exchange
	Exchange *string `json:"exchange,omitempty"`
	// Execution id from the street
	ExecutionID *string `json:"execution_id,omitempty"`
	// Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
	ExecutionOnly *bool `json:"execution_only,omitempty"`
	// Max Length 100 characters. External system id provided by a client
	ExternalID *string `json:"external_id,omitempty"`
	// The confirmation number associated with a mutual fund trade
	FundConfirmationNumber *string `json:"fund_confirmation_number,omitempty"`
	// Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
	GatewayClientOrderID *string `json:"gateway_client_order_id,omitempty"`
	// If set to true, indicates the trade should be omitted from client billing
	InternalError *bool `json:"internal_error,omitempty"`
	// Set on penny-for-the-lot trades
	IsWriteoff *bool `json:"is_writeoff,omitempty"`
	// Repeated record containing information about the tax lots, if specified
	Lots []Lot `json:"lots,omitempty"`
	// Max Length 100 characters. Internally generated order id that is returned to client on exec reports
	OrderID *string `json:"order_id,omitempty"`
	// The price for the instrument that is prevailing in the market.
	PrevailingMarketPrice *RebookTradeResponsePrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Information about any price adjustments applied to the security
	PriceAdjustmentRecord *RebookTradeResponsePriceAdjustmentRecord `json:"price_adjustment_record,omitempty"`
	// Used to calculate broadridge blotter code
	Route *string `json:"route,omitempty"`
	// The special instructions for a trade
	SpecialInstructions []string `json:"special_instructions,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the particular issue
	SymbolDescription *string `json:"symbol_description,omitempty"`
	// Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
	WhenIssued *bool `json:"when_issued,omitempty"`
	// The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
	YieldRecords []YieldRecord `json:"yield_records,omitempty"`
}

func (o *NewTrade) GetAdditionalInstructions() []string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *NewTrade) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *NewTrade) GetBookingAPITradeAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeAllocationID
}

func (o *NewTrade) GetBookingAPITradeID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeID
}

func (o *NewTrade) GetBroker() *string {
	if o == nil {
		return nil
	}
	return o.Broker
}

func (o *NewTrade) GetBrokerCapacity() *RebookTradeResponseBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *NewTrade) GetClientMemos() []string {
	if o == nil {
		return nil
	}
	return o.ClientMemos
}

func (o *NewTrade) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *NewTrade) GetExchange() *string {
	if o == nil {
		return nil
	}
	return o.Exchange
}

func (o *NewTrade) GetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionID
}

func (o *NewTrade) GetExecutionOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ExecutionOnly
}

func (o *NewTrade) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *NewTrade) GetFundConfirmationNumber() *string {
	if o == nil {
		return nil
	}
	return o.FundConfirmationNumber
}

func (o *NewTrade) GetGatewayClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.GatewayClientOrderID
}

func (o *NewTrade) GetInternalError() *bool {
	if o == nil {
		return nil
	}
	return o.InternalError
}

func (o *NewTrade) GetIsWriteoff() *bool {
	if o == nil {
		return nil
	}
	return o.IsWriteoff
}

func (o *NewTrade) GetLots() []Lot {
	if o == nil {
		return nil
	}
	return o.Lots
}

func (o *NewTrade) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *NewTrade) GetPrevailingMarketPrice() *RebookTradeResponsePrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *NewTrade) GetPriceAdjustmentRecord() *RebookTradeResponsePriceAdjustmentRecord {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentRecord
}

func (o *NewTrade) GetRoute() *string {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *NewTrade) GetSpecialInstructions() []string {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *NewTrade) GetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.SymbolDescription
}

func (o *NewTrade) GetWhenIssued() *bool {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

func (o *NewTrade) GetYieldRecords() []YieldRecord {
	if o == nil {
		return nil
	}
	return o.YieldRecords
}

// RebookTradeResponseOriginalTradeBrokerCapacity - Used to calculate broadridge blotter code
type RebookTradeResponseOriginalTradeBrokerCapacity string

const (
	RebookTradeResponseOriginalTradeBrokerCapacityCapacityUnspecified RebookTradeResponseOriginalTradeBrokerCapacity = "CAPACITY_UNSPECIFIED"
	RebookTradeResponseOriginalTradeBrokerCapacityAgency              RebookTradeResponseOriginalTradeBrokerCapacity = "AGENCY"
	RebookTradeResponseOriginalTradeBrokerCapacityPrincipal           RebookTradeResponseOriginalTradeBrokerCapacity = "PRINCIPAL"
	RebookTradeResponseOriginalTradeBrokerCapacityMixed               RebookTradeResponseOriginalTradeBrokerCapacity = "MIXED"
)

func (e RebookTradeResponseOriginalTradeBrokerCapacity) ToPointer() *RebookTradeResponseOriginalTradeBrokerCapacity {
	return &e
}

// RebookTradeResponseOriginalTradePrevailingMarketPrice - The price for the instrument that is prevailing in the market.
type RebookTradeResponseOriginalTradePrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeResponseOriginalTradePrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeResponseOriginalTradePriceAdjustmentAmount - Total monetary value of the price_adjustment
type RebookTradeResponseOriginalTradePriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeResponseOriginalTradePriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeResponseOriginalTradePriceAdjustmentPercent - The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
type RebookTradeResponseOriginalTradePriceAdjustmentPercent struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RebookTradeResponseOriginalTradePriceAdjustmentPercent) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RebookTradeResponseOriginalTradePriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security
type RebookTradeResponseOriginalTradePriceAdjustmentType string

const (
	RebookTradeResponseOriginalTradePriceAdjustmentTypePriceAdjustmentTypeUnspecified RebookTradeResponseOriginalTradePriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	RebookTradeResponseOriginalTradePriceAdjustmentTypeMarkup                         RebookTradeResponseOriginalTradePriceAdjustmentType = "MARKUP"
	RebookTradeResponseOriginalTradePriceAdjustmentTypeMarkdown                       RebookTradeResponseOriginalTradePriceAdjustmentType = "MARKDOWN"
	RebookTradeResponseOriginalTradePriceAdjustmentTypeSalesLoad                      RebookTradeResponseOriginalTradePriceAdjustmentType = "SALES_LOAD"
)

func (e RebookTradeResponseOriginalTradePriceAdjustmentType) ToPointer() *RebookTradeResponseOriginalTradePriceAdjustmentType {
	return &e
}

// RebookTradeResponseOriginalTradePriceAdjustmentRecord - Information about any price adjustments applied to the security
type RebookTradeResponseOriginalTradePriceAdjustmentRecord struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *RebookTradeResponseOriginalTradePriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
	PriceAdjustmentPercent *RebookTradeResponseOriginalTradePriceAdjustmentPercent `json:"price_adjustment_percent,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security
	PriceAdjustmentType *RebookTradeResponseOriginalTradePriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *RebookTradeResponseOriginalTradePriceAdjustmentRecord) GetPriceAdjustmentAmount() *RebookTradeResponseOriginalTradePriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *RebookTradeResponseOriginalTradePriceAdjustmentRecord) GetPriceAdjustmentPercent() *RebookTradeResponseOriginalTradePriceAdjustmentPercent {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentPercent
}

func (o *RebookTradeResponseOriginalTradePriceAdjustmentRecord) GetPriceAdjustmentType() *RebookTradeResponseOriginalTradePriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// OriginalTrade - The original trade that was rebooked.
type OriginalTrade struct {
	// Free form text field containing additional information for a trade
	AdditionalInstructions []string `json:"additional_instructions,omitempty"`
	// Max Length 100 characters. Alternate order id from the street used for FRAC trades
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// uuid assigned by the Booking API if a trade belongs to an allocation
	BookingAPITradeAllocationID *string `json:"booking_api_trade_allocation_id,omitempty"`
	// uuid assigned by the Booking API to all trades
	BookingAPITradeID *string `json:"booking_api_trade_id,omitempty"`
	// Executing broker of the trade
	Broker *string `json:"broker,omitempty"`
	// Used to calculate broadridge blotter code
	BrokerCapacity *RebookTradeResponseOriginalTradeBrokerCapacity `json:"broker_capacity,omitempty"`
	// Free form text submitted by the client for internal purposes
	ClientMemos []string `json:"client_memos,omitempty"`
	// 32 characters. The client order ID from the order submitted
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// MIC code for the exchange
	Exchange *string `json:"exchange,omitempty"`
	// Execution id from the street
	ExecutionID *string `json:"execution_id,omitempty"`
	// Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
	ExecutionOnly *bool `json:"execution_only,omitempty"`
	// Max Length 100 characters. External system id provided by a client
	ExternalID *string `json:"external_id,omitempty"`
	// The confirmation number associated with a mutual fund trade
	FundConfirmationNumber *string `json:"fund_confirmation_number,omitempty"`
	// Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
	GatewayClientOrderID *string `json:"gateway_client_order_id,omitempty"`
	// If set to true, indicates the trade should be omitted from client billing
	InternalError *bool `json:"internal_error,omitempty"`
	// Set on penny-for-the-lot trades
	IsWriteoff *bool `json:"is_writeoff,omitempty"`
	// Repeated record containing information about the tax lots, if specified
	Lots []Lot `json:"lots,omitempty"`
	// Max Length 100 characters. Internally generated order id that is returned to client on exec reports
	OrderID *string `json:"order_id,omitempty"`
	// The price for the instrument that is prevailing in the market.
	PrevailingMarketPrice *RebookTradeResponseOriginalTradePrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Information about any price adjustments applied to the security
	PriceAdjustmentRecord *RebookTradeResponseOriginalTradePriceAdjustmentRecord `json:"price_adjustment_record,omitempty"`
	// Used to calculate broadridge blotter code
	Route *string `json:"route,omitempty"`
	// The special instructions for a trade
	SpecialInstructions []string `json:"special_instructions,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the particular issue
	SymbolDescription *string `json:"symbol_description,omitempty"`
	// Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
	WhenIssued *bool `json:"when_issued,omitempty"`
	// The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
	YieldRecords []YieldRecord `json:"yield_records,omitempty"`
}

func (o *OriginalTrade) GetAdditionalInstructions() []string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *OriginalTrade) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *OriginalTrade) GetBookingAPITradeAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeAllocationID
}

func (o *OriginalTrade) GetBookingAPITradeID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeID
}

func (o *OriginalTrade) GetBroker() *string {
	if o == nil {
		return nil
	}
	return o.Broker
}

func (o *OriginalTrade) GetBrokerCapacity() *RebookTradeResponseOriginalTradeBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *OriginalTrade) GetClientMemos() []string {
	if o == nil {
		return nil
	}
	return o.ClientMemos
}

func (o *OriginalTrade) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *OriginalTrade) GetExchange() *string {
	if o == nil {
		return nil
	}
	return o.Exchange
}

func (o *OriginalTrade) GetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionID
}

func (o *OriginalTrade) GetExecutionOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ExecutionOnly
}

func (o *OriginalTrade) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *OriginalTrade) GetFundConfirmationNumber() *string {
	if o == nil {
		return nil
	}
	return o.FundConfirmationNumber
}

func (o *OriginalTrade) GetGatewayClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.GatewayClientOrderID
}

func (o *OriginalTrade) GetInternalError() *bool {
	if o == nil {
		return nil
	}
	return o.InternalError
}

func (o *OriginalTrade) GetIsWriteoff() *bool {
	if o == nil {
		return nil
	}
	return o.IsWriteoff
}

func (o *OriginalTrade) GetLots() []Lot {
	if o == nil {
		return nil
	}
	return o.Lots
}

func (o *OriginalTrade) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *OriginalTrade) GetPrevailingMarketPrice() *RebookTradeResponseOriginalTradePrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *OriginalTrade) GetPriceAdjustmentRecord() *RebookTradeResponseOriginalTradePriceAdjustmentRecord {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentRecord
}

func (o *OriginalTrade) GetRoute() *string {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *OriginalTrade) GetSpecialInstructions() []string {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *OriginalTrade) GetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.SymbolDescription
}

func (o *OriginalTrade) GetWhenIssued() *bool {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

func (o *OriginalTrade) GetYieldRecords() []YieldRecord {
	if o == nil {
		return nil
	}
	return o.YieldRecords
}

// RebookTradeResponse - A response for the rebook trade method.
type RebookTradeResponse struct {
	// The new trade that is booked.
	NewTrade *NewTrade `json:"new_trade,omitempty"`
	// The original trade that was rebooked.
	OriginalTrade *OriginalTrade `json:"original_trade,omitempty"`
}

func (o *RebookTradeResponse) GetNewTrade() *NewTrade {
	if o == nil {
		return nil
	}
	return o.NewTrade
}

func (o *RebookTradeResponse) GetOriginalTrade() *OriginalTrade {
	if o == nil {
		return nil
	}
	return o.OriginalTrade
}
