// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// RebookTradeResponseAssetType - Type of the asset being traded.
type RebookTradeResponseAssetType string

const (
	RebookTradeResponseAssetTypeAssetTypeUnspecified RebookTradeResponseAssetType = "ASSET_TYPE_UNSPECIFIED"
	RebookTradeResponseAssetTypeEquity               RebookTradeResponseAssetType = "EQUITY"
	RebookTradeResponseAssetTypeFixedIncome          RebookTradeResponseAssetType = "FIXED_INCOME"
)

func (e RebookTradeResponseAssetType) ToPointer() *RebookTradeResponseAssetType {
	return &e
}

// RebookTradeResponseBrokerCapacity - Broker capacity for the trade.
type RebookTradeResponseBrokerCapacity string

const (
	RebookTradeResponseBrokerCapacityCapacityUnspecified RebookTradeResponseBrokerCapacity = "CAPACITY_UNSPECIFIED"
	RebookTradeResponseBrokerCapacityAgency              RebookTradeResponseBrokerCapacity = "AGENCY"
	RebookTradeResponseBrokerCapacityPrincipal           RebookTradeResponseBrokerCapacity = "PRINCIPAL"
	RebookTradeResponseBrokerCapacityMixed               RebookTradeResponseBrokerCapacity = "MIXED"
)

func (e RebookTradeResponseBrokerCapacity) ToPointer() *RebookTradeResponseBrokerCapacity {
	return &e
}

// RebookTradeResponseIdentifierType - Identifier type for the asset being traded.
type RebookTradeResponseIdentifierType string

const (
	RebookTradeResponseIdentifierTypeIdentifierTypeUnspecified RebookTradeResponseIdentifierType = "IDENTIFIER_TYPE_UNSPECIFIED"
	RebookTradeResponseIdentifierTypeAssetID                   RebookTradeResponseIdentifierType = "ASSET_ID"
	RebookTradeResponseIdentifierTypeSymbol                    RebookTradeResponseIdentifierType = "SYMBOL"
	RebookTradeResponseIdentifierTypeCusip                     RebookTradeResponseIdentifierType = "CUSIP"
	RebookTradeResponseIdentifierTypeIsin                      RebookTradeResponseIdentifierType = "ISIN"
)

func (e RebookTradeResponseIdentifierType) ToPointer() *RebookTradeResponseIdentifierType {
	return &e
}

// RebookTradeResponseLocalMarketTradeDate - Date field to support extended trading hours.
type RebookTradeResponseLocalMarketTradeDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *RebookTradeResponseLocalMarketTradeDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *RebookTradeResponseLocalMarketTradeDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *RebookTradeResponseLocalMarketTradeDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// RebookTradeResponseRouteType - Route type for the trade.
type RebookTradeResponseRouteType string

const (
	RebookTradeResponseRouteTypeRouteTypeUnspecified RebookTradeResponseRouteType = "ROUTE_TYPE_UNSPECIFIED"
	RebookTradeResponseRouteTypeDma                  RebookTradeResponseRouteType = "DMA"
	RebookTradeResponseRouteTypeMngd                 RebookTradeResponseRouteType = "MNGD"
	RebookTradeResponseRouteTypeQuik                 RebookTradeResponseRouteType = "QUIK"
	RebookTradeResponseRouteTypeAlgo                 RebookTradeResponseRouteType = "ALGO"
	RebookTradeResponseRouteTypeAway                 RebookTradeResponseRouteType = "AWAY"
	RebookTradeResponseRouteTypeCorr                 RebookTradeResponseRouteType = "CORR"
	RebookTradeResponseRouteTypeBoats                RebookTradeResponseRouteType = "BOATS"
)

func (e RebookTradeResponseRouteType) ToPointer() *RebookTradeResponseRouteType {
	return &e
}

// RebookTradeResponseSettlementDate - Defaults to T+1 for equities if this is not provided. Calculated by the execution's execution_time field in Eastern Time.
type RebookTradeResponseSettlementDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *RebookTradeResponseSettlementDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *RebookTradeResponseSettlementDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *RebookTradeResponseSettlementDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// RebookTradeResponseSide - Denotes if the trade is a SELL or a BUY.
type RebookTradeResponseSide string

const (
	RebookTradeResponseSideSideUnspecified RebookTradeResponseSide = "SIDE_UNSPECIFIED"
	RebookTradeResponseSideBuy             RebookTradeResponseSide = "BUY"
	RebookTradeResponseSideSell            RebookTradeResponseSide = "SELL"
)

func (e RebookTradeResponseSide) ToPointer() *RebookTradeResponseSide {
	return &e
}

// RebookTradeResponseSideModifier - Side modifier for the trade.
type RebookTradeResponseSideModifier string

const (
	RebookTradeResponseSideModifierSideModifierUnspecified RebookTradeResponseSideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	RebookTradeResponseSideModifierShort                   RebookTradeResponseSideModifier = "SHORT"
	RebookTradeResponseSideModifierShortExempt             RebookTradeResponseSideModifier = "SHORT_EXEMPT"
	RebookTradeResponseSideModifierShortCover              RebookTradeResponseSideModifier = "SHORT_COVER"
	RebookTradeResponseSideModifierOpen                    RebookTradeResponseSideModifier = "OPEN"
	RebookTradeResponseSideModifierClose                   RebookTradeResponseSideModifier = "CLOSE"
)

func (e RebookTradeResponseSideModifier) ToPointer() *RebookTradeResponseSideModifier {
	return &e
}

type RebookTradeResponseSpecialInstructions string

const (
	RebookTradeResponseSpecialInstructionsSpecialInstructionsUnspecified RebookTradeResponseSpecialInstructions = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
	RebookTradeResponseSpecialInstructionsRule144                        RebookTradeResponseSpecialInstructions = "RULE_144"
	RebookTradeResponseSpecialInstructionsWithDividend                   RebookTradeResponseSpecialInstructions = "WITH_DIVIDEND"
	RebookTradeResponseSpecialInstructionsWithRights                     RebookTradeResponseSpecialInstructions = "WITH_RIGHTS"
	RebookTradeResponseSpecialInstructionsCloseContract                  RebookTradeResponseSpecialInstructions = "CLOSE_CONTRACT"
	RebookTradeResponseSpecialInstructionsCoverShort                     RebookTradeResponseSpecialInstructions = "COVER_SHORT"
	RebookTradeResponseSpecialInstructionsCrossTrade                     RebookTradeResponseSpecialInstructions = "CROSS_TRADE"
	RebookTradeResponseSpecialInstructionsOpenContractCovered            RebookTradeResponseSpecialInstructions = "OPEN_CONTRACT_COVERED"
	RebookTradeResponseSpecialInstructionsDiscretionExercised            RebookTradeResponseSpecialInstructions = "DISCRETION_EXERCISED"
	RebookTradeResponseSpecialInstructionsDiscretionNotExercised         RebookTradeResponseSpecialInstructions = "DISCRETION_NOT_EXERCISED"
	RebookTradeResponseSpecialInstructionsOptionAssignment               RebookTradeResponseSpecialInstructions = "OPTION_ASSIGNMENT"
	RebookTradeResponseSpecialInstructionsEmployeeStockOption            RebookTradeResponseSpecialInstructions = "EMPLOYEE_STOCK_OPTION"
	RebookTradeResponseSpecialInstructionsInvestmentBanking              RebookTradeResponseSpecialInstructions = "INVESTMENT_BANKING"
	RebookTradeResponseSpecialInstructionsBrokerDealerOrder              RebookTradeResponseSpecialInstructions = "BROKER_DEALER_ORDER"
	RebookTradeResponseSpecialInstructionsMakeMarketInSecurity           RebookTradeResponseSpecialInstructions = "MAKE_MARKET_IN_SECURITY"
	RebookTradeResponseSpecialInstructionsMakeMarketSolicited            RebookTradeResponseSpecialInstructions = "MAKE_MARKET_SOLICITED"
	RebookTradeResponseSpecialInstructionsMakeMarketUnsolicited          RebookTradeResponseSpecialInstructions = "MAKE_MARKET_UNSOLICITED"
	RebookTradeResponseSpecialInstructionsCustomerDirected               RebookTradeResponseSpecialInstructions = "CUSTOMER_DIRECTED"
	RebookTradeResponseSpecialInstructionsFullyRegistered                RebookTradeResponseSpecialInstructions = "FULLY_REGISTERED"
	RebookTradeResponseSpecialInstructionsOpenContract                   RebookTradeResponseSpecialInstructions = "OPEN_CONTRACT"
	RebookTradeResponseSpecialInstructionsOddlotDiffOnRequest            RebookTradeResponseSpecialInstructions = "ODDLOT_DIFF_ON_REQUEST"
	RebookTradeResponseSpecialInstructionsProspectusEnclosed             RebookTradeResponseSpecialInstructions = "PROSPECTUS_ENCLOSED"
	RebookTradeResponseSpecialInstructionsProspectusSeparateMail         RebookTradeResponseSpecialInstructions = "PROSPECTUS_SEPARATE_MAIL"
	RebookTradeResponseSpecialInstructionsSolicited                      RebookTradeResponseSpecialInstructions = "SOLICITED"
	RebookTradeResponseSpecialInstructionsUnsolicited                    RebookTradeResponseSpecialInstructions = "UNSOLICITED"
	RebookTradeResponseSpecialInstructionsXDividend                      RebookTradeResponseSpecialInstructions = "X_DIVIDEND"
	RebookTradeResponseSpecialInstructionsActingAsPrincipal              RebookTradeResponseSpecialInstructions = "ACTING_AS_PRINCIPAL"
	RebookTradeResponseSpecialInstructionsAveragePrice                   RebookTradeResponseSpecialInstructions = "AVERAGE_PRICE"
	RebookTradeResponseSpecialInstructionsBrokerLiquidation              RebookTradeResponseSpecialInstructions = "BROKER_LIQUIDATION"
	RebookTradeResponseSpecialInstructionsCouponBooks                    RebookTradeResponseSpecialInstructions = "COUPON_BOOKS"
	RebookTradeResponseSpecialInstructionsHasPostageFee                  RebookTradeResponseSpecialInstructions = "HAS_POSTAGE_FEE"
	RebookTradeResponseSpecialInstructionsInternetOrder                  RebookTradeResponseSpecialInstructions = "INTERNET_ORDER"
	RebookTradeResponseSpecialInstructionsMarginSellout                  RebookTradeResponseSpecialInstructions = "MARGIN_SELLOUT"
	RebookTradeResponseSpecialInstructionsMarketMakersAsPrincipal        RebookTradeResponseSpecialInstructions = "MARKET_MAKERS_AS_PRINCIPAL"
	RebookTradeResponseSpecialInstructionsNegativeNetProceed             RebookTradeResponseSpecialInstructions = "NEGATIVE_NET_PROCEED"
	RebookTradeResponseSpecialInstructionsPreFigIndicator                RebookTradeResponseSpecialInstructions = "PRE_FIG_INDICATOR"
	RebookTradeResponseSpecialInstructionsRisklessPrincipalInstruction   RebookTradeResponseSpecialInstructions = "RISKLESS_PRINCIPAL_INSTRUCTION"
	RebookTradeResponseSpecialInstructionsShortInstruction               RebookTradeResponseSpecialInstructions = "SHORT_INSTRUCTION"
	RebookTradeResponseSpecialInstructionsThirdMarket                    RebookTradeResponseSpecialInstructions = "THIRD_MARKET"
	RebookTradeResponseSpecialInstructionsSuppressMsrbTransmission       RebookTradeResponseSpecialInstructions = "SUPPRESS_MSRB_TRANSMISSION"
	RebookTradeResponseSpecialInstructionsSuppressTraceReporting         RebookTradeResponseSpecialInstructions = "SUPPRESS_TRACE_REPORTING"
	RebookTradeResponseSpecialInstructionsSuppressEmailNotification      RebookTradeResponseSpecialInstructions = "SUPPRESS_EMAIL_NOTIFICATION"
	RebookTradeResponseSpecialInstructionsStockReward                    RebookTradeResponseSpecialInstructions = "STOCK_REWARD"
	RebookTradeResponseSpecialInstructionsSuppressRegFees                RebookTradeResponseSpecialInstructions = "SUPPRESS_REG_FEES"
	RebookTradeResponseSpecialInstructionsSuppressSecFee                 RebookTradeResponseSpecialInstructions = "SUPPRESS_SEC_FEE"
	RebookTradeResponseSpecialInstructionsSuppressTafFee                 RebookTradeResponseSpecialInstructions = "SUPPRESS_TAF_FEE"
	RebookTradeResponseSpecialInstructionsDividendReinvestment           RebookTradeResponseSpecialInstructions = "DIVIDEND_REINVESTMENT"
)

func (e RebookTradeResponseSpecialInstructions) ToPointer() *RebookTradeResponseSpecialInstructions {
	return &e
}

// RebookTradeResponseVenue - Exchange venue
type RebookTradeResponseVenue string

const (
	RebookTradeResponseVenueExchangeVenueUnspecified RebookTradeResponseVenue = "EXCHANGE_VENUE_UNSPECIFIED"
	RebookTradeResponseVenueAmex                     RebookTradeResponseVenue = "AMEX"
	RebookTradeResponseVenueArca                     RebookTradeResponseVenue = "ARCA"
	RebookTradeResponseVenueBats                     RebookTradeResponseVenue = "BATS"
	RebookTradeResponseVenueBatsByx                  RebookTradeResponseVenue = "BATS_BYX"
	RebookTradeResponseVenueBoston                   RebookTradeResponseVenue = "BOSTON"
	RebookTradeResponseVenueBox                      RebookTradeResponseVenue = "BOX"
	RebookTradeResponseVenueBzx                      RebookTradeResponseVenue = "BZX"
	RebookTradeResponseVenueC2                       RebookTradeResponseVenue = "C2"
	RebookTradeResponseVenueCboe                     RebookTradeResponseVenue = "CBOE"
	RebookTradeResponseVenueChicago                  RebookTradeResponseVenue = "CHICAGO"
	RebookTradeResponseVenueCincinnati               RebookTradeResponseVenue = "CINCINNATI"
	RebookTradeResponseVenueEdga                     RebookTradeResponseVenue = "EDGA"
	RebookTradeResponseVenueEdgx                     RebookTradeResponseVenue = "EDGX"
	RebookTradeResponseVenueExclearing               RebookTradeResponseVenue = "EXCLEARING"
	RebookTradeResponseVenueIex                      RebookTradeResponseVenue = "IEX"
	RebookTradeResponseVenueIse                      RebookTradeResponseVenue = "ISE"
	RebookTradeResponseVenueIseGemini                RebookTradeResponseVenue = "ISE_GEMINI"
	RebookTradeResponseVenueMiax                     RebookTradeResponseVenue = "MIAX"
	RebookTradeResponseVenueNasdaq                   RebookTradeResponseVenue = "NASDAQ"
	RebookTradeResponseVenueNasdaqOmxBx              RebookTradeResponseVenue = "NASDAQ_OMX_BX"
	RebookTradeResponseVenueNyse                     RebookTradeResponseVenue = "NYSE"
	RebookTradeResponseVenuePhlx                     RebookTradeResponseVenue = "PHLX"
	RebookTradeResponseVenueOtc                      RebookTradeResponseVenue = "OTC"
	RebookTradeResponseVenueQsr                      RebookTradeResponseVenue = "QSR"
)

func (e RebookTradeResponseVenue) ToPointer() *RebookTradeResponseVenue {
	return &e
}

// RebookTradeResponseWhenIssued - Denotes that this trade was either when_issued or when_distributed.
type RebookTradeResponseWhenIssued string

const (
	RebookTradeResponseWhenIssuedWhenIssuedTypeUnspecified RebookTradeResponseWhenIssued = "WHEN_ISSUED_TYPE_UNSPECIFIED"
	RebookTradeResponseWhenIssuedWhenIssued                RebookTradeResponseWhenIssued = "WHEN_ISSUED"
	RebookTradeResponseWhenIssuedWhenDistributed           RebookTradeResponseWhenIssued = "WHEN_DISTRIBUTED"
)

func (e RebookTradeResponseWhenIssued) ToPointer() *RebookTradeResponseWhenIssued {
	return &e
}

// NewTrade - The new trade that is booked.
type NewTrade struct {
	// A globally unique identifier referencing a single account.
	AccountID *string `json:"account_id,omitempty"`
	// The current activity_id of this trade in the Ledger.
	ActivityID *string `json:"activity_id,omitempty"`
	// Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Fractional support for market-makers' internal order ids.
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// Type of the asset being traded.
	AssetType *RebookTradeResponseAssetType `json:"asset_type,omitempty"`
	// Broker capacity for the trade.
	BrokerCapacity *RebookTradeResponseBrokerCapacity `json:"broker_capacity,omitempty"`
	// The unique identifier that is associated with an order. Must be unique by date per trade per client.
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Executing broker of the trade.
	ExecutingBroker *string `json:"executing_broker,omitempty"`
	// The executions (sometimes referred to as partial-fills) that comprise the trade.
	Executions []Execution `json:"executions,omitempty"`
	// Any client calculated fees associated with the trade. Only allowed if trade.open = false. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed.
	Fees []BookingFee `json:"fees,omitempty"`
	// Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Identifier type for the asset being traded.
	IdentifierType *RebookTradeResponseIdentifierType `json:"identifier_type,omitempty"`
	// Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP.
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// Date field to support extended trading hours.
	LocalMarketTradeDate *RebookTradeResponseLocalMarketTradeDate `json:"local_market_trade_date,omitempty"`
	// One or many lot matching instructions for the trade.
	LotMatchingInstructions []BookingLot `json:"lot_matching_instructions,omitempty"`
	// Market Identifier Code
	MicCode *string `json:"mic_code,omitempty"`
	// The resource name of the trade.
	Name *string `json:"name,omitempty"`
	// State of this trade's completeness in filling. True: trade is not done filling and can append more executions onto the trade False: trade is done filling and cannot append more executions onto the trade By default, trades are closed when they are created. An open trade can later be closed by calling the CompleteTrade endpoint. Additional executions can be appended to an open trade by calling the CreateExecution endpoint. Trades that are left open will be automatically closed nightly before Ledger's EOD.
	Open *bool `json:"open,omitempty"`
	// Street-level order id, unique by day per broker.
	OrderID *string `json:"order_id,omitempty"`
	// Route type for the trade.
	RouteType *RebookTradeResponseRouteType `json:"route_type,omitempty"`
	// Defaults to T+1 for equities if this is not provided. Calculated by the execution's execution_time field in Eastern Time.
	SettlementDate *RebookTradeResponseSettlementDate `json:"settlement_date,omitempty"`
	// Denotes if the trade is a SELL or a BUY.
	Side *RebookTradeResponseSide `json:"side,omitempty"`
	// Side modifier for the trade.
	SideModifier *RebookTradeResponseSideModifier `json:"side_modifier,omitempty"`
	// The source of the submission.
	SourceApplication *string `json:"source_application,omitempty"`
	// An enumerated list of values used to indicate certain attributes about a trade (E.g. DISCRETION_EXERCISED, BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)
	SpecialInstructions []RebookTradeResponseSpecialInstructions `json:"special_instructions,omitempty"`
	// A ULID to uniquely identify the trade globally.
	TradeID *string `json:"trade_id,omitempty"`
	// Exchange venue
	Venue *RebookTradeResponseVenue `json:"venue,omitempty"`
	// Denotes that this trade was either when_issued or when_distributed.
	WhenIssued *RebookTradeResponseWhenIssued `json:"when_issued,omitempty"`
}

func (o *NewTrade) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *NewTrade) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *NewTrade) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *NewTrade) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *NewTrade) GetAssetType() *RebookTradeResponseAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *NewTrade) GetBrokerCapacity() *RebookTradeResponseBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *NewTrade) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *NewTrade) GetExecutingBroker() *string {
	if o == nil {
		return nil
	}
	return o.ExecutingBroker
}

func (o *NewTrade) GetExecutions() []Execution {
	if o == nil {
		return nil
	}
	return o.Executions
}

func (o *NewTrade) GetFees() []BookingFee {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *NewTrade) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *NewTrade) GetIdentifierType() *RebookTradeResponseIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *NewTrade) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *NewTrade) GetLocalMarketTradeDate() *RebookTradeResponseLocalMarketTradeDate {
	if o == nil {
		return nil
	}
	return o.LocalMarketTradeDate
}

func (o *NewTrade) GetLotMatchingInstructions() []BookingLot {
	if o == nil {
		return nil
	}
	return o.LotMatchingInstructions
}

func (o *NewTrade) GetMicCode() *string {
	if o == nil {
		return nil
	}
	return o.MicCode
}

func (o *NewTrade) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *NewTrade) GetOpen() *bool {
	if o == nil {
		return nil
	}
	return o.Open
}

func (o *NewTrade) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *NewTrade) GetRouteType() *RebookTradeResponseRouteType {
	if o == nil {
		return nil
	}
	return o.RouteType
}

func (o *NewTrade) GetSettlementDate() *RebookTradeResponseSettlementDate {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *NewTrade) GetSide() *RebookTradeResponseSide {
	if o == nil {
		return nil
	}
	return o.Side
}

func (o *NewTrade) GetSideModifier() *RebookTradeResponseSideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *NewTrade) GetSourceApplication() *string {
	if o == nil {
		return nil
	}
	return o.SourceApplication
}

func (o *NewTrade) GetSpecialInstructions() []RebookTradeResponseSpecialInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *NewTrade) GetTradeID() *string {
	if o == nil {
		return nil
	}
	return o.TradeID
}

func (o *NewTrade) GetVenue() *RebookTradeResponseVenue {
	if o == nil {
		return nil
	}
	return o.Venue
}

func (o *NewTrade) GetWhenIssued() *RebookTradeResponseWhenIssued {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

// RebookTradeResponseOriginalTradeAssetType - Type of the asset being traded.
type RebookTradeResponseOriginalTradeAssetType string

const (
	RebookTradeResponseOriginalTradeAssetTypeAssetTypeUnspecified RebookTradeResponseOriginalTradeAssetType = "ASSET_TYPE_UNSPECIFIED"
	RebookTradeResponseOriginalTradeAssetTypeEquity               RebookTradeResponseOriginalTradeAssetType = "EQUITY"
	RebookTradeResponseOriginalTradeAssetTypeFixedIncome          RebookTradeResponseOriginalTradeAssetType = "FIXED_INCOME"
)

func (e RebookTradeResponseOriginalTradeAssetType) ToPointer() *RebookTradeResponseOriginalTradeAssetType {
	return &e
}

// RebookTradeResponseOriginalTradeBrokerCapacity - Broker capacity for the trade.
type RebookTradeResponseOriginalTradeBrokerCapacity string

const (
	RebookTradeResponseOriginalTradeBrokerCapacityCapacityUnspecified RebookTradeResponseOriginalTradeBrokerCapacity = "CAPACITY_UNSPECIFIED"
	RebookTradeResponseOriginalTradeBrokerCapacityAgency              RebookTradeResponseOriginalTradeBrokerCapacity = "AGENCY"
	RebookTradeResponseOriginalTradeBrokerCapacityPrincipal           RebookTradeResponseOriginalTradeBrokerCapacity = "PRINCIPAL"
	RebookTradeResponseOriginalTradeBrokerCapacityMixed               RebookTradeResponseOriginalTradeBrokerCapacity = "MIXED"
)

func (e RebookTradeResponseOriginalTradeBrokerCapacity) ToPointer() *RebookTradeResponseOriginalTradeBrokerCapacity {
	return &e
}

// RebookTradeResponseOriginalTradeIdentifierType - Identifier type for the asset being traded.
type RebookTradeResponseOriginalTradeIdentifierType string

const (
	RebookTradeResponseOriginalTradeIdentifierTypeIdentifierTypeUnspecified RebookTradeResponseOriginalTradeIdentifierType = "IDENTIFIER_TYPE_UNSPECIFIED"
	RebookTradeResponseOriginalTradeIdentifierTypeAssetID                   RebookTradeResponseOriginalTradeIdentifierType = "ASSET_ID"
	RebookTradeResponseOriginalTradeIdentifierTypeSymbol                    RebookTradeResponseOriginalTradeIdentifierType = "SYMBOL"
	RebookTradeResponseOriginalTradeIdentifierTypeCusip                     RebookTradeResponseOriginalTradeIdentifierType = "CUSIP"
	RebookTradeResponseOriginalTradeIdentifierTypeIsin                      RebookTradeResponseOriginalTradeIdentifierType = "ISIN"
)

func (e RebookTradeResponseOriginalTradeIdentifierType) ToPointer() *RebookTradeResponseOriginalTradeIdentifierType {
	return &e
}

// RebookTradeResponseOriginalTradeLocalMarketTradeDate - Date field to support extended trading hours.
type RebookTradeResponseOriginalTradeLocalMarketTradeDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *RebookTradeResponseOriginalTradeLocalMarketTradeDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *RebookTradeResponseOriginalTradeLocalMarketTradeDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *RebookTradeResponseOriginalTradeLocalMarketTradeDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// RebookTradeResponseOriginalTradeRouteType - Route type for the trade.
type RebookTradeResponseOriginalTradeRouteType string

const (
	RebookTradeResponseOriginalTradeRouteTypeRouteTypeUnspecified RebookTradeResponseOriginalTradeRouteType = "ROUTE_TYPE_UNSPECIFIED"
	RebookTradeResponseOriginalTradeRouteTypeDma                  RebookTradeResponseOriginalTradeRouteType = "DMA"
	RebookTradeResponseOriginalTradeRouteTypeMngd                 RebookTradeResponseOriginalTradeRouteType = "MNGD"
	RebookTradeResponseOriginalTradeRouteTypeQuik                 RebookTradeResponseOriginalTradeRouteType = "QUIK"
	RebookTradeResponseOriginalTradeRouteTypeAlgo                 RebookTradeResponseOriginalTradeRouteType = "ALGO"
	RebookTradeResponseOriginalTradeRouteTypeAway                 RebookTradeResponseOriginalTradeRouteType = "AWAY"
	RebookTradeResponseOriginalTradeRouteTypeCorr                 RebookTradeResponseOriginalTradeRouteType = "CORR"
	RebookTradeResponseOriginalTradeRouteTypeBoats                RebookTradeResponseOriginalTradeRouteType = "BOATS"
)

func (e RebookTradeResponseOriginalTradeRouteType) ToPointer() *RebookTradeResponseOriginalTradeRouteType {
	return &e
}

// RebookTradeResponseOriginalTradeSettlementDate - Defaults to T+1 for equities if this is not provided. Calculated by the execution's execution_time field in Eastern Time.
type RebookTradeResponseOriginalTradeSettlementDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *RebookTradeResponseOriginalTradeSettlementDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *RebookTradeResponseOriginalTradeSettlementDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *RebookTradeResponseOriginalTradeSettlementDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// RebookTradeResponseOriginalTradeSide - Denotes if the trade is a SELL or a BUY.
type RebookTradeResponseOriginalTradeSide string

const (
	RebookTradeResponseOriginalTradeSideSideUnspecified RebookTradeResponseOriginalTradeSide = "SIDE_UNSPECIFIED"
	RebookTradeResponseOriginalTradeSideBuy             RebookTradeResponseOriginalTradeSide = "BUY"
	RebookTradeResponseOriginalTradeSideSell            RebookTradeResponseOriginalTradeSide = "SELL"
)

func (e RebookTradeResponseOriginalTradeSide) ToPointer() *RebookTradeResponseOriginalTradeSide {
	return &e
}

// RebookTradeResponseOriginalTradeSideModifier - Side modifier for the trade.
type RebookTradeResponseOriginalTradeSideModifier string

const (
	RebookTradeResponseOriginalTradeSideModifierSideModifierUnspecified RebookTradeResponseOriginalTradeSideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	RebookTradeResponseOriginalTradeSideModifierShort                   RebookTradeResponseOriginalTradeSideModifier = "SHORT"
	RebookTradeResponseOriginalTradeSideModifierShortExempt             RebookTradeResponseOriginalTradeSideModifier = "SHORT_EXEMPT"
	RebookTradeResponseOriginalTradeSideModifierShortCover              RebookTradeResponseOriginalTradeSideModifier = "SHORT_COVER"
	RebookTradeResponseOriginalTradeSideModifierOpen                    RebookTradeResponseOriginalTradeSideModifier = "OPEN"
	RebookTradeResponseOriginalTradeSideModifierClose                   RebookTradeResponseOriginalTradeSideModifier = "CLOSE"
)

func (e RebookTradeResponseOriginalTradeSideModifier) ToPointer() *RebookTradeResponseOriginalTradeSideModifier {
	return &e
}

type RebookTradeResponseOriginalTradeSpecialInstructions string

const (
	RebookTradeResponseOriginalTradeSpecialInstructionsSpecialInstructionsUnspecified RebookTradeResponseOriginalTradeSpecialInstructions = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
	RebookTradeResponseOriginalTradeSpecialInstructionsRule144                        RebookTradeResponseOriginalTradeSpecialInstructions = "RULE_144"
	RebookTradeResponseOriginalTradeSpecialInstructionsWithDividend                   RebookTradeResponseOriginalTradeSpecialInstructions = "WITH_DIVIDEND"
	RebookTradeResponseOriginalTradeSpecialInstructionsWithRights                     RebookTradeResponseOriginalTradeSpecialInstructions = "WITH_RIGHTS"
	RebookTradeResponseOriginalTradeSpecialInstructionsCloseContract                  RebookTradeResponseOriginalTradeSpecialInstructions = "CLOSE_CONTRACT"
	RebookTradeResponseOriginalTradeSpecialInstructionsCoverShort                     RebookTradeResponseOriginalTradeSpecialInstructions = "COVER_SHORT"
	RebookTradeResponseOriginalTradeSpecialInstructionsCrossTrade                     RebookTradeResponseOriginalTradeSpecialInstructions = "CROSS_TRADE"
	RebookTradeResponseOriginalTradeSpecialInstructionsOpenContractCovered            RebookTradeResponseOriginalTradeSpecialInstructions = "OPEN_CONTRACT_COVERED"
	RebookTradeResponseOriginalTradeSpecialInstructionsDiscretionExercised            RebookTradeResponseOriginalTradeSpecialInstructions = "DISCRETION_EXERCISED"
	RebookTradeResponseOriginalTradeSpecialInstructionsDiscretionNotExercised         RebookTradeResponseOriginalTradeSpecialInstructions = "DISCRETION_NOT_EXERCISED"
	RebookTradeResponseOriginalTradeSpecialInstructionsOptionAssignment               RebookTradeResponseOriginalTradeSpecialInstructions = "OPTION_ASSIGNMENT"
	RebookTradeResponseOriginalTradeSpecialInstructionsEmployeeStockOption            RebookTradeResponseOriginalTradeSpecialInstructions = "EMPLOYEE_STOCK_OPTION"
	RebookTradeResponseOriginalTradeSpecialInstructionsInvestmentBanking              RebookTradeResponseOriginalTradeSpecialInstructions = "INVESTMENT_BANKING"
	RebookTradeResponseOriginalTradeSpecialInstructionsBrokerDealerOrder              RebookTradeResponseOriginalTradeSpecialInstructions = "BROKER_DEALER_ORDER"
	RebookTradeResponseOriginalTradeSpecialInstructionsMakeMarketInSecurity           RebookTradeResponseOriginalTradeSpecialInstructions = "MAKE_MARKET_IN_SECURITY"
	RebookTradeResponseOriginalTradeSpecialInstructionsMakeMarketSolicited            RebookTradeResponseOriginalTradeSpecialInstructions = "MAKE_MARKET_SOLICITED"
	RebookTradeResponseOriginalTradeSpecialInstructionsMakeMarketUnsolicited          RebookTradeResponseOriginalTradeSpecialInstructions = "MAKE_MARKET_UNSOLICITED"
	RebookTradeResponseOriginalTradeSpecialInstructionsCustomerDirected               RebookTradeResponseOriginalTradeSpecialInstructions = "CUSTOMER_DIRECTED"
	RebookTradeResponseOriginalTradeSpecialInstructionsFullyRegistered                RebookTradeResponseOriginalTradeSpecialInstructions = "FULLY_REGISTERED"
	RebookTradeResponseOriginalTradeSpecialInstructionsOpenContract                   RebookTradeResponseOriginalTradeSpecialInstructions = "OPEN_CONTRACT"
	RebookTradeResponseOriginalTradeSpecialInstructionsOddlotDiffOnRequest            RebookTradeResponseOriginalTradeSpecialInstructions = "ODDLOT_DIFF_ON_REQUEST"
	RebookTradeResponseOriginalTradeSpecialInstructionsProspectusEnclosed             RebookTradeResponseOriginalTradeSpecialInstructions = "PROSPECTUS_ENCLOSED"
	RebookTradeResponseOriginalTradeSpecialInstructionsProspectusSeparateMail         RebookTradeResponseOriginalTradeSpecialInstructions = "PROSPECTUS_SEPARATE_MAIL"
	RebookTradeResponseOriginalTradeSpecialInstructionsSolicited                      RebookTradeResponseOriginalTradeSpecialInstructions = "SOLICITED"
	RebookTradeResponseOriginalTradeSpecialInstructionsUnsolicited                    RebookTradeResponseOriginalTradeSpecialInstructions = "UNSOLICITED"
	RebookTradeResponseOriginalTradeSpecialInstructionsXDividend                      RebookTradeResponseOriginalTradeSpecialInstructions = "X_DIVIDEND"
	RebookTradeResponseOriginalTradeSpecialInstructionsActingAsPrincipal              RebookTradeResponseOriginalTradeSpecialInstructions = "ACTING_AS_PRINCIPAL"
	RebookTradeResponseOriginalTradeSpecialInstructionsAveragePrice                   RebookTradeResponseOriginalTradeSpecialInstructions = "AVERAGE_PRICE"
	RebookTradeResponseOriginalTradeSpecialInstructionsBrokerLiquidation              RebookTradeResponseOriginalTradeSpecialInstructions = "BROKER_LIQUIDATION"
	RebookTradeResponseOriginalTradeSpecialInstructionsCouponBooks                    RebookTradeResponseOriginalTradeSpecialInstructions = "COUPON_BOOKS"
	RebookTradeResponseOriginalTradeSpecialInstructionsHasPostageFee                  RebookTradeResponseOriginalTradeSpecialInstructions = "HAS_POSTAGE_FEE"
	RebookTradeResponseOriginalTradeSpecialInstructionsInternetOrder                  RebookTradeResponseOriginalTradeSpecialInstructions = "INTERNET_ORDER"
	RebookTradeResponseOriginalTradeSpecialInstructionsMarginSellout                  RebookTradeResponseOriginalTradeSpecialInstructions = "MARGIN_SELLOUT"
	RebookTradeResponseOriginalTradeSpecialInstructionsMarketMakersAsPrincipal        RebookTradeResponseOriginalTradeSpecialInstructions = "MARKET_MAKERS_AS_PRINCIPAL"
	RebookTradeResponseOriginalTradeSpecialInstructionsNegativeNetProceed             RebookTradeResponseOriginalTradeSpecialInstructions = "NEGATIVE_NET_PROCEED"
	RebookTradeResponseOriginalTradeSpecialInstructionsPreFigIndicator                RebookTradeResponseOriginalTradeSpecialInstructions = "PRE_FIG_INDICATOR"
	RebookTradeResponseOriginalTradeSpecialInstructionsRisklessPrincipalInstruction   RebookTradeResponseOriginalTradeSpecialInstructions = "RISKLESS_PRINCIPAL_INSTRUCTION"
	RebookTradeResponseOriginalTradeSpecialInstructionsShortInstruction               RebookTradeResponseOriginalTradeSpecialInstructions = "SHORT_INSTRUCTION"
	RebookTradeResponseOriginalTradeSpecialInstructionsThirdMarket                    RebookTradeResponseOriginalTradeSpecialInstructions = "THIRD_MARKET"
	RebookTradeResponseOriginalTradeSpecialInstructionsSuppressMsrbTransmission       RebookTradeResponseOriginalTradeSpecialInstructions = "SUPPRESS_MSRB_TRANSMISSION"
	RebookTradeResponseOriginalTradeSpecialInstructionsSuppressTraceReporting         RebookTradeResponseOriginalTradeSpecialInstructions = "SUPPRESS_TRACE_REPORTING"
	RebookTradeResponseOriginalTradeSpecialInstructionsSuppressEmailNotification      RebookTradeResponseOriginalTradeSpecialInstructions = "SUPPRESS_EMAIL_NOTIFICATION"
	RebookTradeResponseOriginalTradeSpecialInstructionsStockReward                    RebookTradeResponseOriginalTradeSpecialInstructions = "STOCK_REWARD"
	RebookTradeResponseOriginalTradeSpecialInstructionsSuppressRegFees                RebookTradeResponseOriginalTradeSpecialInstructions = "SUPPRESS_REG_FEES"
	RebookTradeResponseOriginalTradeSpecialInstructionsSuppressSecFee                 RebookTradeResponseOriginalTradeSpecialInstructions = "SUPPRESS_SEC_FEE"
	RebookTradeResponseOriginalTradeSpecialInstructionsSuppressTafFee                 RebookTradeResponseOriginalTradeSpecialInstructions = "SUPPRESS_TAF_FEE"
	RebookTradeResponseOriginalTradeSpecialInstructionsDividendReinvestment           RebookTradeResponseOriginalTradeSpecialInstructions = "DIVIDEND_REINVESTMENT"
)

func (e RebookTradeResponseOriginalTradeSpecialInstructions) ToPointer() *RebookTradeResponseOriginalTradeSpecialInstructions {
	return &e
}

// RebookTradeResponseOriginalTradeVenue - Exchange venue
type RebookTradeResponseOriginalTradeVenue string

const (
	RebookTradeResponseOriginalTradeVenueExchangeVenueUnspecified RebookTradeResponseOriginalTradeVenue = "EXCHANGE_VENUE_UNSPECIFIED"
	RebookTradeResponseOriginalTradeVenueAmex                     RebookTradeResponseOriginalTradeVenue = "AMEX"
	RebookTradeResponseOriginalTradeVenueArca                     RebookTradeResponseOriginalTradeVenue = "ARCA"
	RebookTradeResponseOriginalTradeVenueBats                     RebookTradeResponseOriginalTradeVenue = "BATS"
	RebookTradeResponseOriginalTradeVenueBatsByx                  RebookTradeResponseOriginalTradeVenue = "BATS_BYX"
	RebookTradeResponseOriginalTradeVenueBoston                   RebookTradeResponseOriginalTradeVenue = "BOSTON"
	RebookTradeResponseOriginalTradeVenueBox                      RebookTradeResponseOriginalTradeVenue = "BOX"
	RebookTradeResponseOriginalTradeVenueBzx                      RebookTradeResponseOriginalTradeVenue = "BZX"
	RebookTradeResponseOriginalTradeVenueC2                       RebookTradeResponseOriginalTradeVenue = "C2"
	RebookTradeResponseOriginalTradeVenueCboe                     RebookTradeResponseOriginalTradeVenue = "CBOE"
	RebookTradeResponseOriginalTradeVenueChicago                  RebookTradeResponseOriginalTradeVenue = "CHICAGO"
	RebookTradeResponseOriginalTradeVenueCincinnati               RebookTradeResponseOriginalTradeVenue = "CINCINNATI"
	RebookTradeResponseOriginalTradeVenueEdga                     RebookTradeResponseOriginalTradeVenue = "EDGA"
	RebookTradeResponseOriginalTradeVenueEdgx                     RebookTradeResponseOriginalTradeVenue = "EDGX"
	RebookTradeResponseOriginalTradeVenueExclearing               RebookTradeResponseOriginalTradeVenue = "EXCLEARING"
	RebookTradeResponseOriginalTradeVenueIex                      RebookTradeResponseOriginalTradeVenue = "IEX"
	RebookTradeResponseOriginalTradeVenueIse                      RebookTradeResponseOriginalTradeVenue = "ISE"
	RebookTradeResponseOriginalTradeVenueIseGemini                RebookTradeResponseOriginalTradeVenue = "ISE_GEMINI"
	RebookTradeResponseOriginalTradeVenueMiax                     RebookTradeResponseOriginalTradeVenue = "MIAX"
	RebookTradeResponseOriginalTradeVenueNasdaq                   RebookTradeResponseOriginalTradeVenue = "NASDAQ"
	RebookTradeResponseOriginalTradeVenueNasdaqOmxBx              RebookTradeResponseOriginalTradeVenue = "NASDAQ_OMX_BX"
	RebookTradeResponseOriginalTradeVenueNyse                     RebookTradeResponseOriginalTradeVenue = "NYSE"
	RebookTradeResponseOriginalTradeVenuePhlx                     RebookTradeResponseOriginalTradeVenue = "PHLX"
	RebookTradeResponseOriginalTradeVenueOtc                      RebookTradeResponseOriginalTradeVenue = "OTC"
	RebookTradeResponseOriginalTradeVenueQsr                      RebookTradeResponseOriginalTradeVenue = "QSR"
)

func (e RebookTradeResponseOriginalTradeVenue) ToPointer() *RebookTradeResponseOriginalTradeVenue {
	return &e
}

// RebookTradeResponseOriginalTradeWhenIssued - Denotes that this trade was either when_issued or when_distributed.
type RebookTradeResponseOriginalTradeWhenIssued string

const (
	RebookTradeResponseOriginalTradeWhenIssuedWhenIssuedTypeUnspecified RebookTradeResponseOriginalTradeWhenIssued = "WHEN_ISSUED_TYPE_UNSPECIFIED"
	RebookTradeResponseOriginalTradeWhenIssuedWhenIssued                RebookTradeResponseOriginalTradeWhenIssued = "WHEN_ISSUED"
	RebookTradeResponseOriginalTradeWhenIssuedWhenDistributed           RebookTradeResponseOriginalTradeWhenIssued = "WHEN_DISTRIBUTED"
)

func (e RebookTradeResponseOriginalTradeWhenIssued) ToPointer() *RebookTradeResponseOriginalTradeWhenIssued {
	return &e
}

// OriginalTrade - The original trade that was rebooked.
type OriginalTrade struct {
	// A globally unique identifier referencing a single account.
	AccountID *string `json:"account_id,omitempty"`
	// The current activity_id of this trade in the Ledger.
	ActivityID *string `json:"activity_id,omitempty"`
	// Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Fractional support for market-makers' internal order ids.
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// Type of the asset being traded.
	AssetType *RebookTradeResponseOriginalTradeAssetType `json:"asset_type,omitempty"`
	// Broker capacity for the trade.
	BrokerCapacity *RebookTradeResponseOriginalTradeBrokerCapacity `json:"broker_capacity,omitempty"`
	// The unique identifier that is associated with an order. Must be unique by date per trade per client.
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Executing broker of the trade.
	ExecutingBroker *string `json:"executing_broker,omitempty"`
	// The executions (sometimes referred to as partial-fills) that comprise the trade.
	Executions []Execution `json:"executions,omitempty"`
	// Any client calculated fees associated with the trade. Only allowed if trade.open = false. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed.
	Fees []BookingFee `json:"fees,omitempty"`
	// Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Identifier type for the asset being traded.
	IdentifierType *RebookTradeResponseOriginalTradeIdentifierType `json:"identifier_type,omitempty"`
	// Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP.
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// Date field to support extended trading hours.
	LocalMarketTradeDate *RebookTradeResponseOriginalTradeLocalMarketTradeDate `json:"local_market_trade_date,omitempty"`
	// One or many lot matching instructions for the trade.
	LotMatchingInstructions []BookingLot `json:"lot_matching_instructions,omitempty"`
	// Market Identifier Code
	MicCode *string `json:"mic_code,omitempty"`
	// The resource name of the trade.
	Name *string `json:"name,omitempty"`
	// State of this trade's completeness in filling. True: trade is not done filling and can append more executions onto the trade False: trade is done filling and cannot append more executions onto the trade By default, trades are closed when they are created. An open trade can later be closed by calling the CompleteTrade endpoint. Additional executions can be appended to an open trade by calling the CreateExecution endpoint. Trades that are left open will be automatically closed nightly before Ledger's EOD.
	Open *bool `json:"open,omitempty"`
	// Street-level order id, unique by day per broker.
	OrderID *string `json:"order_id,omitempty"`
	// Route type for the trade.
	RouteType *RebookTradeResponseOriginalTradeRouteType `json:"route_type,omitempty"`
	// Defaults to T+1 for equities if this is not provided. Calculated by the execution's execution_time field in Eastern Time.
	SettlementDate *RebookTradeResponseOriginalTradeSettlementDate `json:"settlement_date,omitempty"`
	// Denotes if the trade is a SELL or a BUY.
	Side *RebookTradeResponseOriginalTradeSide `json:"side,omitempty"`
	// Side modifier for the trade.
	SideModifier *RebookTradeResponseOriginalTradeSideModifier `json:"side_modifier,omitempty"`
	// The source of the submission.
	SourceApplication *string `json:"source_application,omitempty"`
	// An enumerated list of values used to indicate certain attributes about a trade (E.g. DISCRETION_EXERCISED, BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)
	SpecialInstructions []RebookTradeResponseOriginalTradeSpecialInstructions `json:"special_instructions,omitempty"`
	// A ULID to uniquely identify the trade globally.
	TradeID *string `json:"trade_id,omitempty"`
	// Exchange venue
	Venue *RebookTradeResponseOriginalTradeVenue `json:"venue,omitempty"`
	// Denotes that this trade was either when_issued or when_distributed.
	WhenIssued *RebookTradeResponseOriginalTradeWhenIssued `json:"when_issued,omitempty"`
}

func (o *OriginalTrade) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *OriginalTrade) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *OriginalTrade) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *OriginalTrade) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *OriginalTrade) GetAssetType() *RebookTradeResponseOriginalTradeAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *OriginalTrade) GetBrokerCapacity() *RebookTradeResponseOriginalTradeBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *OriginalTrade) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *OriginalTrade) GetExecutingBroker() *string {
	if o == nil {
		return nil
	}
	return o.ExecutingBroker
}

func (o *OriginalTrade) GetExecutions() []Execution {
	if o == nil {
		return nil
	}
	return o.Executions
}

func (o *OriginalTrade) GetFees() []BookingFee {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *OriginalTrade) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *OriginalTrade) GetIdentifierType() *RebookTradeResponseOriginalTradeIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *OriginalTrade) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *OriginalTrade) GetLocalMarketTradeDate() *RebookTradeResponseOriginalTradeLocalMarketTradeDate {
	if o == nil {
		return nil
	}
	return o.LocalMarketTradeDate
}

func (o *OriginalTrade) GetLotMatchingInstructions() []BookingLot {
	if o == nil {
		return nil
	}
	return o.LotMatchingInstructions
}

func (o *OriginalTrade) GetMicCode() *string {
	if o == nil {
		return nil
	}
	return o.MicCode
}

func (o *OriginalTrade) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OriginalTrade) GetOpen() *bool {
	if o == nil {
		return nil
	}
	return o.Open
}

func (o *OriginalTrade) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *OriginalTrade) GetRouteType() *RebookTradeResponseOriginalTradeRouteType {
	if o == nil {
		return nil
	}
	return o.RouteType
}

func (o *OriginalTrade) GetSettlementDate() *RebookTradeResponseOriginalTradeSettlementDate {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *OriginalTrade) GetSide() *RebookTradeResponseOriginalTradeSide {
	if o == nil {
		return nil
	}
	return o.Side
}

func (o *OriginalTrade) GetSideModifier() *RebookTradeResponseOriginalTradeSideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *OriginalTrade) GetSourceApplication() *string {
	if o == nil {
		return nil
	}
	return o.SourceApplication
}

func (o *OriginalTrade) GetSpecialInstructions() []RebookTradeResponseOriginalTradeSpecialInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *OriginalTrade) GetTradeID() *string {
	if o == nil {
		return nil
	}
	return o.TradeID
}

func (o *OriginalTrade) GetVenue() *RebookTradeResponseOriginalTradeVenue {
	if o == nil {
		return nil
	}
	return o.Venue
}

func (o *OriginalTrade) GetWhenIssued() *RebookTradeResponseOriginalTradeWhenIssued {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

// RebookTradeResponse - A response for the rebook trade method.
type RebookTradeResponse struct {
	// The new trade that is booked.
	NewTrade *NewTrade `json:"new_trade,omitempty"`
	// The original trade that was rebooked.
	OriginalTrade *OriginalTrade `json:"original_trade,omitempty"`
}

func (o *RebookTradeResponse) GetNewTrade() *NewTrade {
	if o == nil {
		return nil
	}
	return o.NewTrade
}

func (o *RebookTradeResponse) GetOriginalTrade() *OriginalTrade {
	if o == nil {
		return nil
	}
	return o.OriginalTrade
}
