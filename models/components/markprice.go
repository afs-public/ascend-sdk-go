// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// MarkPricePrice - The price value
type MarkPricePrice struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *MarkPricePrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// MarkPriceType - The calculation type of this price
type MarkPriceType string

const (
	MarkPriceTypePercentageOfPar      MarkPriceType = "PERCENTAGE_OF_PAR"
	MarkPriceTypeDirtyPercentageOfPar MarkPriceType = "DIRTY_PERCENTAGE_OF_PAR"
	MarkPriceTypeYieldToWorst         MarkPriceType = "YIELD_TO_WORST"
	MarkPriceTypeYieldToMaturity      MarkPriceType = "YIELD_TO_MATURITY"
)

func (e MarkPriceType) ToPointer() *MarkPriceType {
	return &e
}
func (e *MarkPriceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PERCENTAGE_OF_PAR":
		fallthrough
	case "DIRTY_PERCENTAGE_OF_PAR":
		fallthrough
	case "YIELD_TO_WORST":
		fallthrough
	case "YIELD_TO_MATURITY":
		*e = MarkPriceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MarkPriceType: %v", v)
	}
}

// MarkPrice - The definition of a price value and its calculation method as returned in mark data
type MarkPrice struct {
	// The price value
	Price *MarkPricePrice `json:"price,omitempty"`
	// The calculation type of this price
	Type *MarkPriceType `json:"type,omitempty"`
}

func (o *MarkPrice) GetPrice() *MarkPricePrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *MarkPrice) GetType() *MarkPriceType {
	if o == nil {
		return nil
	}
	return o.Type
}
