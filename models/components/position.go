// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// AdjustedSettled - This field shows settled positions that have been adjusted to account for as-of transactions (transactions recorded after their actual occurrence). Unlike the settled field, which remains unchanged for historical dates when as-of transactions are recorded, the adjusted_settled field updates to reflect what the position would have been if all transactions had been recorded on their actual dates of occurrence.
type AdjustedSettled struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AdjustedSettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AdjustedTrade - This value reflects trade positions that have been adjusted due to the recording of transactions after their actual occurrence (as-of transactions). The key difference between this field and the trade field is that when an as-of transaction is recorded to the Ledger, the trade field will not change for historical dates, but the adjusted_trade field will update to reflect what the position would have been if the as-of transaction had been recorded on the date of its occurrence
type AdjustedTrade struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AdjustedTrade) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// Date - The date for which positions were calculated
type Date struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *Date) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *Date) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *Date) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// PositionFpsl - Represents the amount of an asset that has been loaned out via the fully paid securities lending program
type PositionFpsl struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *PositionFpsl) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// Free - Represents the amount of an asset that is available to loan by the fully paid securities lending program.
type Free struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *Free) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// LastAdjustedDate - The most recent date a position changed in any way
type LastAdjustedDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *LastAdjustedDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *LastAdjustedDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *LastAdjustedDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// PendingDrip - Represents the amount of cash that has been paid to an account due to a dividend or capital gain but is due to be reinvested in the security that paid the account holder
type PendingDrip struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *PendingDrip) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PendingOutgoingAcat - Represents the amount of an asset that is subject to a pending outgoing account transfer, but has not completed the bookkeeping phase of that account transfer
type PendingOutgoingAcat struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *PendingOutgoingAcat) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PendingWithdrawal - Represents the amount of cash that has been requested for withdrawal but has not posted to the Ledger
type PendingWithdrawal struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *PendingWithdrawal) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// Settled - This field refers to the quantity of assets that have completed the entire clearing and settlement cycle, where ownership of the securities has been officially transferred and payment has been fully processed. The settled position includes all transactions that have been recorded in the Ledger with process_date, activity_date, and settle_date on or before the date specified in the response.
type Settled struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *Settled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PositionTrade - This field represents the total amount of an asset owned by the account including transactions that have been executed but not yet settled, commonly known as the trade date position. It includes all transactions recorded in the Ledger with process_date and activity_date on or before the date in the response, even those with future settle_dates. Unlike the settled position, which only includes completed settlements, the trade position provides a forward-looking view of ownership that accounts for pending settlements
type PositionTrade struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *PositionTrade) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// Unrestricted - This field represents the portion of a settled position that is available for trading or withdrawal without restrictions. It is calculated by subtracting positions with pending restrictions from the total settled amount (currently: settled - (pending_outgoing_acat + pending_drip + pending_withdrawal)). As new memo location categories are added to the API, Apex may update this calculation to incorporate these values. Note that the Cash and Margin systems may place additional restrictions on cash/ assets according to their business logic.
type Unrestricted struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *Unrestricted) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// Position
type Position struct {
	// A globally unique identifier referencing a single account; this is the main identifier for an account used for machine-to-machine interactions
	AccountID *string `json:"account_id,omitempty"`
	// This field shows settled positions that have been adjusted to account for as-of transactions (transactions recorded after their actual occurrence). Unlike the settled field, which remains unchanged for historical dates when as-of transactions are recorded, the adjusted_settled field updates to reflect what the position would have been if all transactions had been recorded on their actual dates of occurrence.
	AdjustedSettled *AdjustedSettled `json:"adjusted_settled,omitempty"`
	// This value reflects trade positions that have been adjusted due to the recording of transactions after their actual occurrence (as-of transactions). The key difference between this field and the trade field is that when an as-of transaction is recorded to the Ledger, the trade field will not change for historical dates, but the adjusted_trade field will update to reflect what the position would have been if the as-of transaction had been recorded on the date of its occurrence
	AdjustedTrade *AdjustedTrade `json:"adjusted_trade,omitempty"`
	// An Apex-provided, global identifier created on a per asset bases which provides connectivity across all areas
	AssetID *string `json:"asset_id,omitempty"`
	// The correspondent id associated with the account for the position
	CorrespondentID *string `json:"correspondent_id,omitempty"`
	// The date for which positions were calculated
	Date *Date `json:"date,omitempty"`
	// Represents the amount of an asset that has been loaned out via the fully paid securities lending program
	Fpsl *PositionFpsl `json:"fpsl,omitempty"`
	// Represents the amount of an asset that is available to loan by the fully paid securities lending program.
	Free *Free `json:"free,omitempty"`
	// The most recent date a position changed in any way
	LastAdjustedDate *LastAdjustedDate `json:"last_adjusted_date,omitempty"`
	// accounts/{account_id}/positions/{position_id}
	Name *string `json:"name,omitempty"`
	// Represents the amount of cash that has been paid to an account due to a dividend or capital gain but is due to be reinvested in the security that paid the account holder
	PendingDrip *PendingDrip `json:"pending_drip,omitempty"`
	// Represents the amount of an asset that is subject to a pending outgoing account transfer, but has not completed the bookkeeping phase of that account transfer
	PendingOutgoingAcat *PendingOutgoingAcat `json:"pending_outgoing_acat,omitempty"`
	// Represents the amount of cash that has been requested for withdrawal but has not posted to the Ledger
	PendingWithdrawal *PendingWithdrawal `json:"pending_withdrawal,omitempty"`
	// Represents a chronologically-ordered version identifier that enables efficient position state tracking and event ordering. The system guarantees that positions from earlier dates have smaller version numbers than those from later dates
	PositionVersion *string `json:"position_version,omitempty"`
	// This field refers to the quantity of assets that have completed the entire clearing and settlement cycle, where ownership of the securities has been officially transferred and payment has been fully processed. The settled position includes all transactions that have been recorded in the Ledger with process_date, activity_date, and settle_date on or before the date specified in the response.
	Settled *Settled `json:"settled,omitempty"`
	// This field represents the total amount of an asset owned by the account including transactions that have been executed but not yet settled, commonly known as the trade date position. It includes all transactions recorded in the Ledger with process_date and activity_date on or before the date in the response, even those with future settle_dates. Unlike the settled position, which only includes completed settlements, the trade position provides a forward-looking view of ownership that accounts for pending settlements
	Trade *PositionTrade `json:"trade,omitempty"`
	// This field represents the portion of a settled position that is available for trading or withdrawal without restrictions. It is calculated by subtracting positions with pending restrictions from the total settled amount (currently: settled - (pending_outgoing_acat + pending_drip + pending_withdrawal)). As new memo location categories are added to the API, Apex may update this calculation to incorporate these values. Note that the Cash and Margin systems may place additional restrictions on cash/ assets according to their business logic.
	Unrestricted *Unrestricted `json:"unrestricted,omitempty"`
}

func (o *Position) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *Position) GetAdjustedSettled() *AdjustedSettled {
	if o == nil {
		return nil
	}
	return o.AdjustedSettled
}

func (o *Position) GetAdjustedTrade() *AdjustedTrade {
	if o == nil {
		return nil
	}
	return o.AdjustedTrade
}

func (o *Position) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *Position) GetCorrespondentID() *string {
	if o == nil {
		return nil
	}
	return o.CorrespondentID
}

func (o *Position) GetDate() *Date {
	if o == nil {
		return nil
	}
	return o.Date
}

func (o *Position) GetFpsl() *PositionFpsl {
	if o == nil {
		return nil
	}
	return o.Fpsl
}

func (o *Position) GetFree() *Free {
	if o == nil {
		return nil
	}
	return o.Free
}

func (o *Position) GetLastAdjustedDate() *LastAdjustedDate {
	if o == nil {
		return nil
	}
	return o.LastAdjustedDate
}

func (o *Position) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Position) GetPendingDrip() *PendingDrip {
	if o == nil {
		return nil
	}
	return o.PendingDrip
}

func (o *Position) GetPendingOutgoingAcat() *PendingOutgoingAcat {
	if o == nil {
		return nil
	}
	return o.PendingOutgoingAcat
}

func (o *Position) GetPendingWithdrawal() *PendingWithdrawal {
	if o == nil {
		return nil
	}
	return o.PendingWithdrawal
}

func (o *Position) GetPositionVersion() *string {
	if o == nil {
		return nil
	}
	return o.PositionVersion
}

func (o *Position) GetSettled() *Settled {
	if o == nil {
		return nil
	}
	return o.Settled
}

func (o *Position) GetTrade() *PositionTrade {
	if o == nil {
		return nil
	}
	return o.Trade
}

func (o *Position) GetUnrestricted() *Unrestricted {
	if o == nil {
		return nil
	}
	return o.Unrestricted
}
