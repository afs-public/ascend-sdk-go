// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// MaritalStatus - The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
type MaritalStatus string

const (
	MaritalStatusMaritalStatusUnspecified MaritalStatus = "MARITAL_STATUS_UNSPECIFIED"
	MaritalStatusSingle                   MaritalStatus = "SINGLE"
	MaritalStatusMarried                  MaritalStatus = "MARRIED"
	MaritalStatusDivorced                 MaritalStatus = "DIVORCED"
	MaritalStatusWidowed                  MaritalStatus = "WIDOWED"
)

func (e MaritalStatus) ToPointer() *MaritalStatus {
	return &e
}
func (e *MaritalStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MARITAL_STATUS_UNSPECIFIED":
		fallthrough
	case "SINGLE":
		fallthrough
	case "MARRIED":
		fallthrough
	case "DIVORCED":
		fallthrough
	case "WIDOWED":
		*e = MaritalStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MaritalStatus: %v", v)
	}
}

// NameSuffix - The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
type NameSuffix string

const (
	NameSuffixNameSuffixUnspecified NameSuffix = "NAME_SUFFIX_UNSPECIFIED"
	NameSuffixSr                    NameSuffix = "SR"
	NameSuffixJr                    NameSuffix = "JR"
	NameSuffixIii                   NameSuffix = "III"
	NameSuffixIv                    NameSuffix = "IV"
	NameSuffixV                     NameSuffix = "V"
)

func (e NameSuffix) ToPointer() *NameSuffix {
	return &e
}
func (e *NameSuffix) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME_SUFFIX_UNSPECIFIED":
		fallthrough
	case "SR":
		fallthrough
	case "JR":
		fallthrough
	case "III":
		fallthrough
	case "IV":
		fallthrough
	case "V":
		*e = NameSuffix(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameSuffix: %v", v)
	}
}

// TaxIDType - The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
type TaxIDType string

const (
	TaxIDTypeTaxIDTypeUnspecified TaxIDType = "TAX_ID_TYPE_UNSPECIFIED"
	TaxIDTypeTaxIDTypeSsn         TaxIDType = "TAX_ID_TYPE_SSN"
	TaxIDTypeTaxIDTypeItin        TaxIDType = "TAX_ID_TYPE_ITIN"
	TaxIDTypeTaxIDTypeEin         TaxIDType = "TAX_ID_TYPE_EIN"
)

func (e TaxIDType) ToPointer() *TaxIDType {
	return &e
}
func (e *TaxIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TAX_ID_TYPE_UNSPECIFIED":
		fallthrough
	case "TAX_ID_TYPE_SSN":
		fallthrough
	case "TAX_ID_TYPE_ITIN":
		fallthrough
	case "TAX_ID_TYPE_EIN":
		*e = TaxIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxIDType: %v", v)
	}
}

// LegalNaturalPersonCreate - A legal natural person. This represents the full set of data for an individual. A Customer Identification Program (CIP) may be run on legal natural persons.
type LegalNaturalPersonCreate struct {
	// Indicates whether the person is an accredited investor
	AccreditedInvestor *bool `json:"accredited_investor,omitempty"`
	// Indicates whether the person is an adviser
	Adviser *bool `json:"adviser,omitempty"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	BirthDate DateCreate `json:"birth_date"`
	// This is used for tax (treaty) and country block list considerations Maximum list of two 2-char CLDR Code citizenship countries, e.g. US, CA
	CitizenshipCountries []string `json:"citizenship_countries"`
	// A list of ticker symbols in which the underlying person is a control person; control persons are defined as having significant influence over a company’s management and operations, typically through ownership of a large percentage of the company’s voting stock or through positions on the company’s board of directors or executive team
	ControlPersonCompanySymbols *string `json:"control_person_company_symbols,omitempty"`
	// Indicates the related owner record is an employee of the clearing broker's correspondent customer.
	CorrespondentEmployee *bool `json:"correspondent_employee,omitempty"`
	// A unique identifier referencing a Correspondent; A Client may have several operating Correspondents within its purview.
	CorrespondentID string `json:"correspondent_id"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	DeathDate *DateCreate `json:"death_date,omitempty"`
	// DBA (Doing Business As) names. Can list up to 5 associated with the Legal Natural Person
	DoingBusinessAs []string `json:"doing_business_as,omitempty"`
	// Object containing information pertaining to a investor's current employer including the name, address, and duration of employment.
	Employment EmploymentCreate `json:"employment"`
	// Family name of a natural person.
	FamilyName string `json:"family_name"`
	// The name of the FINRA-associated entity the underlying natural person is affiliated with.
	FinraAssociatedEntity *string `json:"finra_associated_entity,omitempty"`
	// Foreign identification
	ForeignIdentification *ForeignIdentificationCreate `json:"foreign_identification,omitempty"`
	// The given name of a natural person; Conventionally known as 'first name' in most English-speaking countries.
	GivenName string `json:"given_name"`
	// An identity verification result that clients may supply. This result represents data and confirmation attesting to identity verification.
	IdentityVerificationResult *IdentityVerificationResultCreate `json:"identity_verification_result,omitempty"`
	// Indicates whether the person is an institutional customer
	InstitutionalCustomer *bool `json:"institutional_customer,omitempty"`
	// A large trader.
	LargeTrader *LargeTraderCreate `json:"large_trader,omitempty"`
	// The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
	MaritalStatus *MaritalStatus `json:"marital_status,omitempty"`
	// Non-primary names representing a natural person; Name attributed to a person other than "Given" and "Family" names.
	MiddleNames *string `json:"middle_names,omitempty"`
	// The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
	NameSuffix *NameSuffix `json:"name_suffix,omitempty"`
	// Foreign Due Diligence for Legal Natural Persons required when a Legal Natural Person is the Primary Owner on a non-resident/non-citizen Account.
	NaturalPersonFdd *NaturalPersonFddCreate `json:"natural_person_fdd,omitempty"`
	// Non Citizenship Residency to facilitate non-Citizen lawful US residents to open domestic accounts.
	NonCitizenResidency *NonCitizenResidencyCreate `json:"non_citizen_residency,omitempty"`
	// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains).
	//
	//  In typical usage an address would be created via user input or from importing existing data, depending on the type of process.
	//
	//  Advice on address input / editing: - Use an i18n-ready address widget such as  https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of  fields outside countries where that field is used.
	//
	//  For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
	PersonalAddress PostalAddressCreate `json:"personal_address"`
	// A Party's self-disclosed list of names representing family members who are politically exposed.
	PoliticallyExposedImmediateFamilyNames []string `json:"politically_exposed_immediate_family_names,omitempty"`
	// A Party's self-disclosed list of named politically exposed organizations they are personally associated with.
	PoliticallyExposedOrganization *string `json:"politically_exposed_organization,omitempty"`
	// Boolean indicator whether the LNP is subject to backup withholding
	SubjectToBackupWithholding *bool `json:"subject_to_backup_withholding,omitempty"`
	// The full U.S. tax ID for a related person; Must be provided with `ITIN` or `SSN` tax ID type
	TaxID *string `json:"tax_id,omitempty"`
	// The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
	TaxIDType *TaxIDType `json:"tax_id_type,omitempty"`
	// Tax Profile pertaining to the Legal Entity or Natural Person.
	TaxProfile TaxProfileCreate `json:"tax_profile"`
}

func (o *LegalNaturalPersonCreate) GetAccreditedInvestor() *bool {
	if o == nil {
		return nil
	}
	return o.AccreditedInvestor
}

func (o *LegalNaturalPersonCreate) GetAdviser() *bool {
	if o == nil {
		return nil
	}
	return o.Adviser
}

func (o *LegalNaturalPersonCreate) GetBirthDate() DateCreate {
	if o == nil {
		return DateCreate{}
	}
	return o.BirthDate
}

func (o *LegalNaturalPersonCreate) GetCitizenshipCountries() []string {
	if o == nil {
		return []string{}
	}
	return o.CitizenshipCountries
}

func (o *LegalNaturalPersonCreate) GetControlPersonCompanySymbols() *string {
	if o == nil {
		return nil
	}
	return o.ControlPersonCompanySymbols
}

func (o *LegalNaturalPersonCreate) GetCorrespondentEmployee() *bool {
	if o == nil {
		return nil
	}
	return o.CorrespondentEmployee
}

func (o *LegalNaturalPersonCreate) GetCorrespondentID() string {
	if o == nil {
		return ""
	}
	return o.CorrespondentID
}

func (o *LegalNaturalPersonCreate) GetDeathDate() *DateCreate {
	if o == nil {
		return nil
	}
	return o.DeathDate
}

func (o *LegalNaturalPersonCreate) GetDoingBusinessAs() []string {
	if o == nil {
		return nil
	}
	return o.DoingBusinessAs
}

func (o *LegalNaturalPersonCreate) GetEmployment() EmploymentCreate {
	if o == nil {
		return EmploymentCreate{}
	}
	return o.Employment
}

func (o *LegalNaturalPersonCreate) GetFamilyName() string {
	if o == nil {
		return ""
	}
	return o.FamilyName
}

func (o *LegalNaturalPersonCreate) GetFinraAssociatedEntity() *string {
	if o == nil {
		return nil
	}
	return o.FinraAssociatedEntity
}

func (o *LegalNaturalPersonCreate) GetForeignIdentification() *ForeignIdentificationCreate {
	if o == nil {
		return nil
	}
	return o.ForeignIdentification
}

func (o *LegalNaturalPersonCreate) GetGivenName() string {
	if o == nil {
		return ""
	}
	return o.GivenName
}

func (o *LegalNaturalPersonCreate) GetIdentityVerificationResult() *IdentityVerificationResultCreate {
	if o == nil {
		return nil
	}
	return o.IdentityVerificationResult
}

func (o *LegalNaturalPersonCreate) GetInstitutionalCustomer() *bool {
	if o == nil {
		return nil
	}
	return o.InstitutionalCustomer
}

func (o *LegalNaturalPersonCreate) GetLargeTrader() *LargeTraderCreate {
	if o == nil {
		return nil
	}
	return o.LargeTrader
}

func (o *LegalNaturalPersonCreate) GetMaritalStatus() *MaritalStatus {
	if o == nil {
		return nil
	}
	return o.MaritalStatus
}

func (o *LegalNaturalPersonCreate) GetMiddleNames() *string {
	if o == nil {
		return nil
	}
	return o.MiddleNames
}

func (o *LegalNaturalPersonCreate) GetNameSuffix() *NameSuffix {
	if o == nil {
		return nil
	}
	return o.NameSuffix
}

func (o *LegalNaturalPersonCreate) GetNaturalPersonFdd() *NaturalPersonFddCreate {
	if o == nil {
		return nil
	}
	return o.NaturalPersonFdd
}

func (o *LegalNaturalPersonCreate) GetNonCitizenResidency() *NonCitizenResidencyCreate {
	if o == nil {
		return nil
	}
	return o.NonCitizenResidency
}

func (o *LegalNaturalPersonCreate) GetPersonalAddress() PostalAddressCreate {
	if o == nil {
		return PostalAddressCreate{}
	}
	return o.PersonalAddress
}

func (o *LegalNaturalPersonCreate) GetPoliticallyExposedImmediateFamilyNames() []string {
	if o == nil {
		return nil
	}
	return o.PoliticallyExposedImmediateFamilyNames
}

func (o *LegalNaturalPersonCreate) GetPoliticallyExposedOrganization() *string {
	if o == nil {
		return nil
	}
	return o.PoliticallyExposedOrganization
}

func (o *LegalNaturalPersonCreate) GetSubjectToBackupWithholding() *bool {
	if o == nil {
		return nil
	}
	return o.SubjectToBackupWithholding
}

func (o *LegalNaturalPersonCreate) GetTaxID() *string {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *LegalNaturalPersonCreate) GetTaxIDType() *TaxIDType {
	if o == nil {
		return nil
	}
	return o.TaxIDType
}

func (o *LegalNaturalPersonCreate) GetTaxProfile() TaxProfileCreate {
	if o == nil {
		return TaxProfileCreate{}
	}
	return o.TaxProfile
}
