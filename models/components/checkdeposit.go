// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// CheckDepositAmount - The amount in USD.
type CheckDepositAmount struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CheckDepositAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CheckDepositType - The type of retirement contribution.
type CheckDepositType string

const (
	CheckDepositTypeTypeUnspecified           CheckDepositType = "TYPE_UNSPECIFIED"
	CheckDepositTypeRegular                   CheckDepositType = "REGULAR"
	CheckDepositTypeEmployee                  CheckDepositType = "EMPLOYEE"
	CheckDepositTypeEmployer                  CheckDepositType = "EMPLOYER"
	CheckDepositTypeRecharacterization        CheckDepositType = "RECHARACTERIZATION"
	CheckDepositTypeRollover60Day             CheckDepositType = "ROLLOVER_60_DAY"
	CheckDepositTypeRolloverDirect            CheckDepositType = "ROLLOVER_DIRECT"
	CheckDepositTypeTransfer                  CheckDepositType = "TRANSFER"
	CheckDepositTypeTrusteeFee                CheckDepositType = "TRUSTEE_FEE"
	CheckDepositTypeConversion                CheckDepositType = "CONVERSION"
	CheckDepositTypeRepayment                 CheckDepositType = "REPAYMENT"
	CheckDepositTypeContributionNonReportable CheckDepositType = "CONTRIBUTION_NON_REPORTABLE"
)

func (e CheckDepositType) ToPointer() *CheckDepositType {
	return &e
}

// CheckDepositRetirementContribution - The retirement contribution details.
type CheckDepositRetirementContribution struct {
	// Tax year for which the contribution is applied. Current year is always valid; prior year is only valid before tax deadline. Must be in "YYYY" format.
	TaxYear *int `json:"tax_year,omitempty"`
	// The type of retirement contribution.
	Type *CheckDepositType `json:"type,omitempty"`
}

func (o *CheckDepositRetirementContribution) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *CheckDepositRetirementContribution) GetType() *CheckDepositType {
	if o == nil {
		return nil
	}
	return o.Type
}

// CheckDepositStateState - The high level state of a transfer, one of:
// - `PROCESSING` - The transfer is being processed and will be posted if successful.
// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
// - `COMPLETED` - The transfer has been batched and completed.
// - `REJECTED` - The transfer was rejected.
// - `CANCELED` - The transfer was canceled.
// - `RETURNED` - The transfer was returned.
// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
type CheckDepositStateState string

const (
	CheckDepositStateStateStateUnspecified CheckDepositStateState = "STATE_UNSPECIFIED"
	CheckDepositStateStateProcessing       CheckDepositStateState = "PROCESSING"
	CheckDepositStateStatePendingReview    CheckDepositStateState = "PENDING_REVIEW"
	CheckDepositStateStatePosted           CheckDepositStateState = "POSTED"
	CheckDepositStateStateCompleted        CheckDepositStateState = "COMPLETED"
	CheckDepositStateStateRejected         CheckDepositStateState = "REJECTED"
	CheckDepositStateStateCanceled         CheckDepositStateState = "CANCELED"
	CheckDepositStateStateReturned         CheckDepositStateState = "RETURNED"
	CheckDepositStateStatePostponed        CheckDepositStateState = "POSTPONED"
)

func (e CheckDepositStateState) ToPointer() *CheckDepositStateState {
	return &e
}

// CheckDepositState - The current state of the check deposit.
type CheckDepositState struct {
	// The user or service that triggered the state update.
	Actor *string `json:"actor,omitempty"`
	// Additional description of the transfer state.
	Message *string `json:"message,omitempty"`
	// Additional metadata relating to the transfer state. Included data depends on the state, e.g.:
	//  - Rejection reasons are included when the `state` is `REJECTED`
	//  - Reason and comment are included when `state` is `CANCELED`
	Metadata map[string]any `json:"metadata,omitempty"`
	// The high level state of a transfer, one of:
	// - `PROCESSING` - The transfer is being processed and will be posted if successful.
	// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
	// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
	// - `COMPLETED` - The transfer has been batched and completed.
	// - `REJECTED` - The transfer was rejected.
	// - `CANCELED` - The transfer was canceled.
	// - `RETURNED` - The transfer was returned.
	// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
	State *CheckDepositStateState `json:"state,omitempty"`
	// The time of the state update.
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

func (c CheckDepositState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CheckDepositState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CheckDepositState) GetActor() *string {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *CheckDepositState) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *CheckDepositState) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CheckDepositState) GetState() *CheckDepositStateState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *CheckDepositState) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

// CheckDeposit - A deposit transfer using the check mechanism.
type CheckDeposit struct {
	// The amount in USD.
	Amount *CheckDepositAmount `json:"amount,omitempty"`
	// The resource name of the check deposit. Format: accounts/{account}/checkDeposits/{check_deposit}
	Name *string `json:"name,omitempty"`
	// The retirement contribution details.
	RetirementContribution *CheckDepositRetirementContribution `json:"retirement_contribution,omitempty"`
	// The current state of the check deposit.
	State *CheckDepositState `json:"state,omitempty"`
}

func (o *CheckDeposit) GetAmount() *CheckDepositAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CheckDeposit) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CheckDeposit) GetRetirementContribution() *CheckDepositRetirementContribution {
	if o == nil {
		return nil
	}
	return o.RetirementContribution
}

func (o *CheckDeposit) GetState() *CheckDepositState {
	if o == nil {
		return nil
	}
	return o.State
}
