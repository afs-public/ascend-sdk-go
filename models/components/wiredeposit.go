// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// WireDepositAmount - The amount of the wire deposit being issued to the investor in USD
type WireDepositAmount struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *WireDepositAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// WireDepositType - The type of retirement contribution.
type WireDepositType string

const (
	WireDepositTypeTypeUnspecified           WireDepositType = "TYPE_UNSPECIFIED"
	WireDepositTypeRegular                   WireDepositType = "REGULAR"
	WireDepositTypeEmployee                  WireDepositType = "EMPLOYEE"
	WireDepositTypeEmployer                  WireDepositType = "EMPLOYER"
	WireDepositTypeRecharacterization        WireDepositType = "RECHARACTERIZATION"
	WireDepositTypeRollover60Day             WireDepositType = "ROLLOVER_60_DAY"
	WireDepositTypeRolloverDirect            WireDepositType = "ROLLOVER_DIRECT"
	WireDepositTypeTransfer                  WireDepositType = "TRANSFER"
	WireDepositTypeTrusteeFee                WireDepositType = "TRUSTEE_FEE"
	WireDepositTypeConversion                WireDepositType = "CONVERSION"
	WireDepositTypeRepayment                 WireDepositType = "REPAYMENT"
	WireDepositTypeContributionNonReportable WireDepositType = "CONTRIBUTION_NON_REPORTABLE"
)

func (e WireDepositType) ToPointer() *WireDepositType {
	return &e
}

// WireDepositRetirementContribution - The retirement contribution details
type WireDepositRetirementContribution struct {
	// Tax year for which the contribution is applied. Current year is always valid; prior year is only valid before tax deadline. Must be in "YYYY" format.
	TaxYear *int `json:"tax_year,omitempty"`
	// The type of retirement contribution.
	Type *WireDepositType `json:"type,omitempty"`
}

func (o *WireDepositRetirementContribution) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *WireDepositRetirementContribution) GetType() *WireDepositType {
	if o == nil {
		return nil
	}
	return o.Type
}

// WireDepositStateState - The high level state of a transfer, one of:
// - `PROCESSING` - The transfer is being processed and will be posted if successful.
// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
// - `COMPLETED` - The transfer has been batched and completed.
// - `REJECTED` - The transfer was rejected.
// - `CANCELED` - The transfer was canceled.
// - `RETURNED` - The transfer was returned.
// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
type WireDepositStateState string

const (
	WireDepositStateStateStateUnspecified WireDepositStateState = "STATE_UNSPECIFIED"
	WireDepositStateStateProcessing       WireDepositStateState = "PROCESSING"
	WireDepositStateStatePendingReview    WireDepositStateState = "PENDING_REVIEW"
	WireDepositStateStatePosted           WireDepositStateState = "POSTED"
	WireDepositStateStateCompleted        WireDepositStateState = "COMPLETED"
	WireDepositStateStateRejected         WireDepositStateState = "REJECTED"
	WireDepositStateStateCanceled         WireDepositStateState = "CANCELED"
	WireDepositStateStateReturned         WireDepositStateState = "RETURNED"
	WireDepositStateStatePostponed        WireDepositStateState = "POSTPONED"
)

func (e WireDepositStateState) ToPointer() *WireDepositStateState {
	return &e
}

// WireDepositState - The current state of the wire deposit
type WireDepositState struct {
	// The user or service that triggered the state update.
	Actor *string `json:"actor,omitempty"`
	// Additional description of the transfer state.
	Message *string `json:"message,omitempty"`
	// Additional metadata relating to the transfer state. Included data depends on the state, e.g.:
	//  - Rejection reasons are included when the `state` is `REJECTED`
	//  - Reason and comment are included when `state` is `CANCELED`
	Metadata map[string]any `json:"metadata,omitempty"`
	// The high level state of a transfer, one of:
	// - `PROCESSING` - The transfer is being processed and will be posted if successful.
	// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
	// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
	// - `COMPLETED` - The transfer has been batched and completed.
	// - `REJECTED` - The transfer was rejected.
	// - `CANCELED` - The transfer was canceled.
	// - `RETURNED` - The transfer was returned.
	// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
	State *WireDepositStateState `json:"state,omitempty"`
	// The time of the state update.
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

func (w WireDepositState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WireDepositState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *WireDepositState) GetActor() *string {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *WireDepositState) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *WireDepositState) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *WireDepositState) GetState() *WireDepositStateState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *WireDepositState) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

// WireDeposit - A deposit transfer using the wire mechanism
type WireDeposit struct {
	// The amount of the wire deposit being issued to the investor in USD
	Amount *WireDepositAmount `json:"amount,omitempty"`
	// External reference identifier supplied by the bank
	BankReferenceID *string `json:"bank_reference_id,omitempty"`
	// The FedWire reference number for the deposit
	FedReferenceNumber *string `json:"fed_reference_number,omitempty"`
	// Full name of the wire deposit which contains account_id and deposit transaction id
	Name *string `json:"name,omitempty"`
	// The retirement contribution details
	RetirementContribution *WireDepositRetirementContribution `json:"retirement_contribution,omitempty"`
	// Whether this wire deposit is a return of a wire withdrawal
	ReturnedWireWithdrawal *bool `json:"returned_wire_withdrawal,omitempty"`
	// The current state of the wire deposit
	State *WireDepositState `json:"state,omitempty"`
	// The wire instructions received by Apex's bank for the wire deposit
	WireInstructions []string `json:"wire_instructions,omitempty"`
}

func (o *WireDeposit) GetAmount() *WireDepositAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *WireDeposit) GetBankReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.BankReferenceID
}

func (o *WireDeposit) GetFedReferenceNumber() *string {
	if o == nil {
		return nil
	}
	return o.FedReferenceNumber
}

func (o *WireDeposit) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *WireDeposit) GetRetirementContribution() *WireDepositRetirementContribution {
	if o == nil {
		return nil
	}
	return o.RetirementContribution
}

func (o *WireDeposit) GetReturnedWireWithdrawal() *bool {
	if o == nil {
		return nil
	}
	return o.ReturnedWireWithdrawal
}

func (o *WireDeposit) GetState() *WireDepositState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *WireDeposit) GetWireInstructions() []string {
	if o == nil {
		return nil
	}
	return o.WireInstructions
}
