// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// TransferScheduleSummaryAmount - A cash amount in the format of decimal value. An unset or empty value represents a full disbursement
type TransferScheduleSummaryAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TransferScheduleSummaryAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// Direction - Flag indicating whether this is a deposit or withdrawal transfer
type Direction string

const (
	DirectionDirectionUnspecified Direction = "DIRECTION_UNSPECIFIED"
	DirectionDeposit              Direction = "DEPOSIT"
	DirectionWithdrawal           Direction = "WITHDRAWAL"
	DirectionJournal              Direction = "JOURNAL"
)

func (e Direction) ToPointer() *Direction {
	return &e
}

// TransferScheduleSummaryMechanism - The mechanism used for this transfer schedule
type TransferScheduleSummaryMechanism string

const (
	TransferScheduleSummaryMechanismAch         TransferScheduleSummaryMechanism = "ACH"
	TransferScheduleSummaryMechanismCashJournal TransferScheduleSummaryMechanism = "CASH_JOURNAL"
	TransferScheduleSummaryMechanismCheck       TransferScheduleSummaryMechanism = "CHECK"
	TransferScheduleSummaryMechanismWire        TransferScheduleSummaryMechanism = "WIRE"
)

func (e TransferScheduleSummaryMechanism) ToPointer() *TransferScheduleSummaryMechanism {
	return &e
}

// TransferScheduleSummaryTemporalTaxYear - A temporal tax year value. This will always evaluate to a year based on the date the transfer was initiated.
type TransferScheduleSummaryTemporalTaxYear string

const (
	TransferScheduleSummaryTemporalTaxYearTemporalTaxYearUnspecified TransferScheduleSummaryTemporalTaxYear = "TEMPORAL_TAX_YEAR_UNSPECIFIED"
	TransferScheduleSummaryTemporalTaxYearCurrentCalendarYear        TransferScheduleSummaryTemporalTaxYear = "CURRENT_CALENDAR_YEAR"
	TransferScheduleSummaryTemporalTaxYearMinimumTaxYear             TransferScheduleSummaryTemporalTaxYear = "MINIMUM_TAX_YEAR"
)

func (e TransferScheduleSummaryTemporalTaxYear) ToPointer() *TransferScheduleSummaryTemporalTaxYear {
	return &e
}

// TransferScheduleSummaryType - The type of retirement contribution.
type TransferScheduleSummaryType string

const (
	TransferScheduleSummaryTypeTypeUnspecified           TransferScheduleSummaryType = "TYPE_UNSPECIFIED"
	TransferScheduleSummaryTypeRegular                   TransferScheduleSummaryType = "REGULAR"
	TransferScheduleSummaryTypeEmployee                  TransferScheduleSummaryType = "EMPLOYEE"
	TransferScheduleSummaryTypeEmployer                  TransferScheduleSummaryType = "EMPLOYER"
	TransferScheduleSummaryTypeRecharacterization        TransferScheduleSummaryType = "RECHARACTERIZATION"
	TransferScheduleSummaryTypeRollover60Day             TransferScheduleSummaryType = "ROLLOVER_60_DAY"
	TransferScheduleSummaryTypeRolloverDirect            TransferScheduleSummaryType = "ROLLOVER_DIRECT"
	TransferScheduleSummaryTypeTransfer                  TransferScheduleSummaryType = "TRANSFER"
	TransferScheduleSummaryTypeTrusteeFee                TransferScheduleSummaryType = "TRUSTEE_FEE"
	TransferScheduleSummaryTypeConversion                TransferScheduleSummaryType = "CONVERSION"
	TransferScheduleSummaryTypeRepayment                 TransferScheduleSummaryType = "REPAYMENT"
	TransferScheduleSummaryTypeContributionNonReportable TransferScheduleSummaryType = "CONTRIBUTION_NON_REPORTABLE"
)

func (e TransferScheduleSummaryType) ToPointer() *TransferScheduleSummaryType {
	return &e
}

// TransferScheduleSummaryRetirementContribution - The contribution info for a retirement account
type TransferScheduleSummaryRetirementContribution struct {
	// An explicit tax year value. The current year is always valid; and the prior year is valid only before the tax deadline. Must be in "YYYY" format.
	TaxYear *int `json:"tax_year,omitempty"`
	// A temporal tax year value. This will always evaluate to a year based on the date the transfer was initiated.
	TemporalTaxYear *TransferScheduleSummaryTemporalTaxYear `json:"temporal_tax_year,omitempty"`
	// The type of retirement contribution.
	Type *TransferScheduleSummaryType `json:"type,omitempty"`
}

func (o *TransferScheduleSummaryRetirementContribution) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *TransferScheduleSummaryRetirementContribution) GetTemporalTaxYear() *TransferScheduleSummaryTemporalTaxYear {
	if o == nil {
		return nil
	}
	return o.TemporalTaxYear
}

func (o *TransferScheduleSummaryRetirementContribution) GetType() *TransferScheduleSummaryType {
	if o == nil {
		return nil
	}
	return o.Type
}

// TransferScheduleSummaryRetirementDistributionAmount - Fixed USD amount to withhold for taxes.
type TransferScheduleSummaryRetirementDistributionAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TransferScheduleSummaryRetirementDistributionAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TransferScheduleSummaryPercentage - Percentage of total disbursement amount to withhold for taxes.
type TransferScheduleSummaryPercentage struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TransferScheduleSummaryPercentage) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TransferScheduleSummaryFederalTaxWithholding - The federal tax withholding.
type TransferScheduleSummaryFederalTaxWithholding struct {
	// Fixed USD amount to withhold for taxes.
	Amount *TransferScheduleSummaryRetirementDistributionAmount `json:"amount,omitempty"`
	// Percentage of total disbursement amount to withhold for taxes.
	Percentage *TransferScheduleSummaryPercentage `json:"percentage,omitempty"`
}

func (o *TransferScheduleSummaryFederalTaxWithholding) GetAmount() *TransferScheduleSummaryRetirementDistributionAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransferScheduleSummaryFederalTaxWithholding) GetPercentage() *TransferScheduleSummaryPercentage {
	if o == nil {
		return nil
	}
	return o.Percentage
}

// TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount - Fixed USD amount to withhold for taxes.
type TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TransferScheduleSummaryRetirementDistributionPercentage - Percentage of total disbursement amount to withhold for taxes.
type TransferScheduleSummaryRetirementDistributionPercentage struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TransferScheduleSummaryRetirementDistributionPercentage) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TransferScheduleSummaryStateTaxWithholding - The state tax withholding.
type TransferScheduleSummaryStateTaxWithholding struct {
	// Fixed USD amount to withhold for taxes.
	Amount *TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount `json:"amount,omitempty"`
	// Percentage of total disbursement amount to withhold for taxes.
	Percentage *TransferScheduleSummaryRetirementDistributionPercentage `json:"percentage,omitempty"`
}

func (o *TransferScheduleSummaryStateTaxWithholding) GetAmount() *TransferScheduleSummaryRetirementDistributionStateTaxWithholdingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransferScheduleSummaryStateTaxWithholding) GetPercentage() *TransferScheduleSummaryRetirementDistributionPercentage {
	if o == nil {
		return nil
	}
	return o.Percentage
}

// TransferScheduleSummaryRetirementDistributionType - The type of retirement distribution.
type TransferScheduleSummaryRetirementDistributionType string

const (
	TransferScheduleSummaryRetirementDistributionTypeTypeUnspecified                            TransferScheduleSummaryRetirementDistributionType = "TYPE_UNSPECIFIED"
	TransferScheduleSummaryRetirementDistributionTypeNormal                                     TransferScheduleSummaryRetirementDistributionType = "NORMAL"
	TransferScheduleSummaryRetirementDistributionTypeDisability                                 TransferScheduleSummaryRetirementDistributionType = "DISABILITY"
	TransferScheduleSummaryRetirementDistributionTypeSosepp                                     TransferScheduleSummaryRetirementDistributionType = "SOSEPP"
	TransferScheduleSummaryRetirementDistributionTypePremature                                  TransferScheduleSummaryRetirementDistributionType = "PREMATURE"
	TransferScheduleSummaryRetirementDistributionTypeDeath                                      TransferScheduleSummaryRetirementDistributionType = "DEATH"
	TransferScheduleSummaryRetirementDistributionTypeExcessContributionRemovalBeforeTaxDeadline TransferScheduleSummaryRetirementDistributionType = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE"
	TransferScheduleSummaryRetirementDistributionTypeExcessContributionRemovalAfterTaxDeadline  TransferScheduleSummaryRetirementDistributionType = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE"
	TransferScheduleSummaryRetirementDistributionTypeRolloverToQualifiedPlan                    TransferScheduleSummaryRetirementDistributionType = "ROLLOVER_TO_QUALIFIED_PLAN"
	TransferScheduleSummaryRetirementDistributionTypeRolloverToIra                              TransferScheduleSummaryRetirementDistributionType = "ROLLOVER_TO_IRA"
	TransferScheduleSummaryRetirementDistributionTypeDistributionTransfer                       TransferScheduleSummaryRetirementDistributionType = "DISTRIBUTION_TRANSFER"
	TransferScheduleSummaryRetirementDistributionTypeRecharacterizationPriorYear                TransferScheduleSummaryRetirementDistributionType = "RECHARACTERIZATION_PRIOR_YEAR"
	TransferScheduleSummaryRetirementDistributionTypeRecharacterizationCurrentYear              TransferScheduleSummaryRetirementDistributionType = "RECHARACTERIZATION_CURRENT_YEAR"
	TransferScheduleSummaryRetirementDistributionTypeDistributionConversion                     TransferScheduleSummaryRetirementDistributionType = "DISTRIBUTION_CONVERSION"
	TransferScheduleSummaryRetirementDistributionTypeManagementFee                              TransferScheduleSummaryRetirementDistributionType = "MANAGEMENT_FEE"
	TransferScheduleSummaryRetirementDistributionTypePlanLoan401K                               TransferScheduleSummaryRetirementDistributionType = "PLAN_LOAN_401K"
	TransferScheduleSummaryRetirementDistributionTypePrematureSimpleIraLessThan2Years           TransferScheduleSummaryRetirementDistributionType = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS"
	TransferScheduleSummaryRetirementDistributionTypeNormalRothIraGreaterThan5Years             TransferScheduleSummaryRetirementDistributionType = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS"
	TransferScheduleSummaryRetirementDistributionTypeNetIncomeAttributable                      TransferScheduleSummaryRetirementDistributionType = "NET_INCOME_ATTRIBUTABLE"
	TransferScheduleSummaryRetirementDistributionTypeRevocation                                 TransferScheduleSummaryRetirementDistributionType = "REVOCATION"
	TransferScheduleSummaryRetirementDistributionTypeNonReportable                              TransferScheduleSummaryRetirementDistributionType = "NON_REPORTABLE"
)

func (e TransferScheduleSummaryRetirementDistributionType) ToPointer() *TransferScheduleSummaryRetirementDistributionType {
	return &e
}

// TransferScheduleSummaryRetirementDistribution - The distribution info for a retirement account
type TransferScheduleSummaryRetirementDistribution struct {
	// The federal tax withholding.
	FederalTaxWithholding *TransferScheduleSummaryFederalTaxWithholding `json:"federal_tax_withholding,omitempty"`
	// The institution receiving retirement funds when performing a transfer to an identical retirement account type at a different financial institution. This is required for check and wire withdrawals because we can't always identify the institution using the transfer instructions. For cash journals this value will default to "Apex Clearing", regardless of what is passed in here
	ReceivingInstitution *string `json:"receiving_institution,omitempty"`
	// The state tax withholding.
	StateTaxWithholding *TransferScheduleSummaryStateTaxWithholding `json:"state_tax_withholding,omitempty"`
	// Whether or not this distribution has a state withholding waiver.
	StateWithholdingWaiver *bool `json:"state_withholding_waiver,omitempty"`
	// Tax year for which the distribution is applied.
	TaxYear *int `json:"tax_year,omitempty"`
	// The type of retirement distribution.
	Type *TransferScheduleSummaryRetirementDistributionType `json:"type,omitempty"`
}

func (o *TransferScheduleSummaryRetirementDistribution) GetFederalTaxWithholding() *TransferScheduleSummaryFederalTaxWithholding {
	if o == nil {
		return nil
	}
	return o.FederalTaxWithholding
}

func (o *TransferScheduleSummaryRetirementDistribution) GetReceivingInstitution() *string {
	if o == nil {
		return nil
	}
	return o.ReceivingInstitution
}

func (o *TransferScheduleSummaryRetirementDistribution) GetStateTaxWithholding() *TransferScheduleSummaryStateTaxWithholding {
	if o == nil {
		return nil
	}
	return o.StateTaxWithholding
}

func (o *TransferScheduleSummaryRetirementDistribution) GetStateWithholdingWaiver() *bool {
	if o == nil {
		return nil
	}
	return o.StateWithholdingWaiver
}

func (o *TransferScheduleSummaryRetirementDistribution) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *TransferScheduleSummaryRetirementDistribution) GetType() *TransferScheduleSummaryRetirementDistributionType {
	if o == nil {
		return nil
	}
	return o.Type
}

// TransferScheduleSummaryEndDate - The schedule end date if there is a finite number of occurrences
type TransferScheduleSummaryEndDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *TransferScheduleSummaryEndDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *TransferScheduleSummaryEndDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *TransferScheduleSummaryEndDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// StartDate - The schedule start date
type StartDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *StartDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *StartDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *StartDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// TransferScheduleSummaryState - The state of the represented schedule
type TransferScheduleSummaryState string

const (
	TransferScheduleSummaryStateActive    TransferScheduleSummaryState = "ACTIVE"
	TransferScheduleSummaryStateCanceled  TransferScheduleSummaryState = "CANCELED"
	TransferScheduleSummaryStateCompleted TransferScheduleSummaryState = "COMPLETED"
)

func (e TransferScheduleSummaryState) ToPointer() *TransferScheduleSummaryState {
	return &e
}

// TransferScheduleSummaryTimeUnit - The time unit used to calculate the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
type TransferScheduleSummaryTimeUnit string

const (
	TransferScheduleSummaryTimeUnitDay   TransferScheduleSummaryTimeUnit = "DAY"
	TransferScheduleSummaryTimeUnitWeek  TransferScheduleSummaryTimeUnit = "WEEK"
	TransferScheduleSummaryTimeUnitMonth TransferScheduleSummaryTimeUnit = "MONTH"
)

func (e TransferScheduleSummaryTimeUnit) ToPointer() *TransferScheduleSummaryTimeUnit {
	return &e
}

// ScheduleProperties - Common schedule properties
type ScheduleProperties struct {
	// The schedule end date if there is a finite number of occurrences
	EndDate *TransferScheduleSummaryEndDate `json:"end_date,omitempty"`
	// The number of occurrences (empty or 0 indicates unlimited occurrences)
	Occurrences *int `json:"occurrences,omitempty"`
	// The schedule start date
	StartDate *StartDate `json:"start_date,omitempty"`
	// The state of the represented schedule
	State *TransferScheduleSummaryState `json:"state,omitempty"`
	// The time unit used to calculate the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
	TimeUnit *TransferScheduleSummaryTimeUnit `json:"time_unit,omitempty"`
	// The multiplier used to determine the length of the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
	UnitMultiplier *int `json:"unit_multiplier,omitempty"`
}

func (o *ScheduleProperties) GetEndDate() *TransferScheduleSummaryEndDate {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *ScheduleProperties) GetOccurrences() *int {
	if o == nil {
		return nil
	}
	return o.Occurrences
}

func (o *ScheduleProperties) GetStartDate() *StartDate {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *ScheduleProperties) GetState() *TransferScheduleSummaryState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *ScheduleProperties) GetTimeUnit() *TransferScheduleSummaryTimeUnit {
	if o == nil {
		return nil
	}
	return o.TimeUnit
}

func (o *ScheduleProperties) GetUnitMultiplier() *int {
	if o == nil {
		return nil
	}
	return o.UnitMultiplier
}

// TransferScheduleSummary - A transfer schedule summary that contains all of the common properties a schedules across rails
type TransferScheduleSummary struct {
	// A cash amount in the format of decimal value. An unset or empty value represents a full disbursement
	Amount *TransferScheduleSummaryAmount `json:"amount,omitempty"`
	// External identifier supplied by the API caller. Each request must have a unique pairing of client_schedule_id and account
	ClientScheduleID *string `json:"client_schedule_id,omitempty"`
	// Flag indicating whether this is a deposit or withdrawal transfer
	Direction *Direction `json:"direction,omitempty"`
	// The mechanism used for this transfer schedule
	Mechanism *TransferScheduleSummaryMechanism `json:"mechanism,omitempty"`
	// The contribution info for a retirement account
	RetirementContribution *TransferScheduleSummaryRetirementContribution `json:"retirement_contribution,omitempty"`
	// The distribution info for a retirement account
	RetirementDistribution *TransferScheduleSummaryRetirementDistribution `json:"retirement_distribution,omitempty"`
	// Common schedule properties
	ScheduleProperties *ScheduleProperties `json:"schedule_properties,omitempty"`
	// The name of the schedule resource this detail represents
	TransferSchedule *string `json:"transfer_schedule,omitempty"`
}

func (o *TransferScheduleSummary) GetAmount() *TransferScheduleSummaryAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransferScheduleSummary) GetClientScheduleID() *string {
	if o == nil {
		return nil
	}
	return o.ClientScheduleID
}

func (o *TransferScheduleSummary) GetDirection() *Direction {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *TransferScheduleSummary) GetMechanism() *TransferScheduleSummaryMechanism {
	if o == nil {
		return nil
	}
	return o.Mechanism
}

func (o *TransferScheduleSummary) GetRetirementContribution() *TransferScheduleSummaryRetirementContribution {
	if o == nil {
		return nil
	}
	return o.RetirementContribution
}

func (o *TransferScheduleSummary) GetRetirementDistribution() *TransferScheduleSummaryRetirementDistribution {
	if o == nil {
		return nil
	}
	return o.RetirementDistribution
}

func (o *TransferScheduleSummary) GetScheduleProperties() *ScheduleProperties {
	if o == nil {
		return nil
	}
	return o.ScheduleProperties
}

func (o *TransferScheduleSummary) GetTransferSchedule() *string {
	if o == nil {
		return nil
	}
	return o.TransferSchedule
}
