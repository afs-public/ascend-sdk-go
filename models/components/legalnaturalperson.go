// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// BirthDate - The legal day, month, and year of birth for a natural person.
type BirthDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *BirthDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *BirthDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *BirthDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// DeathDate - The day, month, and year of death of a legal natural person
type DeathDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *DeathDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *DeathDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *DeathDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EmployerAddress - The data structure containing attributes describing the location of an investor's employer. If input, the required fields within the `employer_address` object include:
//   - `administrative_area`
//   - `region_code` - 2 character CLDR Code
//   - `postal_code`
//   - `locality`
//   - `address_lines` - max 5 lines
type EmployerAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *EmployerAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *EmployerAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *EmployerAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *EmployerAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *EmployerAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *EmployerAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *EmployerAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *EmployerAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *EmployerAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *EmployerAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *EmployerAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// LegalNaturalPersonEmploymentStatus - Classifies in what capacity (or if) the underlying natural person holds a job
type LegalNaturalPersonEmploymentStatus string

const (
	LegalNaturalPersonEmploymentStatusStatusUnspecified LegalNaturalPersonEmploymentStatus = "STATUS_UNSPECIFIED"
	LegalNaturalPersonEmploymentStatusEmployed          LegalNaturalPersonEmploymentStatus = "EMPLOYED"
	LegalNaturalPersonEmploymentStatusSelfEmployed      LegalNaturalPersonEmploymentStatus = "SELF_EMPLOYED"
	LegalNaturalPersonEmploymentStatusUnemployed        LegalNaturalPersonEmploymentStatus = "UNEMPLOYED"
	LegalNaturalPersonEmploymentStatusRetired           LegalNaturalPersonEmploymentStatus = "RETIRED"
	LegalNaturalPersonEmploymentStatusStudent           LegalNaturalPersonEmploymentStatus = "STUDENT"
)

func (e LegalNaturalPersonEmploymentStatus) ToPointer() *LegalNaturalPersonEmploymentStatus {
	return &e
}

// Employment - Object containing information pertaining to a investor's current employer including the name, address, and duration of employment.
type Employment struct {
	// The business name of an investor's employer.
	Employer *string `json:"employer,omitempty"`
	// The data structure containing attributes describing the location of an investor's employer. If input, the required fields within the `employer_address` object include:
	//  - `administrative_area`
	//  - `region_code` - 2 character CLDR Code
	//  - `postal_code`
	//  - `locality`
	//  - `address_lines` - max 5 lines
	EmployerAddress *EmployerAddress `json:"employer_address,omitempty"`
	// System-generated GUID representing the employment record of a natural person
	EmploymentID *string `json:"employment_id,omitempty"`
	// Classifies in what capacity (or if) the underlying natural person holds a job
	EmploymentStatus *LegalNaturalPersonEmploymentStatus `json:"employment_status,omitempty"`
	// **Field Dependencies:**
	//
	// Required if `employment_status` is one of:
	//   - `EMPLOYED`
	//   - `SELF_EMPLOYED`
	Occupation *string `json:"occupation,omitempty"`
	// **Field Dependencies:**
	//
	// Required if `employment_status` is one of:
	//   - `EMPLOYED`
	//   - `SELF_EMPLOYED`
	//
	// Otherwise, must be empty.
	StartYear *int `json:"start_year,omitempty"`
}

func (o *Employment) GetEmployer() *string {
	if o == nil {
		return nil
	}
	return o.Employer
}

func (o *Employment) GetEmployerAddress() *EmployerAddress {
	if o == nil {
		return nil
	}
	return o.EmployerAddress
}

func (o *Employment) GetEmploymentID() *string {
	if o == nil {
		return nil
	}
	return o.EmploymentID
}

func (o *Employment) GetEmploymentStatus() *LegalNaturalPersonEmploymentStatus {
	if o == nil {
		return nil
	}
	return o.EmploymentStatus
}

func (o *Employment) GetOccupation() *string {
	if o == nil {
		return nil
	}
	return o.Occupation
}

func (o *Employment) GetStartYear() *int {
	if o == nil {
		return nil
	}
	return o.StartYear
}

// ExpirationDate - Identification expiration date
type ExpirationDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ExpirationDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ExpirationDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ExpirationDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// IssueDate - Identification issue date
type IssueDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *IssueDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *IssueDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *IssueDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// LegalNaturalPersonType - Identification type
type LegalNaturalPersonType string

const (
	LegalNaturalPersonTypeIdentificationTypeUnspecified LegalNaturalPersonType = "IDENTIFICATION_TYPE_UNSPECIFIED"
	LegalNaturalPersonTypePassport                      LegalNaturalPersonType = "PASSPORT"
	LegalNaturalPersonTypeNationalID                    LegalNaturalPersonType = "NATIONAL_ID"
	LegalNaturalPersonTypeDriversLicense                LegalNaturalPersonType = "DRIVERS_LICENSE"
)

func (e LegalNaturalPersonType) ToPointer() *LegalNaturalPersonType {
	return &e
}

// ForeignIdentification - **Field Dependencies:**
//
// Required if `irs_form_type` is `W_8BEN`.
//
// Otherwise, must be empty.
type ForeignIdentification struct {
	// Identification expiration date
	ExpirationDate *ExpirationDate `json:"expiration_date,omitempty"`
	// Denotes if the identification is a tax id or other
	Ftin *bool `json:"ftin,omitempty"`
	// Identification number
	IdentificationNumber *string `json:"identification_number,omitempty"`
	// Identification issue date
	IssueDate *IssueDate `json:"issue_date,omitempty"`
	// Region of issuance must be provided as a two-character CLDR country code
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// Identification type
	Type *LegalNaturalPersonType `json:"type,omitempty"`
}

func (o *ForeignIdentification) GetExpirationDate() *ExpirationDate {
	if o == nil {
		return nil
	}
	return o.ExpirationDate
}

func (o *ForeignIdentification) GetFtin() *bool {
	if o == nil {
		return nil
	}
	return o.Ftin
}

func (o *ForeignIdentification) GetIdentificationNumber() *string {
	if o == nil {
		return nil
	}
	return o.IdentificationNumber
}

func (o *ForeignIdentification) GetIssueDate() *IssueDate {
	if o == nil {
		return nil
	}
	return o.IssueDate
}

func (o *ForeignIdentification) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *ForeignIdentification) GetType() *LegalNaturalPersonType {
	if o == nil {
		return nil
	}
	return o.Type
}

// ExecutionDate - The datetime external identity verification results were run on a natural person
type ExecutionDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ExecutionDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ExecutionDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ExecutionDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// LegalNaturalPersonIdentityVerificationResult - Third-party data result used to verify the identity of an introduced investor. If the client identity_verification_model is PROVIDED_BY_CLIENT, this field is required
type LegalNaturalPersonIdentityVerificationResult struct {
	// Attestation that external result and review have verified the supplied investor's address has been verified in conjunction with other PII
	AddressVerified *bool `json:"address_verified,omitempty"`
	// Attestation that external result and review have verified the supplied investor's date of birth has been verified in conjunction with other PII
	BirthDateVerified *bool `json:"birth_date_verified,omitempty"`
	// The datetime external identity verification results were run on a natural person
	ExecutionDate *ExecutionDate `json:"execution_date,omitempty"`
	// Client-generated identifier associated with the KYC results for the appropriate case
	ExternalCaseID *string `json:"external_case_id,omitempty"`
	// System generated document IDs returned after uploading identity documents to the Documents API
	IdentityVerificationDocumentIds []string `json:"identity_verification_document_ids,omitempty"`
	// System-generated GUID used to uniquely identify the verification_result
	IdentityVerificationResultID *string `json:"identity_verification_result_id,omitempty"`
	// Attestation that external result and review have verified the supplied investor's name has been verified in conjunction with other PII
	NameVerified *bool `json:"name_verified,omitempty"`
	// A system-generated document ID assigned when raw vendor results are uploaded to the Documents API; This field is optional for person record creation, but required for account creation if the Correspondent provides IDV results
	RawVendorDataDocumentID *string `json:"raw_vendor_data_document_id,omitempty"`
	// Attestation that external result and review have verified the supplied investor's Tax ID has been verified in conjunction with other PII
	TaxIDVerified *bool `json:"tax_id_verified,omitempty"`
	// The name(s) of the vendor(s) used to externally verify and screen a natural person; relates to the identity_verification_result
	Vendor *string `json:"vendor,omitempty"`
}

func (o *LegalNaturalPersonIdentityVerificationResult) GetAddressVerified() *bool {
	if o == nil {
		return nil
	}
	return o.AddressVerified
}

func (o *LegalNaturalPersonIdentityVerificationResult) GetBirthDateVerified() *bool {
	if o == nil {
		return nil
	}
	return o.BirthDateVerified
}

func (o *LegalNaturalPersonIdentityVerificationResult) GetExecutionDate() *ExecutionDate {
	if o == nil {
		return nil
	}
	return o.ExecutionDate
}

func (o *LegalNaturalPersonIdentityVerificationResult) GetExternalCaseID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalCaseID
}

func (o *LegalNaturalPersonIdentityVerificationResult) GetIdentityVerificationDocumentIds() []string {
	if o == nil {
		return nil
	}
	return o.IdentityVerificationDocumentIds
}

func (o *LegalNaturalPersonIdentityVerificationResult) GetIdentityVerificationResultID() *string {
	if o == nil {
		return nil
	}
	return o.IdentityVerificationResultID
}

func (o *LegalNaturalPersonIdentityVerificationResult) GetNameVerified() *bool {
	if o == nil {
		return nil
	}
	return o.NameVerified
}

func (o *LegalNaturalPersonIdentityVerificationResult) GetRawVendorDataDocumentID() *string {
	if o == nil {
		return nil
	}
	return o.RawVendorDataDocumentID
}

func (o *LegalNaturalPersonIdentityVerificationResult) GetTaxIDVerified() *bool {
	if o == nil {
		return nil
	}
	return o.TaxIDVerified
}

func (o *LegalNaturalPersonIdentityVerificationResult) GetVendor() *string {
	if o == nil {
		return nil
	}
	return o.Vendor
}

// LegalNaturalPersonEffectiveDate - The date on which the trader meets or exceeds the large trader reporting threshold, which is defined by the U.S. Securities and Exchange Commission (SEC) as trades of 2 million shares or $20 million in a single day or 20 million shares or $200 million during a calendar month
type LegalNaturalPersonEffectiveDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *LegalNaturalPersonEffectiveDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *LegalNaturalPersonEffectiveDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *LegalNaturalPersonEffectiveDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// LegalNaturalPersonLargeTrader - Indicates if the person is recognized as a "Large Trader" by the SEC.
type LegalNaturalPersonLargeTrader struct {
	// The date on which the trader meets or exceeds the large trader reporting threshold, which is defined by the U.S. Securities and Exchange Commission (SEC) as trades of 2 million shares or $20 million in a single day or 20 million shares or $200 million during a calendar month
	EffectiveDate *LegalNaturalPersonEffectiveDate `json:"effective_date,omitempty"`
	// SEC-issued ID signifying the person/entity as a large trader; Required for CAIS regulatory reporting.
	LargeTraderID *string `json:"large_trader_id,omitempty"`
}

func (o *LegalNaturalPersonLargeTrader) GetEffectiveDate() *LegalNaturalPersonEffectiveDate {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *LegalNaturalPersonLargeTrader) GetLargeTraderID() *string {
	if o == nil {
		return nil
	}
	return o.LargeTraderID
}

// LegalNaturalPersonMaritalStatus - The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
type LegalNaturalPersonMaritalStatus string

const (
	LegalNaturalPersonMaritalStatusMaritalStatusUnspecified LegalNaturalPersonMaritalStatus = "MARITAL_STATUS_UNSPECIFIED"
	LegalNaturalPersonMaritalStatusSingle                   LegalNaturalPersonMaritalStatus = "SINGLE"
	LegalNaturalPersonMaritalStatusMarried                  LegalNaturalPersonMaritalStatus = "MARRIED"
	LegalNaturalPersonMaritalStatusDivorced                 LegalNaturalPersonMaritalStatus = "DIVORCED"
	LegalNaturalPersonMaritalStatusWidowed                  LegalNaturalPersonMaritalStatus = "WIDOWED"
)

func (e LegalNaturalPersonMaritalStatus) ToPointer() *LegalNaturalPersonMaritalStatus {
	return &e
}

// LegalNaturalPersonNameSuffix - The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
type LegalNaturalPersonNameSuffix string

const (
	LegalNaturalPersonNameSuffixNameSuffixUnspecified LegalNaturalPersonNameSuffix = "NAME_SUFFIX_UNSPECIFIED"
	LegalNaturalPersonNameSuffixSr                    LegalNaturalPersonNameSuffix = "SR"
	LegalNaturalPersonNameSuffixJr                    LegalNaturalPersonNameSuffix = "JR"
	LegalNaturalPersonNameSuffixIii                   LegalNaturalPersonNameSuffix = "III"
	LegalNaturalPersonNameSuffixIv                    LegalNaturalPersonNameSuffix = "IV"
	LegalNaturalPersonNameSuffixV                     LegalNaturalPersonNameSuffix = "V"
)

func (e LegalNaturalPersonNameSuffix) ToPointer() *LegalNaturalPersonNameSuffix {
	return &e
}

// CustomerReferralSource - Customer Referral Source
type CustomerReferralSource struct {
	// The name of the referrer
	Name *string `json:"name,omitempty"`
	// The relationship of the referrer to the applicant
	RelationshipToApplicant *string `json:"relationship_to_applicant,omitempty"`
	// The years the referrer has known the applicant If the referrer has known the applicant for less than a year, they must specify 1
	RelationshipYearsWithApplicant *int `json:"relationship_years_with_applicant,omitempty"`
	// The years the referrer has known the broker If the referrer has known the broker for less than a year, they must specify 1
	RelationshipYearsWithBroker *int `json:"relationship_years_with_broker,omitempty"`
}

func (o *CustomerReferralSource) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomerReferralSource) GetRelationshipToApplicant() *string {
	if o == nil {
		return nil
	}
	return o.RelationshipToApplicant
}

func (o *CustomerReferralSource) GetRelationshipYearsWithApplicant() *int {
	if o == nil {
		return nil
	}
	return o.RelationshipYearsWithApplicant
}

func (o *CustomerReferralSource) GetRelationshipYearsWithBroker() *int {
	if o == nil {
		return nil
	}
	return o.RelationshipYearsWithBroker
}

// NegativeNews - Information about any negative news against the client, or any immediate family members, close associates, or related entities
type NegativeNews struct {
	// Indicates whether there is negative news against related parties
	NegativeNewsAgainstRelatedParties *bool `json:"negative_news_against_related_parties,omitempty"`
	// Description of the negative news against related parties
	NegativeNewsAgainstRelatedPartiesDescription *string `json:"negative_news_against_related_parties_description,omitempty"`
}

func (o *NegativeNews) GetNegativeNewsAgainstRelatedParties() *bool {
	if o == nil {
		return nil
	}
	return o.NegativeNewsAgainstRelatedParties
}

func (o *NegativeNews) GetNegativeNewsAgainstRelatedPartiesDescription() *string {
	if o == nil {
		return nil
	}
	return o.NegativeNewsAgainstRelatedPartiesDescription
}

// OtherSourcesOfWealth - The applicant's other source of wealth
type OtherSourcesOfWealth struct {
	// Indicates whether the applicant has other sources of wealth.
	ApplicantHasOtherSourcesOfWealth *bool `json:"applicant_has_other_sources_of_wealth,omitempty"`
	// The applicant's other source of wealth description. If the applicant has no other sources of wealth, they must specify "N/A."
	OtherSourcesOfWealth *string `json:"other_sources_of_wealth,omitempty"`
	// The applicant's other source of wealth verification. If the applicant has no other sources of wealth, they must specify "N/A."
	OtherSourcesOfWealthVerification *string `json:"other_sources_of_wealth_verification,omitempty"`
}

func (o *OtherSourcesOfWealth) GetApplicantHasOtherSourcesOfWealth() *bool {
	if o == nil {
		return nil
	}
	return o.ApplicantHasOtherSourcesOfWealth
}

func (o *OtherSourcesOfWealth) GetOtherSourcesOfWealth() *string {
	if o == nil {
		return nil
	}
	return o.OtherSourcesOfWealth
}

func (o *OtherSourcesOfWealth) GetOtherSourcesOfWealthVerification() *string {
	if o == nil {
		return nil
	}
	return o.OtherSourcesOfWealthVerification
}

// NaturalPersonFdd - Foreign Due Diligence (FDD) information for Legal Natural Person
type NaturalPersonFdd struct {
	// Customer Non-referral Source
	CustomerNonReferralSource *string `json:"customer_non_referral_source,omitempty"`
	// Customer Referral Source
	CustomerReferralSource *CustomerReferralSource `json:"customer_referral_source,omitempty"`
	// The description of the applicant's source of wealth
	EmploymentAndEmployerDescription *string `json:"employment_and_employer_description,omitempty"`
	// Information about any negative news against the client, or any immediate family members, close associates, or related entities
	NegativeNews *NegativeNews `json:"negative_news,omitempty"`
	// The applicant's other source of wealth
	OtherSourcesOfWealth *OtherSourcesOfWealth `json:"other_sources_of_wealth,omitempty"`
}

func (o *NaturalPersonFdd) GetCustomerNonReferralSource() *string {
	if o == nil {
		return nil
	}
	return o.CustomerNonReferralSource
}

func (o *NaturalPersonFdd) GetCustomerReferralSource() *CustomerReferralSource {
	if o == nil {
		return nil
	}
	return o.CustomerReferralSource
}

func (o *NaturalPersonFdd) GetEmploymentAndEmployerDescription() *string {
	if o == nil {
		return nil
	}
	return o.EmploymentAndEmployerDescription
}

func (o *NaturalPersonFdd) GetNegativeNews() *NegativeNews {
	if o == nil {
		return nil
	}
	return o.NegativeNews
}

func (o *NaturalPersonFdd) GetOtherSourcesOfWealth() *OtherSourcesOfWealth {
	if o == nil {
		return nil
	}
	return o.OtherSourcesOfWealth
}

type LegalNaturalPersonResidencyStatus string

const (
	LegalNaturalPersonResidencyStatusResidencyStatusUnspecified LegalNaturalPersonResidencyStatus = "RESIDENCY_STATUS_UNSPECIFIED"
	LegalNaturalPersonResidencyStatusUsPermanentResident        LegalNaturalPersonResidencyStatus = "US_PERMANENT_RESIDENT"
	LegalNaturalPersonResidencyStatusUsTemporaryResident        LegalNaturalPersonResidencyStatus = "US_TEMPORARY_RESIDENT"
	LegalNaturalPersonResidencyStatusUsNonResident              LegalNaturalPersonResidencyStatus = "US_NON_RESIDENT"
)

func (e LegalNaturalPersonResidencyStatus) ToPointer() *LegalNaturalPersonResidencyStatus {
	return &e
}

// NonCitizenResidency - Facilitates non-citizen lawful US residents to open domestic accounts
type NonCitizenResidency struct {
	ResidencyStatus *LegalNaturalPersonResidencyStatus `json:"residency_status,omitempty"`
}

func (o *NonCitizenResidency) GetResidencyStatus() *LegalNaturalPersonResidencyStatus {
	if o == nil {
		return nil
	}
	return o.ResidencyStatus
}

// PersonalAddress - The legal street number and street name for an account Party. Required fields within the `personal_address` object include:
//   - `administrative_area`
//   - `region_code` - 2 character CLDR Code
//   - `postal_code`
//   - `locality`
//   - `address_lines` - max 5 lines
type PersonalAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *PersonalAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *PersonalAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *PersonalAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *PersonalAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *PersonalAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *PersonalAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *PersonalAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *PersonalAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *PersonalAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *PersonalAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *PersonalAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// LegalNaturalPersonTaxIDType - The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
type LegalNaturalPersonTaxIDType string

const (
	LegalNaturalPersonTaxIDTypeTaxIDTypeUnspecified LegalNaturalPersonTaxIDType = "TAX_ID_TYPE_UNSPECIFIED"
	LegalNaturalPersonTaxIDTypeTaxIDTypeSsn         LegalNaturalPersonTaxIDType = "TAX_ID_TYPE_SSN"
	LegalNaturalPersonTaxIDTypeTaxIDTypeItin        LegalNaturalPersonTaxIDType = "TAX_ID_TYPE_ITIN"
	LegalNaturalPersonTaxIDTypeTaxIDTypeEin         LegalNaturalPersonTaxIDType = "TAX_ID_TYPE_EIN"
)

func (e LegalNaturalPersonTaxIDType) ToPointer() *LegalNaturalPersonTaxIDType {
	return &e
}

// CNoticeDate - C Notice date.
type CNoticeDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *CNoticeDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *CNoticeDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *CNoticeDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// LegalNaturalPersonFederalTaxClassification - Federal tax classification.
type LegalNaturalPersonFederalTaxClassification string

const (
	LegalNaturalPersonFederalTaxClassificationFederalTaxClassificationUnspecified LegalNaturalPersonFederalTaxClassification = "FEDERAL_TAX_CLASSIFICATION_UNSPECIFIED"
	LegalNaturalPersonFederalTaxClassificationIndivSolepropOrSinglememberllc      LegalNaturalPersonFederalTaxClassification = "INDIV_SOLEPROP_OR_SINGLEMEMBERLLC"
	LegalNaturalPersonFederalTaxClassificationPartnership                         LegalNaturalPersonFederalTaxClassification = "PARTNERSHIP"
	LegalNaturalPersonFederalTaxClassificationCCorporation                        LegalNaturalPersonFederalTaxClassification = "C_CORPORATION"
	LegalNaturalPersonFederalTaxClassificationSCorporation                        LegalNaturalPersonFederalTaxClassification = "S_CORPORATION"
	LegalNaturalPersonFederalTaxClassificationTrustEstate                         LegalNaturalPersonFederalTaxClassification = "TRUST_ESTATE"
	LegalNaturalPersonFederalTaxClassificationLlcTaxedAsCCorp                     LegalNaturalPersonFederalTaxClassification = "LLC_TAXED_AS_C_CORP"
	LegalNaturalPersonFederalTaxClassificationLlcTaxedAsSCorp                     LegalNaturalPersonFederalTaxClassification = "LLC_TAXED_AS_S_CORP"
	LegalNaturalPersonFederalTaxClassificationLlcTaxedAsPartnership               LegalNaturalPersonFederalTaxClassification = "LLC_TAXED_AS_PARTNERSHIP"
	LegalNaturalPersonFederalTaxClassificationOther                               LegalNaturalPersonFederalTaxClassification = "OTHER"
)

func (e LegalNaturalPersonFederalTaxClassification) ToPointer() *LegalNaturalPersonFederalTaxClassification {
	return &e
}

// FirstBNoticeDate - Initial B Notice date.
type FirstBNoticeDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *FirstBNoticeDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *FirstBNoticeDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *FirstBNoticeDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// LegalNaturalPersonIrsFormType - IRS form type.
type LegalNaturalPersonIrsFormType string

const (
	LegalNaturalPersonIrsFormTypeIrsFormTypeUnspecified LegalNaturalPersonIrsFormType = "IRS_FORM_TYPE_UNSPECIFIED"
	LegalNaturalPersonIrsFormTypeW9                     LegalNaturalPersonIrsFormType = "W_9"
	LegalNaturalPersonIrsFormTypeW8Ben                  LegalNaturalPersonIrsFormType = "W_8BEN"
)

func (e LegalNaturalPersonIrsFormType) ToPointer() *LegalNaturalPersonIrsFormType {
	return &e
}

// ReportingEligibility - Tax reporting eligibility.
type ReportingEligibility string

const (
	ReportingEligibilityTaxReportingEligibilityUnspecified ReportingEligibility = "TAX_REPORTING_ELIGIBILITY_UNSPECIFIED"
	ReportingEligibilityEligible                           ReportingEligibility = "ELIGIBLE"
	ReportingEligibilityIneligible                         ReportingEligibility = "INELIGIBLE"
)

func (e ReportingEligibility) ToPointer() *ReportingEligibility {
	return &e
}

// TaxCertificationDate - Tax Certification date.
type TaxCertificationDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *TaxCertificationDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *TaxCertificationDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *TaxCertificationDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// TaxpayerCertificationState - Taxpayer certification status.
type TaxpayerCertificationState string

const (
	TaxpayerCertificationStateTaxpayerCertificationStateUnspecified TaxpayerCertificationState = "TAXPAYER_CERTIFICATION_STATE_UNSPECIFIED"
	TaxpayerCertificationStateCertified                             TaxpayerCertificationState = "CERTIFIED"
	TaxpayerCertificationStateUncertified                           TaxpayerCertificationState = "UNCERTIFIED"
)

func (e TaxpayerCertificationState) ToPointer() *TaxpayerCertificationState {
	return &e
}

// LegalNaturalPersonUsTinStatus - United States Individual Taxpayer Identification Number (ITIN) status.
type LegalNaturalPersonUsTinStatus string

const (
	LegalNaturalPersonUsTinStatusUsTinStatusUnspecified LegalNaturalPersonUsTinStatus = "US_TIN_STATUS_UNSPECIFIED"
	LegalNaturalPersonUsTinStatusPassing                LegalNaturalPersonUsTinStatus = "PASSING"
	LegalNaturalPersonUsTinStatusFailing                LegalNaturalPersonUsTinStatus = "FAILING"
)

func (e LegalNaturalPersonUsTinStatus) ToPointer() *LegalNaturalPersonUsTinStatus {
	return &e
}

// LegalNaturalPersonWithholdingState - B/C Notice status.
type LegalNaturalPersonWithholdingState string

const (
	LegalNaturalPersonWithholdingStateWithholdingStateUnspecified LegalNaturalPersonWithholdingState = "WITHHOLDING_STATE_UNSPECIFIED"
	LegalNaturalPersonWithholdingStateFirstBNoticeReceived        LegalNaturalPersonWithholdingState = "FIRST_B_NOTICE_RECEIVED"
	LegalNaturalPersonWithholdingStateSecondBNoticeReceived       LegalNaturalPersonWithholdingState = "SECOND_B_NOTICE_RECEIVED"
	LegalNaturalPersonWithholdingStateCNoticeReceived             LegalNaturalPersonWithholdingState = "C_NOTICE_RECEIVED"
	LegalNaturalPersonWithholdingStateCNoticeIndicatedByCustomer  LegalNaturalPersonWithholdingState = "C_NOTICE_INDICATED_BY_CUSTOMER"
)

func (e LegalNaturalPersonWithholdingState) ToPointer() *LegalNaturalPersonWithholdingState {
	return &e
}

// TaxProfile - Tax-related attributes at the for the account; A tax profile with taxpayer attributes is located on the legal_natural_person or legal_entity objects elsewhere on the account record.
type TaxProfile struct {
	// C Notice date.
	CNoticeDate *CNoticeDate `json:"c_notice_date,omitempty"`
	// Federal tax classification.
	FederalTaxClassification *LegalNaturalPersonFederalTaxClassification `json:"federal_tax_classification,omitempty"`
	// Initial B Notice date.
	FirstBNoticeDate *FirstBNoticeDate `json:"first_b_notice_date,omitempty"`
	// IRS form type.
	IrsFormType *LegalNaturalPersonIrsFormType `json:"irs_form_type,omitempty"`
	// Legal tax region must be "US" if provided W-9, otherwise must be a non-US country.
	LegalTaxRegionCode *string `json:"legal_tax_region_code,omitempty"`
	// Tax reporting eligibility.
	ReportingEligibility *ReportingEligibility `json:"reporting_eligibility,omitempty"`
	// Tax Certification date.
	TaxCertificationDate *TaxCertificationDate `json:"tax_certification_date,omitempty"`
	// Taxpayer certification status.
	TaxpayerCertificationState *TaxpayerCertificationState `json:"taxpayer_certification_state,omitempty"`
	// United States Individual Taxpayer Identification Number (ITIN) status.
	UsTinStatus *LegalNaturalPersonUsTinStatus `json:"us_tin_status,omitempty"`
	// B/C Notice status.
	WithholdingState *LegalNaturalPersonWithholdingState `json:"withholding_state,omitempty"`
}

func (o *TaxProfile) GetCNoticeDate() *CNoticeDate {
	if o == nil {
		return nil
	}
	return o.CNoticeDate
}

func (o *TaxProfile) GetFederalTaxClassification() *LegalNaturalPersonFederalTaxClassification {
	if o == nil {
		return nil
	}
	return o.FederalTaxClassification
}

func (o *TaxProfile) GetFirstBNoticeDate() *FirstBNoticeDate {
	if o == nil {
		return nil
	}
	return o.FirstBNoticeDate
}

func (o *TaxProfile) GetIrsFormType() *LegalNaturalPersonIrsFormType {
	if o == nil {
		return nil
	}
	return o.IrsFormType
}

func (o *TaxProfile) GetLegalTaxRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.LegalTaxRegionCode
}

func (o *TaxProfile) GetReportingEligibility() *ReportingEligibility {
	if o == nil {
		return nil
	}
	return o.ReportingEligibility
}

func (o *TaxProfile) GetTaxCertificationDate() *TaxCertificationDate {
	if o == nil {
		return nil
	}
	return o.TaxCertificationDate
}

func (o *TaxProfile) GetTaxpayerCertificationState() *TaxpayerCertificationState {
	if o == nil {
		return nil
	}
	return o.TaxpayerCertificationState
}

func (o *TaxProfile) GetUsTinStatus() *LegalNaturalPersonUsTinStatus {
	if o == nil {
		return nil
	}
	return o.UsTinStatus
}

func (o *TaxProfile) GetWithholdingState() *LegalNaturalPersonWithholdingState {
	if o == nil {
		return nil
	}
	return o.WithholdingState
}

// LegalNaturalPerson - A legal natural person. This represents the full set of data for an individual. A Customer Identification Program (CIP) may be run on legal natural persons.
type LegalNaturalPerson struct {
	// Indicates whether the person is an accredited investor
	AccreditedInvestor *bool `json:"accredited_investor,omitempty"`
	// Indicates whether the person is an adviser
	Adviser *bool `json:"adviser,omitempty"`
	// The legal day, month, and year of birth for a natural person.
	BirthDate *BirthDate `json:"birth_date,omitempty"`
	// This is used for tax (treaty) and country block list considerations Maximum list of two 2-char CLDR Code citizenship countries, e.g. US, CA
	CitizenshipCountries []string `json:"citizenship_countries,omitempty"`
	// A list of ticker symbols in which the underlying person is a control person; control persons are defined as having significant influence over a companyâs management and operations, typically through ownership of a large percentage of the companyâs voting stock or through positions on the companyâs board of directors or executive team
	ControlPersonCompanySymbols *string `json:"control_person_company_symbols,omitempty"`
	// Indicates the related owner record is an employee of the clearing broker's correspondent customer.
	CorrespondentEmployee *bool `json:"correspondent_employee,omitempty"`
	// A unique identifier referencing a Correspondent; A Client may have several operating Correspondents within its purview.
	CorrespondentID *string `json:"correspondent_id,omitempty"`
	// A flag to indicate whether this person is an employee of the correspondent.
	CustodianEmployee *bool `json:"custodian_employee,omitempty"`
	// Customer identification id returned by the customer identification service which represents a single instance of an identity verification outcome for the specified customer. This verification result will be used as part of the full investigation.
	CustomerIdentificationID *string `json:"customer_identification_id,omitempty"`
	// The day, month, and year of death of a legal natural person
	DeathDate *DeathDate `json:"death_date,omitempty"`
	// DBA (Doing Business As) names. Can list up to 5 associated with the Legal Natural Person
	DoingBusinessAs []string `json:"doing_business_as,omitempty"`
	// Object containing information pertaining to a investor's current employer including the name, address, and duration of employment.
	Employment *Employment `json:"employment,omitempty"`
	// Family name of a natural person.
	FamilyName *string `json:"family_name,omitempty"`
	// The name of the FINRA-associated entity the underlying natural person is affiliated with.
	FinraAssociatedEntity *string `json:"finra_associated_entity,omitempty"`
	// **Field Dependencies:**
	//
	// Required if `irs_form_type` is `W_8BEN`.
	//
	// Otherwise, must be empty.
	ForeignIdentification *ForeignIdentification `json:"foreign_identification,omitempty"`
	// The given name of a natural person; Conventionally known as 'first name' in most English-speaking countries.
	GivenName *string `json:"given_name,omitempty"`
	// Globally Unique identifier for a legal natural person
	GlobalPersonID *string `json:"global_person_id,omitempty"`
	// Third-party data result used to verify the identity of an introduced investor. If the client identity_verification_model is PROVIDED_BY_CLIENT, this field is required
	IdentityVerificationResult *LegalNaturalPersonIdentityVerificationResult `json:"identity_verification_result,omitempty"`
	// Indicates whether the person is an institutional customer
	InstitutionalCustomer *bool `json:"institutional_customer,omitempty"`
	// Investigation id relating a comprehensive investigation for a customer, encompassing the aggregation of identity verification results and watchlist screenings, conducted to support the Customer Identification Program (CIP) and Customer Due Diligence (CDD)
	InvestigationID *string `json:"investigation_id,omitempty"`
	// Indicates if the person is recognized as a "Large Trader" by the SEC.
	LargeTrader *LegalNaturalPersonLargeTrader `json:"large_trader,omitempty"`
	// A system-generated unique identifier referencing a single natural person; Used to access the record after creation.
	LegalNaturalPersonID *string `json:"legal_natural_person_id,omitempty"`
	// The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
	MaritalStatus *LegalNaturalPersonMaritalStatus `json:"marital_status,omitempty"`
	// Non-primary names representing a natural person; Name attributed to a person other than "Given" and "Family" names.
	MiddleNames *string `json:"middle_names,omitempty"`
	// The name field Format: legalNaturalPersons/{legalNaturalPerson}
	Name *string `json:"name,omitempty"`
	// The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
	NameSuffix *LegalNaturalPersonNameSuffix `json:"name_suffix,omitempty"`
	// Foreign Due Diligence (FDD) information for Legal Natural Person
	NaturalPersonFdd *NaturalPersonFdd `json:"natural_person_fdd,omitempty"`
	// Facilitates non-citizen lawful US residents to open domestic accounts
	NonCitizenResidency *NonCitizenResidency `json:"non_citizen_residency,omitempty"`
	// The legal street number and street name for an account Party. Required fields within the `personal_address` object include:
	//  - `administrative_area`
	//  - `region_code` - 2 character CLDR Code
	//  - `postal_code`
	//  - `locality`
	//  - `address_lines` - max 5 lines
	PersonalAddress *PersonalAddress `json:"personal_address,omitempty"`
	// A Party's self-disclosed list of names representing family members who are politically exposed.
	PoliticallyExposedImmediateFamilyNames []string `json:"politically_exposed_immediate_family_names,omitempty"`
	// A Party's self-disclosed list of named politically exposed organizations they are personally associated with.
	PoliticallyExposedOrganization *string `json:"politically_exposed_organization,omitempty"`
	// The full U.S. tax ID for a related person; Must be provided with `ITIN` or `SSN` tax ID type
	TaxID *string `json:"tax_id,omitempty"`
	// The last four characters of the related person's tax identifier; Masked/truncated to "last four" in most usage contexts to preserve data privacy.
	TaxIDLastFour *string `json:"tax_id_last_four,omitempty"`
	// The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
	TaxIDType *LegalNaturalPersonTaxIDType `json:"tax_id_type,omitempty"`
	// Tax-related attributes at the for the account; A tax profile with taxpayer attributes is located on the legal_natural_person or legal_entity objects elsewhere on the account record.
	TaxProfile *TaxProfile `json:"tax_profile,omitempty"`
}

func (o *LegalNaturalPerson) GetAccreditedInvestor() *bool {
	if o == nil {
		return nil
	}
	return o.AccreditedInvestor
}

func (o *LegalNaturalPerson) GetAdviser() *bool {
	if o == nil {
		return nil
	}
	return o.Adviser
}

func (o *LegalNaturalPerson) GetBirthDate() *BirthDate {
	if o == nil {
		return nil
	}
	return o.BirthDate
}

func (o *LegalNaturalPerson) GetCitizenshipCountries() []string {
	if o == nil {
		return nil
	}
	return o.CitizenshipCountries
}

func (o *LegalNaturalPerson) GetControlPersonCompanySymbols() *string {
	if o == nil {
		return nil
	}
	return o.ControlPersonCompanySymbols
}

func (o *LegalNaturalPerson) GetCorrespondentEmployee() *bool {
	if o == nil {
		return nil
	}
	return o.CorrespondentEmployee
}

func (o *LegalNaturalPerson) GetCorrespondentID() *string {
	if o == nil {
		return nil
	}
	return o.CorrespondentID
}

func (o *LegalNaturalPerson) GetCustodianEmployee() *bool {
	if o == nil {
		return nil
	}
	return o.CustodianEmployee
}

func (o *LegalNaturalPerson) GetCustomerIdentificationID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerIdentificationID
}

func (o *LegalNaturalPerson) GetDeathDate() *DeathDate {
	if o == nil {
		return nil
	}
	return o.DeathDate
}

func (o *LegalNaturalPerson) GetDoingBusinessAs() []string {
	if o == nil {
		return nil
	}
	return o.DoingBusinessAs
}

func (o *LegalNaturalPerson) GetEmployment() *Employment {
	if o == nil {
		return nil
	}
	return o.Employment
}

func (o *LegalNaturalPerson) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *LegalNaturalPerson) GetFinraAssociatedEntity() *string {
	if o == nil {
		return nil
	}
	return o.FinraAssociatedEntity
}

func (o *LegalNaturalPerson) GetForeignIdentification() *ForeignIdentification {
	if o == nil {
		return nil
	}
	return o.ForeignIdentification
}

func (o *LegalNaturalPerson) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *LegalNaturalPerson) GetGlobalPersonID() *string {
	if o == nil {
		return nil
	}
	return o.GlobalPersonID
}

func (o *LegalNaturalPerson) GetIdentityVerificationResult() *LegalNaturalPersonIdentityVerificationResult {
	if o == nil {
		return nil
	}
	return o.IdentityVerificationResult
}

func (o *LegalNaturalPerson) GetInstitutionalCustomer() *bool {
	if o == nil {
		return nil
	}
	return o.InstitutionalCustomer
}

func (o *LegalNaturalPerson) GetInvestigationID() *string {
	if o == nil {
		return nil
	}
	return o.InvestigationID
}

func (o *LegalNaturalPerson) GetLargeTrader() *LegalNaturalPersonLargeTrader {
	if o == nil {
		return nil
	}
	return o.LargeTrader
}

func (o *LegalNaturalPerson) GetLegalNaturalPersonID() *string {
	if o == nil {
		return nil
	}
	return o.LegalNaturalPersonID
}

func (o *LegalNaturalPerson) GetMaritalStatus() *LegalNaturalPersonMaritalStatus {
	if o == nil {
		return nil
	}
	return o.MaritalStatus
}

func (o *LegalNaturalPerson) GetMiddleNames() *string {
	if o == nil {
		return nil
	}
	return o.MiddleNames
}

func (o *LegalNaturalPerson) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *LegalNaturalPerson) GetNameSuffix() *LegalNaturalPersonNameSuffix {
	if o == nil {
		return nil
	}
	return o.NameSuffix
}

func (o *LegalNaturalPerson) GetNaturalPersonFdd() *NaturalPersonFdd {
	if o == nil {
		return nil
	}
	return o.NaturalPersonFdd
}

func (o *LegalNaturalPerson) GetNonCitizenResidency() *NonCitizenResidency {
	if o == nil {
		return nil
	}
	return o.NonCitizenResidency
}

func (o *LegalNaturalPerson) GetPersonalAddress() *PersonalAddress {
	if o == nil {
		return nil
	}
	return o.PersonalAddress
}

func (o *LegalNaturalPerson) GetPoliticallyExposedImmediateFamilyNames() []string {
	if o == nil {
		return nil
	}
	return o.PoliticallyExposedImmediateFamilyNames
}

func (o *LegalNaturalPerson) GetPoliticallyExposedOrganization() *string {
	if o == nil {
		return nil
	}
	return o.PoliticallyExposedOrganization
}

func (o *LegalNaturalPerson) GetTaxID() *string {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *LegalNaturalPerson) GetTaxIDLastFour() *string {
	if o == nil {
		return nil
	}
	return o.TaxIDLastFour
}

func (o *LegalNaturalPerson) GetTaxIDType() *LegalNaturalPersonTaxIDType {
	if o == nil {
		return nil
	}
	return o.TaxIDType
}

func (o *LegalNaturalPerson) GetTaxProfile() *TaxProfile {
	if o == nil {
		return nil
	}
	return o.TaxProfile
}
