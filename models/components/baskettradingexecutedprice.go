// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// BasketTradingExecutedPricePrice - The limit price which must be greater than zero if provided. For equity orders in the USD currency, up to 2 decimal places are allowed for prices above $1 and up to 4 decimal places for prices at or below $1. For fixed income orders this is expressed as a percentage of par, which allows up to 5 decimal places in the USD currency.
type BasketTradingExecutedPricePrice struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *BasketTradingExecutedPricePrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// BasketTradingExecutedPriceType - The type of this price, which must be PRICE_PER_UNIT for equity orders
type BasketTradingExecutedPriceType string

const (
	BasketTradingExecutedPriceTypePricePerUnit BasketTradingExecutedPriceType = "PRICE_PER_UNIT"
)

func (e BasketTradingExecutedPriceType) ToPointer() *BasketTradingExecutedPriceType {
	return &e
}

// BasketTradingExecutedPrice - An average price definition
type BasketTradingExecutedPrice struct {
	// The limit price which must be greater than zero if provided. For equity orders in the USD currency, up to 2 decimal places are allowed for prices above $1 and up to 4 decimal places for prices at or below $1. For fixed income orders this is expressed as a percentage of par, which allows up to 5 decimal places in the USD currency.
	Price *BasketTradingExecutedPricePrice `json:"price,omitempty"`
	// The type of this price, which must be PRICE_PER_UNIT for equity orders
	Type *BasketTradingExecutedPriceType `json:"type,omitempty"`
}

func (o *BasketTradingExecutedPrice) GetPrice() *BasketTradingExecutedPricePrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *BasketTradingExecutedPrice) GetType() *BasketTradingExecutedPriceType {
	if o == nil {
		return nil
	}
	return o.Type
}
