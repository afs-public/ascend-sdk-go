// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"ascend-sdk/internal/utils"
	"time"
)

// Restriction - An account restriction.
type Restriction struct {
	// Indicates whether the restriction is active or not.
	Active *bool `json:"active,omitempty"`
	// The plain-text reason set by a person or system explaining why the restriction was set
	CreateReason *string `json:"create_reason,omitempty"`
	// The datetime of the object's creation
	CreateTime *time.Time `json:"create_time,omitempty"`
	// The user attributed to the restriction's placement on the account; typically expressed as an Auth user ID
	CreateUserID *string `json:"create_user_id,omitempty"`
	// The plain-text reason set by a person or system explaining why the restriction was removed If the restriction is active, the reason will not be set.
	EndedReason *string `json:"ended_reason,omitempty"`
	// The datetime of a restriction's removal from an account If the restriction is active, the ended time will not be set.
	EndedTime *time.Time `json:"ended_time,omitempty"`
	// The user attributed to the restriction's removal from the account; typically expressed as an Auth user ID If the restriction is active, the user will not be set.
	EndedUserID *string `json:"ended_user_id,omitempty"`
	// A enumerated value indicating the nature of a restriction; prefixed by the concerned department (e.g., `MARGIN_CALL_VIOLATION_REG_T`); suspends related entitlements of the account until it is removed; most codes are administrated by the custodian but some are available for use by the integrator
	RestrictionCode *string `json:"restriction_code,omitempty"`
}

func (r Restriction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Restriction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Restriction) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *Restriction) GetCreateReason() *string {
	if o == nil {
		return nil
	}
	return o.CreateReason
}

func (o *Restriction) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *Restriction) GetCreateUserID() *string {
	if o == nil {
		return nil
	}
	return o.CreateUserID
}

func (o *Restriction) GetEndedReason() *string {
	if o == nil {
		return nil
	}
	return o.EndedReason
}

func (o *Restriction) GetEndedTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndedTime
}

func (o *Restriction) GetEndedUserID() *string {
	if o == nil {
		return nil
	}
	return o.EndedUserID
}

func (o *Restriction) GetRestrictionCode() *string {
	if o == nil {
		return nil
	}
	return o.RestrictionCode
}
