// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// AchWithdrawalScheduleIraDistributionFederalTaxWithholdingAmount - Fixed USD amount to withhold for taxes.
type AchWithdrawalScheduleIraDistributionFederalTaxWithholdingAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AchWithdrawalScheduleIraDistributionFederalTaxWithholdingAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AchWithdrawalSchedulePercentage - Percentage of total disbursement amount to withhold for taxes.
type AchWithdrawalSchedulePercentage struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AchWithdrawalSchedulePercentage) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AchWithdrawalScheduleFederalTaxWithholding - The federal tax withholding.
type AchWithdrawalScheduleFederalTaxWithholding struct {
	// Fixed USD amount to withhold for taxes.
	Amount *AchWithdrawalScheduleIraDistributionFederalTaxWithholdingAmount `json:"amount,omitempty"`
	// Percentage of total disbursement amount to withhold for taxes.
	Percentage *AchWithdrawalSchedulePercentage `json:"percentage,omitempty"`
}

func (o *AchWithdrawalScheduleFederalTaxWithholding) GetAmount() *AchWithdrawalScheduleIraDistributionFederalTaxWithholdingAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *AchWithdrawalScheduleFederalTaxWithholding) GetPercentage() *AchWithdrawalSchedulePercentage {
	if o == nil {
		return nil
	}
	return o.Percentage
}

// AchWithdrawalScheduleIraDistributionAmount - Fixed USD amount to withhold for taxes.
type AchWithdrawalScheduleIraDistributionAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AchWithdrawalScheduleIraDistributionAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AchWithdrawalScheduleIraDistributionPercentage - Percentage of total disbursement amount to withhold for taxes.
type AchWithdrawalScheduleIraDistributionPercentage struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AchWithdrawalScheduleIraDistributionPercentage) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AchWithdrawalScheduleStateTaxWithholding - The state tax withholding.
type AchWithdrawalScheduleStateTaxWithholding struct {
	// Fixed USD amount to withhold for taxes.
	Amount *AchWithdrawalScheduleIraDistributionAmount `json:"amount,omitempty"`
	// Percentage of total disbursement amount to withhold for taxes.
	Percentage *AchWithdrawalScheduleIraDistributionPercentage `json:"percentage,omitempty"`
}

func (o *AchWithdrawalScheduleStateTaxWithholding) GetAmount() *AchWithdrawalScheduleIraDistributionAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *AchWithdrawalScheduleStateTaxWithholding) GetPercentage() *AchWithdrawalScheduleIraDistributionPercentage {
	if o == nil {
		return nil
	}
	return o.Percentage
}

// AchWithdrawalScheduleType - The type of retirement distribution.
type AchWithdrawalScheduleType string

const (
	AchWithdrawalScheduleTypeTypeUnspecified                            AchWithdrawalScheduleType = "TYPE_UNSPECIFIED"
	AchWithdrawalScheduleTypeNormal                                     AchWithdrawalScheduleType = "NORMAL"
	AchWithdrawalScheduleTypeDisability                                 AchWithdrawalScheduleType = "DISABILITY"
	AchWithdrawalScheduleTypeSosepp                                     AchWithdrawalScheduleType = "SOSEPP"
	AchWithdrawalScheduleTypePremature                                  AchWithdrawalScheduleType = "PREMATURE"
	AchWithdrawalScheduleTypeDeath                                      AchWithdrawalScheduleType = "DEATH"
	AchWithdrawalScheduleTypeExcessContributionRemovalBeforeTaxDeadline AchWithdrawalScheduleType = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE"
	AchWithdrawalScheduleTypeExcessContributionRemovalAfterTaxDeadline  AchWithdrawalScheduleType = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE"
	AchWithdrawalScheduleTypeRolloverToQualifiedPlan                    AchWithdrawalScheduleType = "ROLLOVER_TO_QUALIFIED_PLAN"
	AchWithdrawalScheduleTypeRolloverToIra                              AchWithdrawalScheduleType = "ROLLOVER_TO_IRA"
	AchWithdrawalScheduleTypeDistributionTransfer                       AchWithdrawalScheduleType = "DISTRIBUTION_TRANSFER"
	AchWithdrawalScheduleTypeRecharacterizationPriorYear                AchWithdrawalScheduleType = "RECHARACTERIZATION_PRIOR_YEAR"
	AchWithdrawalScheduleTypeRecharacterizationCurrentYear              AchWithdrawalScheduleType = "RECHARACTERIZATION_CURRENT_YEAR"
	AchWithdrawalScheduleTypeDistributionConversion                     AchWithdrawalScheduleType = "DISTRIBUTION_CONVERSION"
	AchWithdrawalScheduleTypeManagementFee                              AchWithdrawalScheduleType = "MANAGEMENT_FEE"
	AchWithdrawalScheduleTypePlanLoan401K                               AchWithdrawalScheduleType = "PLAN_LOAN_401K"
	AchWithdrawalScheduleTypePrematureSimpleIraLessThan2Years           AchWithdrawalScheduleType = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS"
	AchWithdrawalScheduleTypeNormalRothIraGreaterThan5Years             AchWithdrawalScheduleType = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS"
	AchWithdrawalScheduleTypeNetIncomeAttributable                      AchWithdrawalScheduleType = "NET_INCOME_ATTRIBUTABLE"
	AchWithdrawalScheduleTypeRevocation                                 AchWithdrawalScheduleType = "REVOCATION"
	AchWithdrawalScheduleTypeNonReportable                              AchWithdrawalScheduleType = "NON_REPORTABLE"
)

func (e AchWithdrawalScheduleType) ToPointer() *AchWithdrawalScheduleType {
	return &e
}

// IraDistribution - The ira distribution info for an IRA account
type IraDistribution struct {
	// The federal tax withholding.
	FederalTaxWithholding *AchWithdrawalScheduleFederalTaxWithholding `json:"federal_tax_withholding,omitempty"`
	// The institution receiving retirement funds when performing a transfer to an identical retirement account type at a different financial institution. This is required for check and wire withdrawals because we can't always identify the institution using the transfer instructions. For cash journals this value will default to "Apex Clearing", regardless of what is passed in here
	ReceivingInstitution *string `json:"receiving_institution,omitempty"`
	// The state tax withholding.
	StateTaxWithholding *AchWithdrawalScheduleStateTaxWithholding `json:"state_tax_withholding,omitempty"`
	// Whether or not this distribution has a state withholding waiver.
	StateWithholdingWaiver *bool `json:"state_withholding_waiver,omitempty"`
	// Tax year for which the distribution is applied.
	TaxYear *int `json:"tax_year,omitempty"`
	// The type of retirement distribution.
	Type *AchWithdrawalScheduleType `json:"type,omitempty"`
}

func (o *IraDistribution) GetFederalTaxWithholding() *AchWithdrawalScheduleFederalTaxWithholding {
	if o == nil {
		return nil
	}
	return o.FederalTaxWithholding
}

func (o *IraDistribution) GetReceivingInstitution() *string {
	if o == nil {
		return nil
	}
	return o.ReceivingInstitution
}

func (o *IraDistribution) GetStateTaxWithholding() *AchWithdrawalScheduleStateTaxWithholding {
	if o == nil {
		return nil
	}
	return o.StateTaxWithholding
}

func (o *IraDistribution) GetStateWithholdingWaiver() *bool {
	if o == nil {
		return nil
	}
	return o.StateWithholdingWaiver
}

func (o *IraDistribution) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *IraDistribution) GetType() *AchWithdrawalScheduleType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AchWithdrawalScheduleAmount - A cash amount in the format of decimal value (mutually exclusive with 'full_disbursement')
type AchWithdrawalScheduleAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AchWithdrawalScheduleAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AchWithdrawalScheduleEndDate - The schedule end date if there is a finite number of occurrences
type AchWithdrawalScheduleEndDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *AchWithdrawalScheduleEndDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *AchWithdrawalScheduleEndDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *AchWithdrawalScheduleEndDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// AchWithdrawalScheduleStartDate - The schedule start date
type AchWithdrawalScheduleStartDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *AchWithdrawalScheduleStartDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *AchWithdrawalScheduleStartDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *AchWithdrawalScheduleStartDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// AchWithdrawalScheduleState - The state of the represented schedule
type AchWithdrawalScheduleState string

const (
	AchWithdrawalScheduleStateActive    AchWithdrawalScheduleState = "ACTIVE"
	AchWithdrawalScheduleStateCanceled  AchWithdrawalScheduleState = "CANCELED"
	AchWithdrawalScheduleStateCompleted AchWithdrawalScheduleState = "COMPLETED"
)

func (e AchWithdrawalScheduleState) ToPointer() *AchWithdrawalScheduleState {
	return &e
}

// AchWithdrawalScheduleTimeUnit - The time unit used to calculate the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
type AchWithdrawalScheduleTimeUnit string

const (
	AchWithdrawalScheduleTimeUnitDay   AchWithdrawalScheduleTimeUnit = "DAY"
	AchWithdrawalScheduleTimeUnitWeek  AchWithdrawalScheduleTimeUnit = "WEEK"
	AchWithdrawalScheduleTimeUnitMonth AchWithdrawalScheduleTimeUnit = "MONTH"
)

func (e AchWithdrawalScheduleTimeUnit) ToPointer() *AchWithdrawalScheduleTimeUnit {
	return &e
}

// AchWithdrawalScheduleScheduleProperties - Common schedule properties
type AchWithdrawalScheduleScheduleProperties struct {
	// The schedule end date if there is a finite number of occurrences
	EndDate *AchWithdrawalScheduleEndDate `json:"end_date,omitempty"`
	// The number of occurrences (empty or 0 indicates unlimited occurrences)
	Occurrences *int `json:"occurrences,omitempty"`
	// The schedule start date
	StartDate *AchWithdrawalScheduleStartDate `json:"start_date,omitempty"`
	// The state of the represented schedule
	State *AchWithdrawalScheduleState `json:"state,omitempty"`
	// The time unit used to calculate the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
	TimeUnit *AchWithdrawalScheduleTimeUnit `json:"time_unit,omitempty"`
	// The multiplier used to determine the length of the interval between transfers. The time period between transfers in a scheduled series is the unit of time times the multiplier
	UnitMultiplier *int `json:"unit_multiplier,omitempty"`
}

func (o *AchWithdrawalScheduleScheduleProperties) GetEndDate() *AchWithdrawalScheduleEndDate {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *AchWithdrawalScheduleScheduleProperties) GetOccurrences() *int {
	if o == nil {
		return nil
	}
	return o.Occurrences
}

func (o *AchWithdrawalScheduleScheduleProperties) GetStartDate() *AchWithdrawalScheduleStartDate {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *AchWithdrawalScheduleScheduleProperties) GetState() *AchWithdrawalScheduleState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *AchWithdrawalScheduleScheduleProperties) GetTimeUnit() *AchWithdrawalScheduleTimeUnit {
	if o == nil {
		return nil
	}
	return o.TimeUnit
}

func (o *AchWithdrawalScheduleScheduleProperties) GetUnitMultiplier() *int {
	if o == nil {
		return nil
	}
	return o.UnitMultiplier
}

// AchWithdrawalScheduleScheduleDetails - The transfer schedule details
type AchWithdrawalScheduleScheduleDetails struct {
	// A cash amount in the format of decimal value (mutually exclusive with 'full_disbursement')
	Amount *AchWithdrawalScheduleAmount `json:"amount,omitempty"`
	// External identifier supplied by the API caller. Each request must have a unique pairing of client_schedule_id and account
	ClientScheduleID *string `json:"client_schedule_id,omitempty"`
	// Flag to indicate a full disbursement transfer (mutually exclusive with 'amount')
	FullDisbursement *bool `json:"full_disbursement,omitempty"`
	// Common schedule properties
	ScheduleProperties *AchWithdrawalScheduleScheduleProperties `json:"schedule_properties,omitempty"`
}

func (o *AchWithdrawalScheduleScheduleDetails) GetAmount() *AchWithdrawalScheduleAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *AchWithdrawalScheduleScheduleDetails) GetClientScheduleID() *string {
	if o == nil {
		return nil
	}
	return o.ClientScheduleID
}

func (o *AchWithdrawalScheduleScheduleDetails) GetFullDisbursement() *bool {
	if o == nil {
		return nil
	}
	return o.FullDisbursement
}

func (o *AchWithdrawalScheduleScheduleDetails) GetScheduleProperties() *AchWithdrawalScheduleScheduleProperties {
	if o == nil {
		return nil
	}
	return o.ScheduleProperties
}

// AchWithdrawalSchedule - A withdrawal transfer schedule using the ACH mechanism
type AchWithdrawalSchedule struct {
	// The name of the bank relationship to be used in the ACH transaction
	BankRelationship *string `json:"bank_relationship,omitempty"`
	// The ira distribution info for an IRA account
	IraDistribution *IraDistribution `json:"ira_distribution,omitempty"`
	// The name of the ACH Withdrawal transfer schedule
	Name *string `json:"name,omitempty"`
	// The transfer schedule details
	ScheduleDetails *AchWithdrawalScheduleScheduleDetails `json:"schedule_details,omitempty"`
}

func (o *AchWithdrawalSchedule) GetBankRelationship() *string {
	if o == nil {
		return nil
	}
	return o.BankRelationship
}

func (o *AchWithdrawalSchedule) GetIraDistribution() *IraDistribution {
	if o == nil {
		return nil
	}
	return o.IraDistribution
}

func (o *AchWithdrawalSchedule) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AchWithdrawalSchedule) GetScheduleDetails() *AchWithdrawalScheduleScheduleDetails {
	if o == nil {
		return nil
	}
	return o.ScheduleDetails
}
