// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// TradeAllocationAccruedInterestAmount - The amount of interest that has been accrued in the issuing currency for a single instrument.
type TradeAllocationAccruedInterestAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TradeAllocationAccruedInterestAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TradeAllocationAssetType - Type of the asset being traded.
type TradeAllocationAssetType string

const (
	TradeAllocationAssetTypeAssetTypeUnspecified TradeAllocationAssetType = "ASSET_TYPE_UNSPECIFIED"
	TradeAllocationAssetTypeEquity               TradeAllocationAssetType = "EQUITY"
	TradeAllocationAssetTypeFixedIncome          TradeAllocationAssetType = "FIXED_INCOME"
)

func (e TradeAllocationAssetType) ToPointer() *TradeAllocationAssetType {
	return &e
}

// TradeAllocationBrokerCapacity - Broker capacity for the trade.
type TradeAllocationBrokerCapacity string

const (
	TradeAllocationBrokerCapacityCapacityUnspecified TradeAllocationBrokerCapacity = "CAPACITY_UNSPECIFIED"
	TradeAllocationBrokerCapacityAgency              TradeAllocationBrokerCapacity = "AGENCY"
	TradeAllocationBrokerCapacityPrincipal           TradeAllocationBrokerCapacity = "PRINCIPAL"
	TradeAllocationBrokerCapacityMixed               TradeAllocationBrokerCapacity = "MIXED"
)

func (e TradeAllocationBrokerCapacity) ToPointer() *TradeAllocationBrokerCapacity {
	return &e
}

// TradeAllocationCommissionAmount - Commission amount of the trade allocation that will only be applied to the to_account_id.
type TradeAllocationCommissionAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TradeAllocationCommissionAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TradeAllocationGrossAmount - Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
type TradeAllocationGrossAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TradeAllocationGrossAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TradeAllocationIdentifierType - Identifier type for the asset being traded.
type TradeAllocationIdentifierType string

const (
	TradeAllocationIdentifierTypeIdentifierTypeUnspecified TradeAllocationIdentifierType = "IDENTIFIER_TYPE_UNSPECIFIED"
	TradeAllocationIdentifierTypeAssetID                   TradeAllocationIdentifierType = "ASSET_ID"
	TradeAllocationIdentifierTypeSymbol                    TradeAllocationIdentifierType = "SYMBOL"
	TradeAllocationIdentifierTypeCusip                     TradeAllocationIdentifierType = "CUSIP"
	TradeAllocationIdentifierTypeIsin                      TradeAllocationIdentifierType = "ISIN"
)

func (e TradeAllocationIdentifierType) ToPointer() *TradeAllocationIdentifierType {
	return &e
}

// TradeAllocationPrevailingMarketPrice - The price for the instrument that is prevailing in the market. Required for FIXED_INCOME trade allocations when the broker_capacity is PRINCIPAL.
type TradeAllocationPrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TradeAllocationPrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TradeAllocationPrice - Price with requirement of 8 or less integral number and 8 or less fractional precision.
type TradeAllocationPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TradeAllocationPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TradeAllocationPriceAdjustmentAmount - Total monetary value of the price_adjustment
type TradeAllocationPriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TradeAllocationPriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TradeAllocationPriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security.
type TradeAllocationPriceAdjustmentType string

const (
	TradeAllocationPriceAdjustmentTypePriceAdjustmentTypeUnspecified TradeAllocationPriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	TradeAllocationPriceAdjustmentTypeMarkup                         TradeAllocationPriceAdjustmentType = "MARKUP"
	TradeAllocationPriceAdjustmentTypeMarkdown                       TradeAllocationPriceAdjustmentType = "MARKDOWN"
	TradeAllocationPriceAdjustmentTypeGrossCredit                    TradeAllocationPriceAdjustmentType = "GROSS_CREDIT"
)

func (e TradeAllocationPriceAdjustmentType) ToPointer() *TradeAllocationPriceAdjustmentType {
	return &e
}

// TradeAllocationPriceAdjustment - Price adjustment that will be applied to the net price of the security.
type TradeAllocationPriceAdjustment struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *TradeAllocationPriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security.
	PriceAdjustmentType *TradeAllocationPriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *TradeAllocationPriceAdjustment) GetPriceAdjustmentAmount() *TradeAllocationPriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *TradeAllocationPriceAdjustment) GetPriceAdjustmentType() *TradeAllocationPriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// TradeAllocationQuantity - Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
type TradeAllocationQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TradeAllocationQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TradeAllocationSettlementDate - Defaults to T+1 for equities if this is not provided. Calculated using the execution_time field in Eastern Time.
type TradeAllocationSettlementDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *TradeAllocationSettlementDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *TradeAllocationSettlementDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *TradeAllocationSettlementDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// TradeAllocationSideModifier - Side modifier for the trade allocation.
type TradeAllocationSideModifier string

const (
	TradeAllocationSideModifierSideModifierUnspecified TradeAllocationSideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	TradeAllocationSideModifierShort                   TradeAllocationSideModifier = "SHORT"
	TradeAllocationSideModifierShortExempt             TradeAllocationSideModifier = "SHORT_EXEMPT"
	TradeAllocationSideModifierShortCover              TradeAllocationSideModifier = "SHORT_COVER"
	TradeAllocationSideModifierOpen                    TradeAllocationSideModifier = "OPEN"
	TradeAllocationSideModifierClose                   TradeAllocationSideModifier = "CLOSE"
)

func (e TradeAllocationSideModifier) ToPointer() *TradeAllocationSideModifier {
	return &e
}

type TradeAllocationSpecialInstructions string

const (
	TradeAllocationSpecialInstructionsSpecialInstructionsUnspecified TradeAllocationSpecialInstructions = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
	TradeAllocationSpecialInstructionsRule144                        TradeAllocationSpecialInstructions = "RULE_144"
	TradeAllocationSpecialInstructionsWithDividend                   TradeAllocationSpecialInstructions = "WITH_DIVIDEND"
	TradeAllocationSpecialInstructionsWithRights                     TradeAllocationSpecialInstructions = "WITH_RIGHTS"
	TradeAllocationSpecialInstructionsCloseContract                  TradeAllocationSpecialInstructions = "CLOSE_CONTRACT"
	TradeAllocationSpecialInstructionsCoverShort                     TradeAllocationSpecialInstructions = "COVER_SHORT"
	TradeAllocationSpecialInstructionsCrossTrade                     TradeAllocationSpecialInstructions = "CROSS_TRADE"
	TradeAllocationSpecialInstructionsOpenContractCovered            TradeAllocationSpecialInstructions = "OPEN_CONTRACT_COVERED"
	TradeAllocationSpecialInstructionsDiscretionExercised            TradeAllocationSpecialInstructions = "DISCRETION_EXERCISED"
	TradeAllocationSpecialInstructionsDiscretionNotExercised         TradeAllocationSpecialInstructions = "DISCRETION_NOT_EXERCISED"
	TradeAllocationSpecialInstructionsOptionAssignment               TradeAllocationSpecialInstructions = "OPTION_ASSIGNMENT"
	TradeAllocationSpecialInstructionsEmployeeStockOption            TradeAllocationSpecialInstructions = "EMPLOYEE_STOCK_OPTION"
	TradeAllocationSpecialInstructionsInvestmentBanking              TradeAllocationSpecialInstructions = "INVESTMENT_BANKING"
	TradeAllocationSpecialInstructionsBrokerDealerOrder              TradeAllocationSpecialInstructions = "BROKER_DEALER_ORDER"
	TradeAllocationSpecialInstructionsMakeMarketInSecurity           TradeAllocationSpecialInstructions = "MAKE_MARKET_IN_SECURITY"
	TradeAllocationSpecialInstructionsMakeMarketSolicited            TradeAllocationSpecialInstructions = "MAKE_MARKET_SOLICITED"
	TradeAllocationSpecialInstructionsMakeMarketUnsolicited          TradeAllocationSpecialInstructions = "MAKE_MARKET_UNSOLICITED"
	TradeAllocationSpecialInstructionsCustomerDirected               TradeAllocationSpecialInstructions = "CUSTOMER_DIRECTED"
	TradeAllocationSpecialInstructionsFullyRegistered                TradeAllocationSpecialInstructions = "FULLY_REGISTERED"
	TradeAllocationSpecialInstructionsOpenContract                   TradeAllocationSpecialInstructions = "OPEN_CONTRACT"
	TradeAllocationSpecialInstructionsOddlotDiffOnRequest            TradeAllocationSpecialInstructions = "ODDLOT_DIFF_ON_REQUEST"
	TradeAllocationSpecialInstructionsProspectusEnclosed             TradeAllocationSpecialInstructions = "PROSPECTUS_ENCLOSED"
	TradeAllocationSpecialInstructionsProspectusSeparateMail         TradeAllocationSpecialInstructions = "PROSPECTUS_SEPARATE_MAIL"
	TradeAllocationSpecialInstructionsSolicited                      TradeAllocationSpecialInstructions = "SOLICITED"
	TradeAllocationSpecialInstructionsUnsolicited                    TradeAllocationSpecialInstructions = "UNSOLICITED"
	TradeAllocationSpecialInstructionsXDividend                      TradeAllocationSpecialInstructions = "X_DIVIDEND"
	TradeAllocationSpecialInstructionsActingAsPrincipal              TradeAllocationSpecialInstructions = "ACTING_AS_PRINCIPAL"
	TradeAllocationSpecialInstructionsAveragePrice                   TradeAllocationSpecialInstructions = "AVERAGE_PRICE"
	TradeAllocationSpecialInstructionsBrokerLiquidation              TradeAllocationSpecialInstructions = "BROKER_LIQUIDATION"
	TradeAllocationSpecialInstructionsCouponBooks                    TradeAllocationSpecialInstructions = "COUPON_BOOKS"
	TradeAllocationSpecialInstructionsHasPostageFee                  TradeAllocationSpecialInstructions = "HAS_POSTAGE_FEE"
	TradeAllocationSpecialInstructionsInternetOrder                  TradeAllocationSpecialInstructions = "INTERNET_ORDER"
	TradeAllocationSpecialInstructionsMarginSellout                  TradeAllocationSpecialInstructions = "MARGIN_SELLOUT"
	TradeAllocationSpecialInstructionsMarketMakersAsPrincipal        TradeAllocationSpecialInstructions = "MARKET_MAKERS_AS_PRINCIPAL"
	TradeAllocationSpecialInstructionsNegativeNetProceed             TradeAllocationSpecialInstructions = "NEGATIVE_NET_PROCEED"
	TradeAllocationSpecialInstructionsPreFigIndicator                TradeAllocationSpecialInstructions = "PRE_FIG_INDICATOR"
	TradeAllocationSpecialInstructionsRisklessPrincipalInstruction   TradeAllocationSpecialInstructions = "RISKLESS_PRINCIPAL_INSTRUCTION"
	TradeAllocationSpecialInstructionsShortInstruction               TradeAllocationSpecialInstructions = "SHORT_INSTRUCTION"
	TradeAllocationSpecialInstructionsThirdMarket                    TradeAllocationSpecialInstructions = "THIRD_MARKET"
	TradeAllocationSpecialInstructionsSuppressMsrbTransmission       TradeAllocationSpecialInstructions = "SUPPRESS_MSRB_TRANSMISSION"
	TradeAllocationSpecialInstructionsSuppressTraceReporting         TradeAllocationSpecialInstructions = "SUPPRESS_TRACE_REPORTING"
	TradeAllocationSpecialInstructionsSuppressEmailNotification      TradeAllocationSpecialInstructions = "SUPPRESS_EMAIL_NOTIFICATION"
	TradeAllocationSpecialInstructionsStockReward                    TradeAllocationSpecialInstructions = "STOCK_REWARD"
	TradeAllocationSpecialInstructionsSuppressRegFees                TradeAllocationSpecialInstructions = "SUPPRESS_REG_FEES"
	TradeAllocationSpecialInstructionsSuppressSecFee                 TradeAllocationSpecialInstructions = "SUPPRESS_SEC_FEE"
	TradeAllocationSpecialInstructionsSuppressTafFee                 TradeAllocationSpecialInstructions = "SUPPRESS_TAF_FEE"
	TradeAllocationSpecialInstructionsDividendReinvestment           TradeAllocationSpecialInstructions = "DIVIDEND_REINVESTMENT"
)

func (e TradeAllocationSpecialInstructions) ToPointer() *TradeAllocationSpecialInstructions {
	return &e
}

// TradeAllocationState - The state that the trade allocation is in.
type TradeAllocationState string

const (
	TradeAllocationStateStateUnspecified TradeAllocationState = "STATE_UNSPECIFIED"
	TradeAllocationStateCreating         TradeAllocationState = "CREATING"
	TradeAllocationStateRebooking        TradeAllocationState = "REBOOKING"
	TradeAllocationStateCanceling        TradeAllocationState = "CANCELING"
	TradeAllocationStateBooked           TradeAllocationState = "BOOKED"
	TradeAllocationStateRebooked         TradeAllocationState = "REBOOKED"
	TradeAllocationStateCanceled         TradeAllocationState = "CANCELED"
	TradeAllocationStateFailed           TradeAllocationState = "FAILED"
)

func (e TradeAllocationState) ToPointer() *TradeAllocationState {
	return &e
}

// TradeAllocationToSide - Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
type TradeAllocationToSide string

const (
	TradeAllocationToSideSideUnspecified TradeAllocationToSide = "SIDE_UNSPECIFIED"
	TradeAllocationToSideBuy             TradeAllocationToSide = "BUY"
	TradeAllocationToSideSell            TradeAllocationToSide = "SELL"
)

func (e TradeAllocationToSide) ToPointer() *TradeAllocationToSide {
	return &e
}

// TradeAllocationWhenIssued - Denotes that this trade allocation was either when_issued or when_distributed.
type TradeAllocationWhenIssued string

const (
	TradeAllocationWhenIssuedWhenIssuedTypeUnspecified TradeAllocationWhenIssued = "WHEN_ISSUED_TYPE_UNSPECIFIED"
	TradeAllocationWhenIssuedWhenIssued                TradeAllocationWhenIssued = "WHEN_ISSUED"
	TradeAllocationWhenIssuedWhenDistributed           TradeAllocationWhenIssued = "WHEN_DISTRIBUTED"
)

func (e TradeAllocationWhenIssued) ToPointer() *TradeAllocationWhenIssued {
	return &e
}

// A TradeAllocation represents the movement of positions between two ascend accounts.
type TradeAllocation struct {
	// The amount of interest that has been accrued in the issuing currency for a single instrument.
	AccruedInterestAmount *TradeAllocationAccruedInterestAmount `json:"accrued_interest_amount,omitempty"`
	// Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Type of the asset being traded.
	AssetType *TradeAllocationAssetType `json:"asset_type,omitempty"`
	// The yield associated with an individual fill of a fixed income trade. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	BondYield []BondYield `json:"bond_yield,omitempty"`
	// Broker capacity for the trade.
	BrokerCapacity *TradeAllocationBrokerCapacity `json:"broker_capacity,omitempty"`
	// The unique identifier that is associated with an order. This is useful for associating the trade allocation with the original trade. This will be assigned a unique UUID if not provided.
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Commission amount of the trade allocation that will only be applied to the to_account_id.
	CommissionAmount *TradeAllocationCommissionAmount `json:"commission_amount,omitempty"`
	// Timestamp of when the trade allocation took place. If settlement_date is not provided, this field will be converted into Eastern Time and used to calculate settlement_date.
	ExecutionTime *time.Time `json:"execution_time,omitempty"`
	// Client calculated fees that will only be applied to the to_account_id. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed.
	Fees []BookingFee `json:"fees,omitempty"`
	// The ULID formatted account_id that the positions will be moved from.
	FromAccountID *string `json:"from_account_id,omitempty"`
	// The current activity_id of the trade allocation that positions will be moved from in the Ledger.
	FromActivityID *string `json:"from_activity_id,omitempty"`
	// Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
	GrossAmount *TradeAllocationGrossAmount `json:"gross_amount,omitempty"`
	// Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Identifier type for the asset being traded.
	IdentifierType *TradeAllocationIdentifierType `json:"identifier_type,omitempty"`
	// Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP.
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// One or many lot matching instructions for the trade allocation.
	LotMatchingInstructions []BookingLot `json:"lot_matching_instructions,omitempty"`
	// Caller provided but can be used for booking-service to note original trade details when booking into the error account or using the error asset.
	Memo *string `json:"memo,omitempty"`
	// The resource name of the trade allocation.
	Name *string `json:"name,omitempty"`
	// The price for the instrument that is prevailing in the market. Required for FIXED_INCOME trade allocations when the broker_capacity is PRINCIPAL.
	PrevailingMarketPrice *TradeAllocationPrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Price with requirement of 8 or less integral number and 8 or less fractional precision.
	Price *TradeAllocationPrice `json:"price,omitempty"`
	// Price adjustment that will be applied to the net price of the security.
	PriceAdjustment *TradeAllocationPriceAdjustment `json:"price_adjustment,omitempty"`
	// Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
	Quantity *TradeAllocationQuantity `json:"quantity,omitempty"`
	// Defaults to T+1 for equities if this is not provided. Calculated using the execution_time field in Eastern Time.
	SettlementDate *TradeAllocationSettlementDate `json:"settlement_date,omitempty"`
	// Side modifier for the trade allocation.
	SideModifier *TradeAllocationSideModifier `json:"side_modifier,omitempty"`
	// The source of the submission.
	SourceApplication *string `json:"source_application,omitempty"`
	// An enumerated list of values used to indicate certain attributes about a trade allocation (E.g. BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)
	SpecialInstructions []TradeAllocationSpecialInstructions `json:"special_instructions,omitempty"`
	// The state that the trade allocation is in.
	State *TradeAllocationState `json:"state,omitempty"`
	// The ULID formatted account_id that the positions will be moved to.
	ToAccountID *string `json:"to_account_id,omitempty"`
	// The current activity_id of the trade allocation that positions will be moved to in the Ledger.
	ToActivityID *string `json:"to_activity_id,omitempty"`
	// Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
	ToSide *TradeAllocationToSide `json:"to_side,omitempty"`
	// A ULID to uniquely identify the trade allocation globally.
	TradeAllocationID *string `json:"trade_allocation_id,omitempty"`
	// Denotes that this trade allocation was either when_issued or when_distributed.
	WhenIssued *TradeAllocationWhenIssued `json:"when_issued,omitempty"`
}

func (t TradeAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TradeAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *TradeAllocation) GetAccruedInterestAmount() *TradeAllocationAccruedInterestAmount {
	if o == nil {
		return nil
	}
	return o.AccruedInterestAmount
}

func (o *TradeAllocation) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *TradeAllocation) GetAssetType() *TradeAllocationAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *TradeAllocation) GetBondYield() []BondYield {
	if o == nil {
		return nil
	}
	return o.BondYield
}

func (o *TradeAllocation) GetBrokerCapacity() *TradeAllocationBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *TradeAllocation) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *TradeAllocation) GetCommissionAmount() *TradeAllocationCommissionAmount {
	if o == nil {
		return nil
	}
	return o.CommissionAmount
}

func (o *TradeAllocation) GetExecutionTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExecutionTime
}

func (o *TradeAllocation) GetFees() []BookingFee {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *TradeAllocation) GetFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.FromAccountID
}

func (o *TradeAllocation) GetFromActivityID() *string {
	if o == nil {
		return nil
	}
	return o.FromActivityID
}

func (o *TradeAllocation) GetGrossAmount() *TradeAllocationGrossAmount {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *TradeAllocation) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *TradeAllocation) GetIdentifierType() *TradeAllocationIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *TradeAllocation) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *TradeAllocation) GetLotMatchingInstructions() []BookingLot {
	if o == nil {
		return nil
	}
	return o.LotMatchingInstructions
}

func (o *TradeAllocation) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *TradeAllocation) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TradeAllocation) GetPrevailingMarketPrice() *TradeAllocationPrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *TradeAllocation) GetPrice() *TradeAllocationPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *TradeAllocation) GetPriceAdjustment() *TradeAllocationPriceAdjustment {
	if o == nil {
		return nil
	}
	return o.PriceAdjustment
}

func (o *TradeAllocation) GetQuantity() *TradeAllocationQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *TradeAllocation) GetSettlementDate() *TradeAllocationSettlementDate {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *TradeAllocation) GetSideModifier() *TradeAllocationSideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *TradeAllocation) GetSourceApplication() *string {
	if o == nil {
		return nil
	}
	return o.SourceApplication
}

func (o *TradeAllocation) GetSpecialInstructions() []TradeAllocationSpecialInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *TradeAllocation) GetState() *TradeAllocationState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *TradeAllocation) GetToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.ToAccountID
}

func (o *TradeAllocation) GetToActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ToActivityID
}

func (o *TradeAllocation) GetToSide() *TradeAllocationToSide {
	if o == nil {
		return nil
	}
	return o.ToSide
}

func (o *TradeAllocation) GetTradeAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.TradeAllocationID
}

func (o *TradeAllocation) GetWhenIssued() *TradeAllocationWhenIssued {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}
