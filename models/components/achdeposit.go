// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// Amount - The amount to deposit in USD.
type Amount struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *Amount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AchDepositType - The type of retirement contribution.
type AchDepositType string

const (
	AchDepositTypeTypeUnspecified           AchDepositType = "TYPE_UNSPECIFIED"
	AchDepositTypeRegular                   AchDepositType = "REGULAR"
	AchDepositTypeEmployee                  AchDepositType = "EMPLOYEE"
	AchDepositTypeEmployer                  AchDepositType = "EMPLOYER"
	AchDepositTypeRecharacterization        AchDepositType = "RECHARACTERIZATION"
	AchDepositTypeRollover60Day             AchDepositType = "ROLLOVER_60_DAY"
	AchDepositTypeRolloverDirect            AchDepositType = "ROLLOVER_DIRECT"
	AchDepositTypeTransfer                  AchDepositType = "TRANSFER"
	AchDepositTypeTrusteeFee                AchDepositType = "TRUSTEE_FEE"
	AchDepositTypeConversion                AchDepositType = "CONVERSION"
	AchDepositTypeRepayment                 AchDepositType = "REPAYMENT"
	AchDepositTypeContributionNonReportable AchDepositType = "CONTRIBUTION_NON_REPORTABLE"
)

func (e AchDepositType) ToPointer() *AchDepositType {
	return &e
}

// RetirementContribution - The retirement contribution details.
type RetirementContribution struct {
	// Tax year for which the contribution is applied. Current year is always valid; prior year is only valid before tax deadline. Must be in "YYYY" format.
	TaxYear *int `json:"tax_year,omitempty"`
	// The type of retirement contribution.
	Type *AchDepositType `json:"type,omitempty"`
}

func (o *RetirementContribution) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *RetirementContribution) GetType() *AchDepositType {
	if o == nil {
		return nil
	}
	return o.Type
}

// AchDepositStateState - The high level state of a transfer, one of:
// - `PROCESSING` - The transfer is being processed and will be posted if successful.
// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
// - `COMPLETED` - The transfer has been batched and completed.
// - `REJECTED` - The transfer was rejected.
// - `CANCELED` - The transfer was canceled.
// - `RETURNED` - The transfer was returned.
// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
type AchDepositStateState string

const (
	AchDepositStateStateStateUnspecified AchDepositStateState = "STATE_UNSPECIFIED"
	AchDepositStateStateProcessing       AchDepositStateState = "PROCESSING"
	AchDepositStateStatePendingReview    AchDepositStateState = "PENDING_REVIEW"
	AchDepositStateStatePosted           AchDepositStateState = "POSTED"
	AchDepositStateStateCompleted        AchDepositStateState = "COMPLETED"
	AchDepositStateStateRejected         AchDepositStateState = "REJECTED"
	AchDepositStateStateCanceled         AchDepositStateState = "CANCELED"
	AchDepositStateStateReturned         AchDepositStateState = "RETURNED"
	AchDepositStateStatePostponed        AchDepositStateState = "POSTPONED"
)

func (e AchDepositStateState) ToPointer() *AchDepositStateState {
	return &e
}

// AchDepositState - The current state of the ACH deposit.
type AchDepositState struct {
	// The user or service that triggered the state update.
	Actor *string `json:"actor,omitempty"`
	// Additional description of the transfer state.
	Message *string `json:"message,omitempty"`
	// Additional metadata relating to the transfer state. Included data depends on the state, e.g.:
	//  - Rejection reasons are included when the `state` is `REJECTED`
	//  - Reason and comment are included when `state` is `CANCELED`
	Metadata map[string]any `json:"metadata,omitempty"`
	// The high level state of a transfer, one of:
	// - `PROCESSING` - The transfer is being processed and will be posted if successful.
	// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
	// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
	// - `COMPLETED` - The transfer has been batched and completed.
	// - `REJECTED` - The transfer was rejected.
	// - `CANCELED` - The transfer was canceled.
	// - `RETURNED` - The transfer was returned.
	// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
	State *AchDepositStateState `json:"state,omitempty"`
	// The time of the state update.
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

func (a AchDepositState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AchDepositState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AchDepositState) GetActor() *string {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *AchDepositState) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *AchDepositState) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *AchDepositState) GetState() *AchDepositStateState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *AchDepositState) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

// AchDeposit - A deposit transfer using the ACH mechanism.
type AchDeposit struct {
	// The amount to deposit in USD.
	Amount *Amount `json:"amount,omitempty"`
	// The bank relationship to be used for the ACH deposit.
	BankRelationship *string `json:"bank_relationship,omitempty"`
	// The external identifier supplied by the API caller. Each request must have a unique pairing of `client_transfer_id` and `account`.
	ClientTransferID *string `json:"client_transfer_id,omitempty"`
	// The memo that will appear on the customer's bank statement.
	Memo *string `json:"memo,omitempty"`
	// The resource name of the ACH deposit.
	Name *string `json:"name,omitempty"`
	// The retirement contribution details.
	RetirementContribution *RetirementContribution `json:"retirement_contribution,omitempty"`
	// The current state of the ACH deposit.
	State *AchDepositState `json:"state,omitempty"`
}

func (o *AchDeposit) GetAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *AchDeposit) GetBankRelationship() *string {
	if o == nil {
		return nil
	}
	return o.BankRelationship
}

func (o *AchDeposit) GetClientTransferID() *string {
	if o == nil {
		return nil
	}
	return o.ClientTransferID
}

func (o *AchDeposit) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *AchDeposit) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AchDeposit) GetRetirementContribution() *RetirementContribution {
	if o == nil {
		return nil
	}
	return o.RetirementContribution
}

func (o *AchDeposit) GetState() *AchDepositState {
	if o == nil {
		return nil
	}
	return o.State
}
