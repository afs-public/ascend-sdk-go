// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// TransfersCreditAmount - The amount of the credit being issued to the investor
type TransfersCreditAmount struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *TransfersCreditAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TransfersCreditStateState - The high level state of a transfer, one of:
// - `PROCESSING` - The transfer is being processed and will be posted if successful.
// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
// - `COMPLETED` - The transfer has been batched and completed.
// - `REJECTED` - The transfer was rejected.
// - `CANCELED` - The transfer was canceled.
// - `RETURNED` - The transfer was returned.
// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
type TransfersCreditStateState string

const (
	TransfersCreditStateStateStateUnspecified TransfersCreditStateState = "STATE_UNSPECIFIED"
	TransfersCreditStateStateProcessing       TransfersCreditStateState = "PROCESSING"
	TransfersCreditStateStatePendingReview    TransfersCreditStateState = "PENDING_REVIEW"
	TransfersCreditStateStatePosted           TransfersCreditStateState = "POSTED"
	TransfersCreditStateStateCompleted        TransfersCreditStateState = "COMPLETED"
	TransfersCreditStateStateRejected         TransfersCreditStateState = "REJECTED"
	TransfersCreditStateStateCanceled         TransfersCreditStateState = "CANCELED"
	TransfersCreditStateStateReturned         TransfersCreditStateState = "RETURNED"
	TransfersCreditStateStatePostponed        TransfersCreditStateState = "POSTPONED"
)

func (e TransfersCreditStateState) ToPointer() *TransfersCreditStateState {
	return &e
}
func (e *TransfersCreditStateState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "PENDING_REVIEW":
		fallthrough
	case "POSTED":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "CANCELED":
		fallthrough
	case "RETURNED":
		fallthrough
	case "POSTPONED":
		*e = TransfersCreditStateState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersCreditStateState: %v", v)
	}
}

// TransfersCreditState - The current state of the credit
type TransfersCreditState struct {
	// The user or service that triggered the state update.
	Actor *string `json:"actor,omitempty"`
	// Additional description of the transfer state.
	Message *string `json:"message,omitempty"`
	// Additional metadata relating to the transfer state. Included data depends on the state, e.g.:
	//  - Rejection reasons are included when the `state` is `REJECTED`
	//  - Reason and comment are included when `state` is `CANCELED`
	Metadata map[string]any `json:"metadata,omitempty"`
	// The high level state of a transfer, one of:
	// - `PROCESSING` - The transfer is being processed and will be posted if successful.
	// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
	// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
	// - `COMPLETED` - The transfer has been batched and completed.
	// - `REJECTED` - The transfer was rejected.
	// - `CANCELED` - The transfer was canceled.
	// - `RETURNED` - The transfer was returned.
	// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
	State *TransfersCreditStateState `json:"state,omitempty"`
	// The time of the state update.
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

func (t TransfersCreditState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransfersCreditState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransfersCreditState) GetActor() *string {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *TransfersCreditState) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *TransfersCreditState) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *TransfersCreditState) GetState() *TransfersCreditStateState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *TransfersCreditState) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

// TransfersCreditType - The type of the credit being issued
type TransfersCreditType string

const (
	TransfersCreditTypeTypeUnspecified TransfersCreditType = "TYPE_UNSPECIFIED"
	TransfersCreditTypePromotional     TransfersCreditType = "PROMOTIONAL"
	TransfersCreditTypeWriteOff        TransfersCreditType = "WRITE_OFF"
	TransfersCreditTypeReimbursement   TransfersCreditType = "REIMBURSEMENT"
)

func (e TransfersCreditType) ToPointer() *TransfersCreditType {
	return &e
}
func (e *TransfersCreditType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "PROMOTIONAL":
		fallthrough
	case "WRITE_OFF":
		fallthrough
	case "REIMBURSEMENT":
		*e = TransfersCreditType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersCreditType: %v", v)
	}
}

// TransfersCredit - A transfer using the CREDIT mechanism. Funds are moved from a firm account to a customer's brokerage account
type TransfersCredit struct {
	// The amount of the credit being issued to the investor
	Amount *TransfersCreditAmount `json:"amount,omitempty"`
	// External identifier supplied by the API caller. Each request must have a unique pairing of client_transfer_id and account
	ClientTransferID *string `json:"client_transfer_id,omitempty"`
	// Optional description information that will attach to this transaction
	Description *string `json:"description,omitempty"`
	// Full name of the credit resource, which contains account id and credit transaction id
	Name *string `json:"name,omitempty"`
	// The current state of the credit
	State *TransfersCreditState `json:"state,omitempty"`
	// The type of the credit being issued
	Type *TransfersCreditType `json:"type,omitempty"`
}

func (o *TransfersCredit) GetAmount() *TransfersCreditAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *TransfersCredit) GetClientTransferID() *string {
	if o == nil {
		return nil
	}
	return o.ClientTransferID
}

func (o *TransfersCredit) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TransfersCredit) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *TransfersCredit) GetState() *TransfersCreditState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *TransfersCredit) GetType() *TransfersCreditType {
	if o == nil {
		return nil
	}
	return o.Type
}
