// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// TransfersCreditCreateType - The type of the credit being issued
type TransfersCreditCreateType string

const (
	TransfersCreditCreateTypeTypeUnspecified TransfersCreditCreateType = "TYPE_UNSPECIFIED"
	TransfersCreditCreateTypePromotional     TransfersCreditCreateType = "PROMOTIONAL"
	TransfersCreditCreateTypeWriteOff        TransfersCreditCreateType = "WRITE_OFF"
	TransfersCreditCreateTypeReimbursement   TransfersCreditCreateType = "REIMBURSEMENT"
)

func (e TransfersCreditCreateType) ToPointer() *TransfersCreditCreateType {
	return &e
}

// TransfersCreditCreate - A transfer using the CREDIT mechanism. Funds are moved from a firm account to a customer's brokerage account
type TransfersCreditCreate struct {
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	Amount DecimalCreate `json:"amount"`
	// External identifier supplied by the API caller. Each request must have a unique pairing of client_transfer_id and account
	ClientTransferID string `json:"client_transfer_id"`
	// Optional description information that will attach to this transaction
	Description *string `json:"description,omitempty"`
	// The type of the credit being issued
	Type TransfersCreditCreateType `json:"type"`
}

func (o *TransfersCreditCreate) GetAmount() DecimalCreate {
	if o == nil {
		return DecimalCreate{}
	}
	return o.Amount
}

func (o *TransfersCreditCreate) GetClientTransferID() string {
	if o == nil {
		return ""
	}
	return o.ClientTransferID
}

func (o *TransfersCreditCreate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TransfersCreditCreate) GetType() TransfersCreditCreateType {
	if o == nil {
		return TransfersCreditCreateType("")
	}
	return o.Type
}
