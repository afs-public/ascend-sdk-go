// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// BirthDateVerified - Whether or not the customer birth date was verified
type BirthDateVerified string

const (
	BirthDateVerifiedVerificationStateUnspecified BirthDateVerified = "VERIFICATION_STATE_UNSPECIFIED"
	BirthDateVerifiedNotInScope                   BirthDateVerified = "NOT_IN_SCOPE"
	BirthDateVerifiedVerified                     BirthDateVerified = "VERIFIED"
	BirthDateVerifiedUnverified                   BirthDateVerified = "UNVERIFIED"
	BirthDateVerifiedInconclusive                 BirthDateVerified = "INCONCLUSIVE"
)

func (e BirthDateVerified) ToPointer() *BirthDateVerified {
	return &e
}

// DocumentAuthenticityVerified - Whether or not the document authenticity is verified or not Will be NOT_IN_SCOPE if the check being done is not documentary
type DocumentAuthenticityVerified string

const (
	DocumentAuthenticityVerifiedVerificationStateUnspecified DocumentAuthenticityVerified = "VERIFICATION_STATE_UNSPECIFIED"
	DocumentAuthenticityVerifiedNotInScope                   DocumentAuthenticityVerified = "NOT_IN_SCOPE"
	DocumentAuthenticityVerifiedVerified                     DocumentAuthenticityVerified = "VERIFIED"
	DocumentAuthenticityVerifiedUnverified                   DocumentAuthenticityVerified = "UNVERIFIED"
	DocumentAuthenticityVerifiedInconclusive                 DocumentAuthenticityVerified = "INCONCLUSIVE"
)

func (e DocumentAuthenticityVerified) ToPointer() *DocumentAuthenticityVerified {
	return &e
}

// DocumentExpiryStatus - Whether or not the document expiry was verified This is only in scope for document verification checks If document is expired this will be set to EXPIRED
type DocumentExpiryStatus string

const (
	DocumentExpiryStatusExpirationStateUnspecified DocumentExpiryStatus = "EXPIRATION_STATE_UNSPECIFIED"
	DocumentExpiryStatusUnexpired                  DocumentExpiryStatus = "UNEXPIRED"
	DocumentExpiryStatusExpired                    DocumentExpiryStatus = "EXPIRED"
	DocumentExpiryStatusNotApplicable              DocumentExpiryStatus = "NOT_APPLICABLE"
)

func (e DocumentExpiryStatus) ToPointer() *DocumentExpiryStatus {
	return &e
}

// EmailVerified - Whether or not the customer email was verified
type EmailVerified string

const (
	EmailVerifiedVerificationStateUnspecified EmailVerified = "VERIFICATION_STATE_UNSPECIFIED"
	EmailVerifiedNotInScope                   EmailVerified = "NOT_IN_SCOPE"
	EmailVerifiedVerified                     EmailVerified = "VERIFIED"
	EmailVerifiedUnverified                   EmailVerified = "UNVERIFIED"
	EmailVerifiedInconclusive                 EmailVerified = "INCONCLUSIVE"
)

func (e EmailVerified) ToPointer() *EmailVerified {
	return &e
}

// IdentificationNumberVerified - Whether or not the customer identification number was verified
type IdentificationNumberVerified string

const (
	IdentificationNumberVerifiedVerificationStateUnspecified IdentificationNumberVerified = "VERIFICATION_STATE_UNSPECIFIED"
	IdentificationNumberVerifiedNotInScope                   IdentificationNumberVerified = "NOT_IN_SCOPE"
	IdentificationNumberVerifiedVerified                     IdentificationNumberVerified = "VERIFIED"
	IdentificationNumberVerifiedUnverified                   IdentificationNumberVerified = "UNVERIFIED"
	IdentificationNumberVerifiedInconclusive                 IdentificationNumberVerified = "INCONCLUSIVE"
)

func (e IdentificationNumberVerified) ToPointer() *IdentificationNumberVerified {
	return &e
}

type IdentityVerificationTypes string

const (
	IdentityVerificationTypesIdentityVerificationTypeUnspecified IdentityVerificationTypes = "IDENTITY_VERIFICATION_TYPE_UNSPECIFIED"
	IdentityVerificationTypesDatabase                            IdentityVerificationTypes = "DATABASE"
	IdentityVerificationTypesDocumentary                         IdentityVerificationTypes = "DOCUMENTARY"
	IdentityVerificationTypesSelfie                              IdentityVerificationTypes = "SELFIE"
)

func (e IdentityVerificationTypes) ToPointer() *IdentityVerificationTypes {
	return &e
}

// LegalAddressVerified - Whether or not the customer legal address was verified
type LegalAddressVerified string

const (
	LegalAddressVerifiedVerificationStateUnspecified LegalAddressVerified = "VERIFICATION_STATE_UNSPECIFIED"
	LegalAddressVerifiedNotInScope                   LegalAddressVerified = "NOT_IN_SCOPE"
	LegalAddressVerifiedVerified                     LegalAddressVerified = "VERIFIED"
	LegalAddressVerifiedUnverified                   LegalAddressVerified = "UNVERIFIED"
	LegalAddressVerifiedInconclusive                 LegalAddressVerified = "INCONCLUSIVE"
)

func (e LegalAddressVerified) ToPointer() *LegalAddressVerified {
	return &e
}

// NameVerified - Presents verified results e.g. if name or birth date have been verified
type NameVerified string

const (
	NameVerifiedVerificationStateUnspecified NameVerified = "VERIFICATION_STATE_UNSPECIFIED"
	NameVerifiedNotInScope                   NameVerified = "NOT_IN_SCOPE"
	NameVerifiedVerified                     NameVerified = "VERIFIED"
	NameVerifiedUnverified                   NameVerified = "UNVERIFIED"
	NameVerifiedInconclusive                 NameVerified = "INCONCLUSIVE"
)

func (e NameVerified) ToPointer() *NameVerified {
	return &e
}

// PhoneNumberVerified - Whether or not the customer phone number was verified
type PhoneNumberVerified string

const (
	PhoneNumberVerifiedVerificationStateUnspecified PhoneNumberVerified = "VERIFICATION_STATE_UNSPECIFIED"
	PhoneNumberVerifiedNotInScope                   PhoneNumberVerified = "NOT_IN_SCOPE"
	PhoneNumberVerifiedVerified                     PhoneNumberVerified = "VERIFIED"
	PhoneNumberVerifiedUnverified                   PhoneNumberVerified = "UNVERIFIED"
	PhoneNumberVerifiedInconclusive                 PhoneNumberVerified = "INCONCLUSIVE"
)

func (e PhoneNumberVerified) ToPointer() *PhoneNumberVerified {
	return &e
}

// SelfieVerified - Whether or not the customer photo identification was verified Will be NOT_IN_SCOPE if the check being done is not selfie
type SelfieVerified string

const (
	SelfieVerifiedVerificationStateUnspecified SelfieVerified = "VERIFICATION_STATE_UNSPECIFIED"
	SelfieVerifiedNotInScope                   SelfieVerified = "NOT_IN_SCOPE"
	SelfieVerifiedVerified                     SelfieVerified = "VERIFIED"
	SelfieVerifiedUnverified                   SelfieVerified = "UNVERIFIED"
	SelfieVerifiedInconclusive                 SelfieVerified = "INCONCLUSIVE"
)

func (e SelfieVerified) ToPointer() *SelfieVerified {
	return &e
}

// CustomerIdentificationResult - Result from a customer identification check
type CustomerIdentificationResult struct {
	// Whether or not the customer birth date was verified
	BirthDateVerified *BirthDateVerified `json:"birth_date_verified,omitempty"`
	// Whether or not the result is completed Must be true to be linked to an Investigation or used to Create/Update an LegalNaturalPerson
	Completed *bool `json:"completed,omitempty"`
	// Whether or not the document authenticity is verified or not Will be NOT_IN_SCOPE if the check being done is not documentary
	DocumentAuthenticityVerified *DocumentAuthenticityVerified `json:"document_authenticity_verified,omitempty"`
	// Whether or not the document expiry was verified This is only in scope for document verification checks If document is expired this will be set to EXPIRED
	DocumentExpiryStatus *DocumentExpiryStatus `json:"document_expiry_status,omitempty"`
	// One or more ULIDs from the documents api of the image(s) of the document that relates to the identification check for a DOCUMENTARY check, these will be the images provided in the session
	DocumentVerificationIds []string `json:"document_verification_ids,omitempty"`
	// The URI to complete documentary session Will be populated if the CheckType is DOCUMENTARY
	DocumentarySessionURI *string `json:"documentary_session_uri,omitempty"`
	// Whether or not the customer email was verified
	EmailVerified *EmailVerified `json:"email_verified,omitempty"`
	// The name of the external vendor
	ExternalVendor *string `json:"external_vendor,omitempty"`
	// The id relating to the external vendor
	ExternalVendorID *string `json:"external_vendor_id,omitempty"`
	// Whether or not the customer identification number was verified
	IdentificationNumberVerified *IdentificationNumberVerified `json:"identification_number_verified,omitempty"`
	// Describes the type(s) of Identity Verification that was performed
	IdentityVerificationTypes []IdentityVerificationTypes `json:"identity_verification_types,omitempty"`
	// Whether or not the customer legal address was verified
	LegalAddressVerified *LegalAddressVerified `json:"legal_address_verified,omitempty"`
	// Presents verified results e.g. if name or birth date have been verified
	NameVerified *NameVerified `json:"name_verified,omitempty"`
	// Whether or not the customer phone number was verified
	PhoneNumberVerified *PhoneNumberVerified `json:"phone_number_verified,omitempty"`
	// Raw vendor result will return full json response from vendor if view is set to FULL
	RawVendorResult *string `json:"raw_vendor_result,omitempty"`
	// Whether or not the customer photo identification was verified Will be NOT_IN_SCOPE if the check being done is not selfie
	SelfieVerified *SelfieVerified `json:"selfie_verified,omitempty"`
}

func (o *CustomerIdentificationResult) GetBirthDateVerified() *BirthDateVerified {
	if o == nil {
		return nil
	}
	return o.BirthDateVerified
}

func (o *CustomerIdentificationResult) GetCompleted() *bool {
	if o == nil {
		return nil
	}
	return o.Completed
}

func (o *CustomerIdentificationResult) GetDocumentAuthenticityVerified() *DocumentAuthenticityVerified {
	if o == nil {
		return nil
	}
	return o.DocumentAuthenticityVerified
}

func (o *CustomerIdentificationResult) GetDocumentExpiryStatus() *DocumentExpiryStatus {
	if o == nil {
		return nil
	}
	return o.DocumentExpiryStatus
}

func (o *CustomerIdentificationResult) GetDocumentVerificationIds() []string {
	if o == nil {
		return nil
	}
	return o.DocumentVerificationIds
}

func (o *CustomerIdentificationResult) GetDocumentarySessionURI() *string {
	if o == nil {
		return nil
	}
	return o.DocumentarySessionURI
}

func (o *CustomerIdentificationResult) GetEmailVerified() *EmailVerified {
	if o == nil {
		return nil
	}
	return o.EmailVerified
}

func (o *CustomerIdentificationResult) GetExternalVendor() *string {
	if o == nil {
		return nil
	}
	return o.ExternalVendor
}

func (o *CustomerIdentificationResult) GetExternalVendorID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalVendorID
}

func (o *CustomerIdentificationResult) GetIdentificationNumberVerified() *IdentificationNumberVerified {
	if o == nil {
		return nil
	}
	return o.IdentificationNumberVerified
}

func (o *CustomerIdentificationResult) GetIdentityVerificationTypes() []IdentityVerificationTypes {
	if o == nil {
		return nil
	}
	return o.IdentityVerificationTypes
}

func (o *CustomerIdentificationResult) GetLegalAddressVerified() *LegalAddressVerified {
	if o == nil {
		return nil
	}
	return o.LegalAddressVerified
}

func (o *CustomerIdentificationResult) GetNameVerified() *NameVerified {
	if o == nil {
		return nil
	}
	return o.NameVerified
}

func (o *CustomerIdentificationResult) GetPhoneNumberVerified() *PhoneNumberVerified {
	if o == nil {
		return nil
	}
	return o.PhoneNumberVerified
}

func (o *CustomerIdentificationResult) GetRawVendorResult() *string {
	if o == nil {
		return nil
	}
	return o.RawVendorResult
}

func (o *CustomerIdentificationResult) GetSelfieVerified() *SelfieVerified {
	if o == nil {
		return nil
	}
	return o.SelfieVerified
}
