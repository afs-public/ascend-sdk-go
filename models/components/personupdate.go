// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// PersonUpdateNameSuffix - Suffix of the person's name
type PersonUpdateNameSuffix string

const (
	PersonUpdateNameSuffixNameSuffixUnspecified PersonUpdateNameSuffix = "NAME_SUFFIX_UNSPECIFIED"
	PersonUpdateNameSuffixSr                    PersonUpdateNameSuffix = "SR"
	PersonUpdateNameSuffixJr                    PersonUpdateNameSuffix = "JR"
	PersonUpdateNameSuffixIii                   PersonUpdateNameSuffix = "III"
	PersonUpdateNameSuffixIv                    PersonUpdateNameSuffix = "IV"
	PersonUpdateNameSuffixV                     PersonUpdateNameSuffix = "V"
)

func (e PersonUpdateNameSuffix) ToPointer() *PersonUpdateNameSuffix {
	return &e
}

// PersonUpdate - investigation details on a person
type PersonUpdate struct {
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	BirthDate *DateUpdate `json:"birth_date,omitempty"`
	// Two character region code, complies with https://cldr.unicode.org/index Example values: "US", "CA"
	BirthRegionCode *string `json:"birth_region_code,omitempty"`
	// The countries where a natural person retains citizenship; This is used for tax (treaty) and country block list considerations Two character region code, complies with https://cldr.unicode.org/index Example values: "US", "CA"
	CitizenshipRegionCodes []string `json:"citizenship_region_codes,omitempty"`
	// Conditional: document_ids must be provided by the correspondent if InvestigationRequestScope = PERFORMED_BY_APEX and citizenship_country is not USA
	DocumentIds []string `json:"document_ids,omitempty"`
	// Email addresses indicated for account communications
	EmailAddresses []string `json:"email_addresses,omitempty"`
	// Family name of a natural person
	FamilyName *string `json:"family_name,omitempty"`
	// The given name of a natural person; Conventionally known as 'first name' in most English-speaking countries
	GivenName *string `json:"given_name,omitempty"`
	// Identification details including id value, and type (e.g. ssn)
	Identifications []PersonIdentificationUpdate `json:"identifications,omitempty"`
	// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains).
	//
	//  In typical usage an address would be created via user input or from importing existing data, depending on the type of process.
	//
	//  Advice on address input / editing: - Use an i18n-ready address widget such as  https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of  fields outside countries where that field is used.
	//
	//  For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
	LegalAddress *PostalAddressUpdate `json:"legal_address,omitempty"`
	// mailing address
	MailingAddresses []PostalAddressUpdate `json:"mailing_addresses,omitempty"`
	// Middle names
	MiddleNames *string `json:"middle_names,omitempty"`
	// Suffix of the person's name
	NameSuffix *PersonUpdateNameSuffix `json:"name_suffix,omitempty"`
	// phone numbers related to this person
	PhoneNumbers []string `json:"phone_numbers,omitempty"`
	// Clients must supply data and confirmation attesting to identity verification.
	ProvidedIdentityVerification *ProvidedIdentityVerificationUpdate `json:"provided_identity_verification,omitempty"`
}

func (o *PersonUpdate) GetBirthDate() *DateUpdate {
	if o == nil {
		return nil
	}
	return o.BirthDate
}

func (o *PersonUpdate) GetBirthRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.BirthRegionCode
}

func (o *PersonUpdate) GetCitizenshipRegionCodes() []string {
	if o == nil {
		return nil
	}
	return o.CitizenshipRegionCodes
}

func (o *PersonUpdate) GetDocumentIds() []string {
	if o == nil {
		return nil
	}
	return o.DocumentIds
}

func (o *PersonUpdate) GetEmailAddresses() []string {
	if o == nil {
		return nil
	}
	return o.EmailAddresses
}

func (o *PersonUpdate) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *PersonUpdate) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *PersonUpdate) GetIdentifications() []PersonIdentificationUpdate {
	if o == nil {
		return nil
	}
	return o.Identifications
}

func (o *PersonUpdate) GetLegalAddress() *PostalAddressUpdate {
	if o == nil {
		return nil
	}
	return o.LegalAddress
}

func (o *PersonUpdate) GetMailingAddresses() []PostalAddressUpdate {
	if o == nil {
		return nil
	}
	return o.MailingAddresses
}

func (o *PersonUpdate) GetMiddleNames() *string {
	if o == nil {
		return nil
	}
	return o.MiddleNames
}

func (o *PersonUpdate) GetNameSuffix() *PersonUpdateNameSuffix {
	if o == nil {
		return nil
	}
	return o.NameSuffix
}

func (o *PersonUpdate) GetPhoneNumbers() []string {
	if o == nil {
		return nil
	}
	return o.PhoneNumbers
}

func (o *PersonUpdate) GetProvidedIdentityVerification() *ProvidedIdentityVerificationUpdate {
	if o == nil {
		return nil
	}
	return o.ProvidedIdentityVerification
}
