// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// LegalNaturalPersonUpdateMaritalStatus - The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
type LegalNaturalPersonUpdateMaritalStatus string

const (
	LegalNaturalPersonUpdateMaritalStatusMaritalStatusUnspecified LegalNaturalPersonUpdateMaritalStatus = "MARITAL_STATUS_UNSPECIFIED"
	LegalNaturalPersonUpdateMaritalStatusSingle                   LegalNaturalPersonUpdateMaritalStatus = "SINGLE"
	LegalNaturalPersonUpdateMaritalStatusMarried                  LegalNaturalPersonUpdateMaritalStatus = "MARRIED"
	LegalNaturalPersonUpdateMaritalStatusDivorced                 LegalNaturalPersonUpdateMaritalStatus = "DIVORCED"
	LegalNaturalPersonUpdateMaritalStatusWidowed                  LegalNaturalPersonUpdateMaritalStatus = "WIDOWED"
)

func (e LegalNaturalPersonUpdateMaritalStatus) ToPointer() *LegalNaturalPersonUpdateMaritalStatus {
	return &e
}

// LegalNaturalPersonUpdateNameSuffix - The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
type LegalNaturalPersonUpdateNameSuffix string

const (
	LegalNaturalPersonUpdateNameSuffixNameSuffixUnspecified LegalNaturalPersonUpdateNameSuffix = "NAME_SUFFIX_UNSPECIFIED"
	LegalNaturalPersonUpdateNameSuffixSr                    LegalNaturalPersonUpdateNameSuffix = "SR"
	LegalNaturalPersonUpdateNameSuffixJr                    LegalNaturalPersonUpdateNameSuffix = "JR"
	LegalNaturalPersonUpdateNameSuffixIii                   LegalNaturalPersonUpdateNameSuffix = "III"
	LegalNaturalPersonUpdateNameSuffixIv                    LegalNaturalPersonUpdateNameSuffix = "IV"
	LegalNaturalPersonUpdateNameSuffixV                     LegalNaturalPersonUpdateNameSuffix = "V"
)

func (e LegalNaturalPersonUpdateNameSuffix) ToPointer() *LegalNaturalPersonUpdateNameSuffix {
	return &e
}

// LegalNaturalPersonUpdateTaxIDType - The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
type LegalNaturalPersonUpdateTaxIDType string

const (
	LegalNaturalPersonUpdateTaxIDTypeTaxIDTypeUnspecified LegalNaturalPersonUpdateTaxIDType = "TAX_ID_TYPE_UNSPECIFIED"
	LegalNaturalPersonUpdateTaxIDTypeTaxIDTypeSsn         LegalNaturalPersonUpdateTaxIDType = "TAX_ID_TYPE_SSN"
	LegalNaturalPersonUpdateTaxIDTypeTaxIDTypeItin        LegalNaturalPersonUpdateTaxIDType = "TAX_ID_TYPE_ITIN"
	LegalNaturalPersonUpdateTaxIDTypeTaxIDTypeEin         LegalNaturalPersonUpdateTaxIDType = "TAX_ID_TYPE_EIN"
)

func (e LegalNaturalPersonUpdateTaxIDType) ToPointer() *LegalNaturalPersonUpdateTaxIDType {
	return &e
}

// LegalNaturalPersonUpdate - A legal natural person. This represents the full set of data for an individual. A Customer Identification Program (CIP) may be run on legal natural persons.
type LegalNaturalPersonUpdate struct {
	// Indicates whether the person is an accredited investor
	AccreditedInvestor *bool `json:"accredited_investor,omitempty"`
	// Indicates whether the person is an adviser
	Adviser *bool `json:"adviser,omitempty"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	BirthDate *DateUpdate `json:"birth_date,omitempty"`
	// This is used for tax (treaty) and country block list considerations Maximum list of two 2-char CLDR Code citizenship countries, e.g. US, CA
	CitizenshipCountries []string `json:"citizenship_countries,omitempty"`
	// A list of ticker symbols in which the underlying person is a control person; control persons are defined as having significant influence over a company’s management and operations, typically through ownership of a large percentage of the company’s voting stock or through positions on the company’s board of directors or executive team
	ControlPersonCompanySymbols *string `json:"control_person_company_symbols,omitempty"`
	// Indicates the related owner record is an employee of the clearing broker's correspondent customer.
	CorrespondentEmployee *bool `json:"correspondent_employee,omitempty"`
	// A unique identifier referencing a Correspondent; A Client may have several operating Correspondents within its purview.
	CorrespondentID *string `json:"correspondent_id,omitempty"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	DeathDate *DateUpdate `json:"death_date,omitempty"`
	// DBA (Doing Business As) names. Can list up to 5 associated with the Legal Natural Person
	DoingBusinessAs []string `json:"doing_business_as,omitempty"`
	// Object containing information pertaining to a investor's current employer including the name, address, and duration of employment.
	Employment *EmploymentUpdate `json:"employment,omitempty"`
	// Family name of a natural person.
	FamilyName *string `json:"family_name,omitempty"`
	// The name of the FINRA-associated entity the underlying natural person is affiliated with.
	FinraAssociatedEntity *string `json:"finra_associated_entity,omitempty"`
	// Foreign identification
	ForeignIdentification *ForeignIdentificationUpdate `json:"foreign_identification,omitempty"`
	// The given name of a natural person; Conventionally known as 'first name' in most English-speaking countries.
	GivenName *string `json:"given_name,omitempty"`
	// An identity verification result that clients may supply. This result represents data and confirmation attesting to identity verification.
	IdentityVerificationResult *IdentityVerificationResultUpdate `json:"identity_verification_result,omitempty"`
	// Indicates whether the person is an institutional customer
	InstitutionalCustomer *bool `json:"institutional_customer,omitempty"`
	// A large trader.
	LargeTrader *LargeTraderUpdate `json:"large_trader,omitempty"`
	// The legal marital status of an account-holder; Used in combination with state of domicile to determine qualification for account types and beneficiary exclusion rules.
	MaritalStatus *LegalNaturalPersonUpdateMaritalStatus `json:"marital_status,omitempty"`
	// Non-primary names representing a natural person; Name attributed to a person other than "Given" and "Family" names.
	MiddleNames *string `json:"middle_names,omitempty"`
	// The suffix of a natural person; A suffix in a name is any part of the name that comes after the last name
	NameSuffix *LegalNaturalPersonUpdateNameSuffix `json:"name_suffix,omitempty"`
	// Foreign Due Diligence for Legal Natural Persons required when a Legal Natural Person is the Primary Owner on a non-resident/non-citizen Account.
	NaturalPersonFdd *NaturalPersonFddUpdate `json:"natural_person_fdd,omitempty"`
	// Non Citizenship Residency to facilitate non-Citizen lawful US residents to open domestic accounts.
	NonCitizenResidency *NonCitizenResidencyUpdate `json:"non_citizen_residency,omitempty"`
	// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains).
	//
	//  In typical usage an address would be created via user input or from importing existing data, depending on the type of process.
	//
	//  Advice on address input / editing: - Use an i18n-ready address widget such as  https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of  fields outside countries where that field is used.
	//
	//  For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
	PersonalAddress *PostalAddressUpdate `json:"personal_address,omitempty"`
	// A Party's self-disclosed list of names representing family members who are politically exposed.
	PoliticallyExposedImmediateFamilyNames []string `json:"politically_exposed_immediate_family_names,omitempty"`
	// A Party's self-disclosed list of named politically exposed organizations they are personally associated with.
	PoliticallyExposedOrganization *string `json:"politically_exposed_organization,omitempty"`
	// Boolean indicator whether the LNP is subject to backup withholding
	SubjectToBackupWithholding *bool `json:"subject_to_backup_withholding,omitempty"`
	// The full U.S. tax ID for a related person; Must be provided with `ITIN` or `SSN` tax ID type
	TaxID *string `json:"tax_id,omitempty"`
	// The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
	TaxIDType *LegalNaturalPersonUpdateTaxIDType `json:"tax_id_type,omitempty"`
	// Tax Profile pertaining to the Legal Entity or Natural Person.
	TaxProfile *TaxProfileUpdate `json:"tax_profile,omitempty"`
}

func (o *LegalNaturalPersonUpdate) GetAccreditedInvestor() *bool {
	if o == nil {
		return nil
	}
	return o.AccreditedInvestor
}

func (o *LegalNaturalPersonUpdate) GetAdviser() *bool {
	if o == nil {
		return nil
	}
	return o.Adviser
}

func (o *LegalNaturalPersonUpdate) GetBirthDate() *DateUpdate {
	if o == nil {
		return nil
	}
	return o.BirthDate
}

func (o *LegalNaturalPersonUpdate) GetCitizenshipCountries() []string {
	if o == nil {
		return nil
	}
	return o.CitizenshipCountries
}

func (o *LegalNaturalPersonUpdate) GetControlPersonCompanySymbols() *string {
	if o == nil {
		return nil
	}
	return o.ControlPersonCompanySymbols
}

func (o *LegalNaturalPersonUpdate) GetCorrespondentEmployee() *bool {
	if o == nil {
		return nil
	}
	return o.CorrespondentEmployee
}

func (o *LegalNaturalPersonUpdate) GetCorrespondentID() *string {
	if o == nil {
		return nil
	}
	return o.CorrespondentID
}

func (o *LegalNaturalPersonUpdate) GetDeathDate() *DateUpdate {
	if o == nil {
		return nil
	}
	return o.DeathDate
}

func (o *LegalNaturalPersonUpdate) GetDoingBusinessAs() []string {
	if o == nil {
		return nil
	}
	return o.DoingBusinessAs
}

func (o *LegalNaturalPersonUpdate) GetEmployment() *EmploymentUpdate {
	if o == nil {
		return nil
	}
	return o.Employment
}

func (o *LegalNaturalPersonUpdate) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *LegalNaturalPersonUpdate) GetFinraAssociatedEntity() *string {
	if o == nil {
		return nil
	}
	return o.FinraAssociatedEntity
}

func (o *LegalNaturalPersonUpdate) GetForeignIdentification() *ForeignIdentificationUpdate {
	if o == nil {
		return nil
	}
	return o.ForeignIdentification
}

func (o *LegalNaturalPersonUpdate) GetGivenName() *string {
	if o == nil {
		return nil
	}
	return o.GivenName
}

func (o *LegalNaturalPersonUpdate) GetIdentityVerificationResult() *IdentityVerificationResultUpdate {
	if o == nil {
		return nil
	}
	return o.IdentityVerificationResult
}

func (o *LegalNaturalPersonUpdate) GetInstitutionalCustomer() *bool {
	if o == nil {
		return nil
	}
	return o.InstitutionalCustomer
}

func (o *LegalNaturalPersonUpdate) GetLargeTrader() *LargeTraderUpdate {
	if o == nil {
		return nil
	}
	return o.LargeTrader
}

func (o *LegalNaturalPersonUpdate) GetMaritalStatus() *LegalNaturalPersonUpdateMaritalStatus {
	if o == nil {
		return nil
	}
	return o.MaritalStatus
}

func (o *LegalNaturalPersonUpdate) GetMiddleNames() *string {
	if o == nil {
		return nil
	}
	return o.MiddleNames
}

func (o *LegalNaturalPersonUpdate) GetNameSuffix() *LegalNaturalPersonUpdateNameSuffix {
	if o == nil {
		return nil
	}
	return o.NameSuffix
}

func (o *LegalNaturalPersonUpdate) GetNaturalPersonFdd() *NaturalPersonFddUpdate {
	if o == nil {
		return nil
	}
	return o.NaturalPersonFdd
}

func (o *LegalNaturalPersonUpdate) GetNonCitizenResidency() *NonCitizenResidencyUpdate {
	if o == nil {
		return nil
	}
	return o.NonCitizenResidency
}

func (o *LegalNaturalPersonUpdate) GetPersonalAddress() *PostalAddressUpdate {
	if o == nil {
		return nil
	}
	return o.PersonalAddress
}

func (o *LegalNaturalPersonUpdate) GetPoliticallyExposedImmediateFamilyNames() []string {
	if o == nil {
		return nil
	}
	return o.PoliticallyExposedImmediateFamilyNames
}

func (o *LegalNaturalPersonUpdate) GetPoliticallyExposedOrganization() *string {
	if o == nil {
		return nil
	}
	return o.PoliticallyExposedOrganization
}

func (o *LegalNaturalPersonUpdate) GetSubjectToBackupWithholding() *bool {
	if o == nil {
		return nil
	}
	return o.SubjectToBackupWithholding
}

func (o *LegalNaturalPersonUpdate) GetTaxID() *string {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *LegalNaturalPersonUpdate) GetTaxIDType() *LegalNaturalPersonUpdateTaxIDType {
	if o == nil {
		return nil
	}
	return o.TaxIDType
}

func (o *LegalNaturalPersonUpdate) GetTaxProfile() *TaxProfileUpdate {
	if o == nil {
		return nil
	}
	return o.TaxProfile
}
