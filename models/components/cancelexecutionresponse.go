// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// CancelExecutionResponseAccruedInterestAmount - The amount of interest that has been accrued in the issuing currency for a single instrument. Requirement of 15 or less integral number and 2 or less fractional precision. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
type CancelExecutionResponseAccruedInterestAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelExecutionResponseAccruedInterestAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelExecutionResponseCommissionAmount - Commission amount of the execution. Requirement of 11 or less integral number and 2 or less fractional precision.
type CancelExecutionResponseCommissionAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelExecutionResponseCommissionAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelExecutionResponseGrossAmount - Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Requirement of 11 or less integral number and 2 or less fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
type CancelExecutionResponseGrossAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelExecutionResponseGrossAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelExecutionResponsePrevailingMarketPrice - The price for the instrument that is prevailing in the market. Requirement of 8 or less integral number and 8 or less fractional precision. Required for FIXED_INCOME trades when the broker_capacity is PRINCIPAL.
type CancelExecutionResponsePrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelExecutionResponsePrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelExecutionResponsePrice - Price with requirement of 8 or less integral number and 8 or less fractional precision.
type CancelExecutionResponsePrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelExecutionResponsePrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelExecutionResponsePriceAdjustmentAmount - Total monetary value of the price_adjustment
type CancelExecutionResponsePriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelExecutionResponsePriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelExecutionResponsePriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security.
type CancelExecutionResponsePriceAdjustmentType string

const (
	CancelExecutionResponsePriceAdjustmentTypePriceAdjustmentTypeUnspecified CancelExecutionResponsePriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	CancelExecutionResponsePriceAdjustmentTypeMarkup                         CancelExecutionResponsePriceAdjustmentType = "MARKUP"
	CancelExecutionResponsePriceAdjustmentTypeMarkdown                       CancelExecutionResponsePriceAdjustmentType = "MARKDOWN"
	CancelExecutionResponsePriceAdjustmentTypeGrossCredit                    CancelExecutionResponsePriceAdjustmentType = "GROSS_CREDIT"
)

func (e CancelExecutionResponsePriceAdjustmentType) ToPointer() *CancelExecutionResponsePriceAdjustmentType {
	return &e
}

// CancelExecutionResponsePriceAdjustment - Price adjustment that will be applied to the net price of the security.
type CancelExecutionResponsePriceAdjustment struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *CancelExecutionResponsePriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security.
	PriceAdjustmentType *CancelExecutionResponsePriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *CancelExecutionResponsePriceAdjustment) GetPriceAdjustmentAmount() *CancelExecutionResponsePriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *CancelExecutionResponsePriceAdjustment) GetPriceAdjustmentType() *CancelExecutionResponsePriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// CancelExecutionResponseQuantity - Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
type CancelExecutionResponseQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelExecutionResponseQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelExecutionResponseState - The state that the trade is in.
type CancelExecutionResponseState string

const (
	CancelExecutionResponseStateStateUnspecified CancelExecutionResponseState = "STATE_UNSPECIFIED"
	CancelExecutionResponseStateCreating         CancelExecutionResponseState = "CREATING"
	CancelExecutionResponseStateRebooking        CancelExecutionResponseState = "REBOOKING"
	CancelExecutionResponseStateCanceling        CancelExecutionResponseState = "CANCELING"
	CancelExecutionResponseStateBooked           CancelExecutionResponseState = "BOOKED"
	CancelExecutionResponseStateRebooked         CancelExecutionResponseState = "REBOOKED"
	CancelExecutionResponseStateCanceled         CancelExecutionResponseState = "CANCELED"
	CancelExecutionResponseStateFailed           CancelExecutionResponseState = "FAILED"
)

func (e CancelExecutionResponseState) ToPointer() *CancelExecutionResponseState {
	return &e
}

// CancelExecutionResponseExecution - The execution that was canceled.
type CancelExecutionResponseExecution struct {
	// The amount of interest that has been accrued in the issuing currency for a single instrument. Requirement of 15 or less integral number and 2 or less fractional precision. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	AccruedInterestAmount *CancelExecutionResponseAccruedInterestAmount `json:"accrued_interest_amount,omitempty"`
	// The id of the activity in the Ledger that represents this trade.
	ActivityID *string `json:"activity_id,omitempty"`
	// The yield associated with an individual fill of a fixed income trade. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	BondYield []BondYield `json:"bond_yield,omitempty"`
	// Commission amount of the execution. Requirement of 11 or less integral number and 2 or less fractional precision.
	CommissionAmount *CancelExecutionResponseCommissionAmount `json:"commission_amount,omitempty"`
	// A ULID that uniquely identifies the execution.
	ExecutionID *string `json:"execution_id,omitempty"`
	// Timestamp of when the execution took place. If settlement_date is not provided, this field will be converted into Eastern Time and used to calculate settlement_date.
	ExecutionTime *time.Time `json:"execution_time,omitempty"`
	// Used to generate execution_id, should be unique on the day for each source_application caller.
	ExternalID *string `json:"external_id,omitempty"`
	// Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Requirement of 11 or less integral number and 2 or less fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
	GrossAmount *CancelExecutionResponseGrossAmount `json:"gross_amount,omitempty"`
	// Caller provided but can be used for booking-service to note original trade details when booking into the error account or using the error asset.
	Memo *string `json:"memo,omitempty"`
	// The resource name of the execution.
	Name *string `json:"name,omitempty"`
	// The price for the instrument that is prevailing in the market. Requirement of 8 or less integral number and 8 or less fractional precision. Required for FIXED_INCOME trades when the broker_capacity is PRINCIPAL.
	PrevailingMarketPrice *CancelExecutionResponsePrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Price with requirement of 8 or less integral number and 8 or less fractional precision.
	Price *CancelExecutionResponsePrice `json:"price,omitempty"`
	// Price adjustment that will be applied to the net price of the security.
	PriceAdjustment *CancelExecutionResponsePriceAdjustment `json:"price_adjustment,omitempty"`
	// Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
	Quantity *CancelExecutionResponseQuantity `json:"quantity,omitempty"`
	// The state that the trade is in.
	State *CancelExecutionResponseState `json:"state,omitempty"`
	// Street-level execution id, unique by day per execution venue.
	StreetExecutionID *string `json:"street_execution_id,omitempty"`
	// The unique identifier of the trade this execution belongs to.
	TradeID *string `json:"trade_id,omitempty"`
}

func (c CancelExecutionResponseExecution) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CancelExecutionResponseExecution) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CancelExecutionResponseExecution) GetAccruedInterestAmount() *CancelExecutionResponseAccruedInterestAmount {
	if o == nil {
		return nil
	}
	return o.AccruedInterestAmount
}

func (o *CancelExecutionResponseExecution) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *CancelExecutionResponseExecution) GetBondYield() []BondYield {
	if o == nil {
		return nil
	}
	return o.BondYield
}

func (o *CancelExecutionResponseExecution) GetCommissionAmount() *CancelExecutionResponseCommissionAmount {
	if o == nil {
		return nil
	}
	return o.CommissionAmount
}

func (o *CancelExecutionResponseExecution) GetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionID
}

func (o *CancelExecutionResponseExecution) GetExecutionTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExecutionTime
}

func (o *CancelExecutionResponseExecution) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *CancelExecutionResponseExecution) GetGrossAmount() *CancelExecutionResponseGrossAmount {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *CancelExecutionResponseExecution) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *CancelExecutionResponseExecution) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CancelExecutionResponseExecution) GetPrevailingMarketPrice() *CancelExecutionResponsePrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *CancelExecutionResponseExecution) GetPrice() *CancelExecutionResponsePrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *CancelExecutionResponseExecution) GetPriceAdjustment() *CancelExecutionResponsePriceAdjustment {
	if o == nil {
		return nil
	}
	return o.PriceAdjustment
}

func (o *CancelExecutionResponseExecution) GetQuantity() *CancelExecutionResponseQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *CancelExecutionResponseExecution) GetState() *CancelExecutionResponseState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *CancelExecutionResponseExecution) GetStreetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.StreetExecutionID
}

func (o *CancelExecutionResponseExecution) GetTradeID() *string {
	if o == nil {
		return nil
	}
	return o.TradeID
}

// CancelExecutionResponse - A response for the cancel execution method.
type CancelExecutionResponse struct {
	// The execution that was canceled.
	Execution *CancelExecutionResponseExecution `json:"execution,omitempty"`
}

func (o *CancelExecutionResponse) GetExecution() *CancelExecutionResponseExecution {
	if o == nil {
		return nil
	}
	return o.Execution
}
