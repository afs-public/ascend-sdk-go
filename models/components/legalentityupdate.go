// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type LegalEntityUpdateBusinessIndustrialClassification string

const (
	LegalEntityUpdateBusinessIndustrialClassificationBusinessIndustrialClassificationUnspecified                LegalEntityUpdateBusinessIndustrialClassification = "BUSINESS_INDUSTRIAL_CLASSIFICATION_UNSPECIFIED"
	LegalEntityUpdateBusinessIndustrialClassificationAgricultureForestryAndFishing                              LegalEntityUpdateBusinessIndustrialClassification = "AGRICULTURE_FORESTRY_AND_FISHING"
	LegalEntityUpdateBusinessIndustrialClassificationMining                                                     LegalEntityUpdateBusinessIndustrialClassification = "MINING"
	LegalEntityUpdateBusinessIndustrialClassificationConstruction                                               LegalEntityUpdateBusinessIndustrialClassification = "CONSTRUCTION"
	LegalEntityUpdateBusinessIndustrialClassificationManufacturing                                              LegalEntityUpdateBusinessIndustrialClassification = "MANUFACTURING"
	LegalEntityUpdateBusinessIndustrialClassificationTransportationCommunicationsElectricGasAndSanitaryServices LegalEntityUpdateBusinessIndustrialClassification = "TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_AND_SANITARY_SERVICES"
	LegalEntityUpdateBusinessIndustrialClassificationWholesaleTrade                                             LegalEntityUpdateBusinessIndustrialClassification = "WHOLESALE_TRADE"
	LegalEntityUpdateBusinessIndustrialClassificationRetailTrade                                                LegalEntityUpdateBusinessIndustrialClassification = "RETAIL_TRADE"
	LegalEntityUpdateBusinessIndustrialClassificationFinanceInsuranceAndRealEstate                              LegalEntityUpdateBusinessIndustrialClassification = "FINANCE_INSURANCE_AND_REAL_ESTATE"
	LegalEntityUpdateBusinessIndustrialClassificationServices                                                   LegalEntityUpdateBusinessIndustrialClassification = "SERVICES"
	LegalEntityUpdateBusinessIndustrialClassificationPublicAdministration                                       LegalEntityUpdateBusinessIndustrialClassification = "PUBLIC_ADMINISTRATION"
)

func (e LegalEntityUpdateBusinessIndustrialClassification) ToPointer() *LegalEntityUpdateBusinessIndustrialClassification {
	return &e
}
func (e *LegalEntityUpdateBusinessIndustrialClassification) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUSINESS_INDUSTRIAL_CLASSIFICATION_UNSPECIFIED":
		fallthrough
	case "AGRICULTURE_FORESTRY_AND_FISHING":
		fallthrough
	case "MINING":
		fallthrough
	case "CONSTRUCTION":
		fallthrough
	case "MANUFACTURING":
		fallthrough
	case "TRANSPORTATION_COMMUNICATIONS_ELECTRIC_GAS_AND_SANITARY_SERVICES":
		fallthrough
	case "WHOLESALE_TRADE":
		fallthrough
	case "RETAIL_TRADE":
		fallthrough
	case "FINANCE_INSURANCE_AND_REAL_ESTATE":
		fallthrough
	case "SERVICES":
		fallthrough
	case "PUBLIC_ADMINISTRATION":
		*e = LegalEntityUpdateBusinessIndustrialClassification(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalEntityUpdateBusinessIndustrialClassification: %v", v)
	}
}

// LegalEntityUpdateCorporateStructure - Corporate structure of the entity.
type LegalEntityUpdateCorporateStructure string

const (
	LegalEntityUpdateCorporateStructureEntityCorporateStructureUnspecified LegalEntityUpdateCorporateStructure = "ENTITY_CORPORATE_STRUCTURE_UNSPECIFIED"
	LegalEntityUpdateCorporateStructureCorporationCCorp                    LegalEntityUpdateCorporateStructure = "CORPORATION_C_CORP"
	LegalEntityUpdateCorporateStructureCorporationSCorp                    LegalEntityUpdateCorporateStructure = "CORPORATION_S_CORP"
	LegalEntityUpdateCorporateStructureCorporationBCorp                    LegalEntityUpdateCorporateStructure = "CORPORATION_B_CORP"
	LegalEntityUpdateCorporateStructureCorporationNonprofit                LegalEntityUpdateCorporateStructure = "CORPORATION_NONPROFIT"
)

func (e LegalEntityUpdateCorporateStructure) ToPointer() *LegalEntityUpdateCorporateStructure {
	return &e
}
func (e *LegalEntityUpdateCorporateStructure) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENTITY_CORPORATE_STRUCTURE_UNSPECIFIED":
		fallthrough
	case "CORPORATION_C_CORP":
		fallthrough
	case "CORPORATION_S_CORP":
		fallthrough
	case "CORPORATION_B_CORP":
		fallthrough
	case "CORPORATION_NONPROFIT":
		*e = LegalEntityUpdateCorporateStructure(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalEntityUpdateCorporateStructure: %v", v)
	}
}

// LegalEntityUpdateEntityType - The entity type.
type LegalEntityUpdateEntityType string

const (
	LegalEntityUpdateEntityTypeEntityTypeUnspecified               LegalEntityUpdateEntityType = "ENTITY_TYPE_UNSPECIFIED"
	LegalEntityUpdateEntityTypeCorporation                         LegalEntityUpdateEntityType = "CORPORATION"
	LegalEntityUpdateEntityTypeLimitedLiabilityCompany             LegalEntityUpdateEntityType = "LIMITED_LIABILITY_COMPANY"
	LegalEntityUpdateEntityTypePartnership                         LegalEntityUpdateEntityType = "PARTNERSHIP"
	LegalEntityUpdateEntityTypeSoleProprietorshipOrSingleMemberLlc LegalEntityUpdateEntityType = "SOLE_PROPRIETORSHIP_OR_SINGLE_MEMBER_LLC"
	LegalEntityUpdateEntityTypeTrust                               LegalEntityUpdateEntityType = "TRUST"
	LegalEntityUpdateEntityTypeEstate                              LegalEntityUpdateEntityType = "ESTATE"
)

func (e LegalEntityUpdateEntityType) ToPointer() *LegalEntityUpdateEntityType {
	return &e
}
func (e *LegalEntityUpdateEntityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENTITY_TYPE_UNSPECIFIED":
		fallthrough
	case "CORPORATION":
		fallthrough
	case "LIMITED_LIABILITY_COMPANY":
		fallthrough
	case "PARTNERSHIP":
		fallthrough
	case "SOLE_PROPRIETORSHIP_OR_SINGLE_MEMBER_LLC":
		fallthrough
	case "TRUST":
		fallthrough
	case "ESTATE":
		*e = LegalEntityUpdateEntityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalEntityUpdateEntityType: %v", v)
	}
}

// LegalEntityUpdateExemptCustomerReason - The reason the customer is exempt from verifying beneficial owners, if applicable.
type LegalEntityUpdateExemptCustomerReason string

const (
	LegalEntityUpdateExemptCustomerReasonExemptReasonUnspecified                        LegalEntityUpdateExemptCustomerReason = "EXEMPT_REASON_UNSPECIFIED"
	LegalEntityUpdateExemptCustomerReasonRegulatedFinancialInstitution                  LegalEntityUpdateExemptCustomerReason = "REGULATED_FINANCIAL_INSTITUTION"
	LegalEntityUpdateExemptCustomerReasonDepartmentOrAgencyOfFederalStateOrSubdivision  LegalEntityUpdateExemptCustomerReason = "DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION"
	LegalEntityUpdateExemptCustomerReasonNonBankListedEntity                            LegalEntityUpdateExemptCustomerReason = "NON_BANK_LISTED_ENTITY"
	LegalEntityUpdateExemptCustomerReasonSection12SecuritiesExchangeAct1934Or15D        LegalEntityUpdateExemptCustomerReason = "SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15D"
	LegalEntityUpdateExemptCustomerReasonSection3InvestmentCompanyAct1940               LegalEntityUpdateExemptCustomerReason = "SECTION_3_INVESTMENT_COMPANY_ACT_1940"
	LegalEntityUpdateExemptCustomerReasonSection202AInvestmentAdvisorsAct1940           LegalEntityUpdateExemptCustomerReason = "SECTION_202A_INVESTMENT_ADVISORS_ACT_1940"
	LegalEntityUpdateExemptCustomerReasonSection3SecuritiesExchangeAct1934Section6Or17A LegalEntityUpdateExemptCustomerReason = "SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17A"
	LegalEntityUpdateExemptCustomerReasonAnyOtherSecuritiesExchangeAct1934              LegalEntityUpdateExemptCustomerReason = "ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934"
	LegalEntityUpdateExemptCustomerReasonCommodityFuturesTradingCommissionRegistered    LegalEntityUpdateExemptCustomerReason = "COMMODITY_FUTURES_TRADING_COMMISSION_REGISTERED"
	LegalEntityUpdateExemptCustomerReasonPublicAccountingFirmSection102SarbanesOxley    LegalEntityUpdateExemptCustomerReason = "PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY"
	LegalEntityUpdateExemptCustomerReasonStateRegulatedInsuranceCompany                 LegalEntityUpdateExemptCustomerReason = "STATE_REGULATED_INSURANCE_COMPANY"
)

func (e LegalEntityUpdateExemptCustomerReason) ToPointer() *LegalEntityUpdateExemptCustomerReason {
	return &e
}
func (e *LegalEntityUpdateExemptCustomerReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXEMPT_REASON_UNSPECIFIED":
		fallthrough
	case "REGULATED_FINANCIAL_INSTITUTION":
		fallthrough
	case "DEPARTMENT_OR_AGENCY_OF_FEDERAL_STATE_OR_SUBDIVISION":
		fallthrough
	case "NON_BANK_LISTED_ENTITY":
		fallthrough
	case "SECTION_12_SECURITIES_EXCHANGE_ACT_1934_OR_15D":
		fallthrough
	case "SECTION_3_INVESTMENT_COMPANY_ACT_1940":
		fallthrough
	case "SECTION_202A_INVESTMENT_ADVISORS_ACT_1940":
		fallthrough
	case "SECTION_3_SECURITIES_EXCHANGE_ACT_1934_SECTION_6_OR_17A":
		fallthrough
	case "ANY_OTHER_SECURITIES_EXCHANGE_ACT_1934":
		fallthrough
	case "COMMODITY_FUTURES_TRADING_COMMISSION_REGISTERED":
		fallthrough
	case "PUBLIC_ACCOUNTING_FIRM_SECTION_102_SARBANES_OXLEY":
		fallthrough
	case "STATE_REGULATED_INSURANCE_COMPANY":
		*e = LegalEntityUpdateExemptCustomerReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalEntityUpdateExemptCustomerReason: %v", v)
	}
}

// LegalEntityUpdateTaxIDType - The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
type LegalEntityUpdateTaxIDType string

const (
	LegalEntityUpdateTaxIDTypeTaxIDTypeUnspecified LegalEntityUpdateTaxIDType = "TAX_ID_TYPE_UNSPECIFIED"
	LegalEntityUpdateTaxIDTypeTaxIDTypeSsn         LegalEntityUpdateTaxIDType = "TAX_ID_TYPE_SSN"
	LegalEntityUpdateTaxIDTypeTaxIDTypeItin        LegalEntityUpdateTaxIDType = "TAX_ID_TYPE_ITIN"
	LegalEntityUpdateTaxIDTypeTaxIDTypeEin         LegalEntityUpdateTaxIDType = "TAX_ID_TYPE_EIN"
)

func (e LegalEntityUpdateTaxIDType) ToPointer() *LegalEntityUpdateTaxIDType {
	return &e
}
func (e *LegalEntityUpdateTaxIDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TAX_ID_TYPE_UNSPECIFIED":
		fallthrough
	case "TAX_ID_TYPE_SSN":
		fallthrough
	case "TAX_ID_TYPE_ITIN":
		fallthrough
	case "TAX_ID_TYPE_EIN":
		*e = LegalEntityUpdateTaxIDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalEntityUpdateTaxIDType: %v", v)
	}
}

// LegalEntityUpdate - A legal entity. Legal entities are organizations, such as companies, that participate in financial transactions
type LegalEntityUpdate struct {
	// Indicates whether the entity is an accredited investor. By default, this is set to `false`.
	AccreditedInvestor *bool `json:"accredited_investor,omitempty"`
	// Indicates whether the entity is an adviser. By default, this is set to `false`.
	Adviser *bool `json:"adviser,omitempty"`
	// Indicates whether the entity is a broker dealer. By default, this is set to `false`.
	BrokerDealer                     *bool                                              `json:"broker_dealer,omitempty"`
	BusinessIndustrialClassification *LegalEntityUpdateBusinessIndustrialClassification `json:"business_industrial_classification,omitempty"`
	// Corporate structure of the entity.
	CorporateStructure *LegalEntityUpdateCorporateStructure `json:"corporate_structure,omitempty"`
	// The correspondent id associated with the legal entity.
	CorrespondentID *string `json:"correspondent_id,omitempty"`
	// DBA (Doing Business As) names. Can list up to 5 associated with the Legal Entity
	DoingBusinessAs []string `json:"doing_business_as,omitempty"`
	// Due Diligence for Legal Entities required when a Legal Entity is the Primary Owner on an Account.
	EntityDueDiligence *EntityDueDiligenceUpdate `json:"entity_due_diligence,omitempty"`
	// The legal entity name.
	EntityName *string `json:"entity_name,omitempty"`
	// The entity type.
	EntityType *LegalEntityUpdateEntityType `json:"entity_type,omitempty"`
	// The reason the customer is exempt from verifying beneficial owners, if applicable.
	ExemptCustomerReason *LegalEntityUpdateExemptCustomerReason `json:"exempt_customer_reason,omitempty"`
	// Indicates whether the entity is exempt from verifying beneficial owners. By default, this is set to `false`.
	ExemptVerifyingBeneficialOwners *bool `json:"exempt_verifying_beneficial_owners,omitempty"`
	// If the legal entity is a trust, they may set this field to convey ownership and value to a trustee.
	ForTheBenefitOf *string `json:"for_the_benefit_of,omitempty"`
	// Indicates whether the entity is a foreign financial institution. By default, this is set to `false`.
	ForeignFinancialInstitution *bool `json:"foreign_financial_institution,omitempty"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	FormationDate *DateUpdate `json:"formation_date,omitempty"`
	// Indicates whether the entity is an institutional customer
	InstitutionalCustomer *bool `json:"institutional_customer,omitempty"`
	// A large trader.
	LargeTrader *LargeTraderUpdate `json:"large_trader,omitempty"`
	// Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains).
	//
	//  In typical usage an address would be created via user input or from importing existing data, depending on the type of process.
	//
	//  Advice on address input / editing: - Use an i18n-ready address widget such as  https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of  fields outside countries where that field is used.
	//
	//  For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
	LegalAddress *PostalAddressUpdate `json:"legal_address,omitempty"`
	// The Legal Entity Identifier (LEI) is the financial industry term for a unique global identifier for legal entities participating in financial transactions
	LeiCode *string `json:"lei_code,omitempty"`
	// The operational footprint of an entity. Operating regions encompass all countries and regions where a company has a significant business presence This includes locations with physical offices, manufacturing plants, service centers, and sales and marketing activities Regions must be provided as two-character CLDR country codes
	OperatingRegions []string `json:"operating_regions,omitempty"`
	// The legal home of an entity. A region of registration, in the context of a corporation, refers to the specific geographic area where the corporation is legally registered and incorporated Defines the legal jurisdiction and framework under which the corporation operates, including legal regulations, tax obligations, and compliance requirements Region must be provided as a two-character CLDR country code
	RegistrationRegion *string `json:"registration_region,omitempty"`
	// Indicates whether the entity is a regulated investment company. By default, this is set to `false`.
	RegulatedInvestmentCompany *bool `json:"regulated_investment_company,omitempty"`
	// Document ids related to the legal entity. At least one is required for RIA correspondents when creating Estate or Trust accounts.
	RelatedDocumentIds []string `json:"related_document_ids,omitempty"`
	// Indicates whether the trust is a revocable trust. By default, this is set to `false`.
	RevocableTrust *bool `json:"revocable_trust,omitempty"`
	// Boolean indicator whether the LE is subject to backup withholding
	SubjectToBackupWithholding *bool `json:"subject_to_backup_withholding,omitempty"`
	// The full U.S. tax ID for a related entity; Must be provided with `EIN` tax ID type
	TaxID *string `json:"tax_id,omitempty"`
	// The nature of the U.S. Tax ID indicated in the related tax_id field; Examples include ITIN, SSN, EIN.
	TaxIDType *LegalEntityUpdateTaxIDType `json:"tax_id_type,omitempty"`
	// Tax Profile pertaining to the Legal Entity or Natural Person.
	TaxProfile *TaxProfileUpdate `json:"tax_profile,omitempty"`
}

func (o *LegalEntityUpdate) GetAccreditedInvestor() *bool {
	if o == nil {
		return nil
	}
	return o.AccreditedInvestor
}

func (o *LegalEntityUpdate) GetAdviser() *bool {
	if o == nil {
		return nil
	}
	return o.Adviser
}

func (o *LegalEntityUpdate) GetBrokerDealer() *bool {
	if o == nil {
		return nil
	}
	return o.BrokerDealer
}

func (o *LegalEntityUpdate) GetBusinessIndustrialClassification() *LegalEntityUpdateBusinessIndustrialClassification {
	if o == nil {
		return nil
	}
	return o.BusinessIndustrialClassification
}

func (o *LegalEntityUpdate) GetCorporateStructure() *LegalEntityUpdateCorporateStructure {
	if o == nil {
		return nil
	}
	return o.CorporateStructure
}

func (o *LegalEntityUpdate) GetCorrespondentID() *string {
	if o == nil {
		return nil
	}
	return o.CorrespondentID
}

func (o *LegalEntityUpdate) GetDoingBusinessAs() []string {
	if o == nil {
		return nil
	}
	return o.DoingBusinessAs
}

func (o *LegalEntityUpdate) GetEntityDueDiligence() *EntityDueDiligenceUpdate {
	if o == nil {
		return nil
	}
	return o.EntityDueDiligence
}

func (o *LegalEntityUpdate) GetEntityName() *string {
	if o == nil {
		return nil
	}
	return o.EntityName
}

func (o *LegalEntityUpdate) GetEntityType() *LegalEntityUpdateEntityType {
	if o == nil {
		return nil
	}
	return o.EntityType
}

func (o *LegalEntityUpdate) GetExemptCustomerReason() *LegalEntityUpdateExemptCustomerReason {
	if o == nil {
		return nil
	}
	return o.ExemptCustomerReason
}

func (o *LegalEntityUpdate) GetExemptVerifyingBeneficialOwners() *bool {
	if o == nil {
		return nil
	}
	return o.ExemptVerifyingBeneficialOwners
}

func (o *LegalEntityUpdate) GetForTheBenefitOf() *string {
	if o == nil {
		return nil
	}
	return o.ForTheBenefitOf
}

func (o *LegalEntityUpdate) GetForeignFinancialInstitution() *bool {
	if o == nil {
		return nil
	}
	return o.ForeignFinancialInstitution
}

func (o *LegalEntityUpdate) GetFormationDate() *DateUpdate {
	if o == nil {
		return nil
	}
	return o.FormationDate
}

func (o *LegalEntityUpdate) GetInstitutionalCustomer() *bool {
	if o == nil {
		return nil
	}
	return o.InstitutionalCustomer
}

func (o *LegalEntityUpdate) GetLargeTrader() *LargeTraderUpdate {
	if o == nil {
		return nil
	}
	return o.LargeTrader
}

func (o *LegalEntityUpdate) GetLegalAddress() *PostalAddressUpdate {
	if o == nil {
		return nil
	}
	return o.LegalAddress
}

func (o *LegalEntityUpdate) GetLeiCode() *string {
	if o == nil {
		return nil
	}
	return o.LeiCode
}

func (o *LegalEntityUpdate) GetOperatingRegions() []string {
	if o == nil {
		return nil
	}
	return o.OperatingRegions
}

func (o *LegalEntityUpdate) GetRegistrationRegion() *string {
	if o == nil {
		return nil
	}
	return o.RegistrationRegion
}

func (o *LegalEntityUpdate) GetRegulatedInvestmentCompany() *bool {
	if o == nil {
		return nil
	}
	return o.RegulatedInvestmentCompany
}

func (o *LegalEntityUpdate) GetRelatedDocumentIds() []string {
	if o == nil {
		return nil
	}
	return o.RelatedDocumentIds
}

func (o *LegalEntityUpdate) GetRevocableTrust() *bool {
	if o == nil {
		return nil
	}
	return o.RevocableTrust
}

func (o *LegalEntityUpdate) GetSubjectToBackupWithholding() *bool {
	if o == nil {
		return nil
	}
	return o.SubjectToBackupWithholding
}

func (o *LegalEntityUpdate) GetTaxID() *string {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *LegalEntityUpdate) GetTaxIDType() *LegalEntityUpdateTaxIDType {
	if o == nil {
		return nil
	}
	return o.TaxIDType
}

func (o *LegalEntityUpdate) GetTaxProfile() *TaxProfileUpdate {
	if o == nil {
		return nil
	}
	return o.TaxProfile
}
