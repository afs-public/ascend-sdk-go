// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// IctDepositAmount - The amount of the transfer being deposited into the customer's account in USD
type IctDepositAmount struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *IctDepositAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// IctDepositProgram - The name of the program the ICT deposit is associated with
type IctDepositProgram string

const (
	IctDepositProgramIctProgramUnspecified IctDepositProgram = "ICT_PROGRAM_UNSPECIFIED"
	IctDepositProgramBrokerPartner         IctDepositProgram = "BROKER_PARTNER"
	IctDepositProgramDepositOnly           IctDepositProgram = "DEPOSIT_ONLY"
	IctDepositProgramBankingPartner        IctDepositProgram = "BANKING_PARTNER"
	IctDepositProgramMoneyTransmitter      IctDepositProgram = "MONEY_TRANSMITTER"
	IctDepositProgramWithdrawalOnly        IctDepositProgram = "WITHDRAWAL_ONLY"
	IctDepositProgramDigitalPartner        IctDepositProgram = "DIGITAL_PARTNER"
)

func (e IctDepositProgram) ToPointer() *IctDepositProgram {
	return &e
}

// IctDepositType - The type of retirement contribution.
type IctDepositType string

const (
	IctDepositTypeTypeUnspecified    IctDepositType = "TYPE_UNSPECIFIED"
	IctDepositTypeRegular            IctDepositType = "REGULAR"
	IctDepositTypeEmployee           IctDepositType = "EMPLOYEE"
	IctDepositTypeEmployer           IctDepositType = "EMPLOYER"
	IctDepositTypeRecharacterization IctDepositType = "RECHARACTERIZATION"
	IctDepositTypeRollover60Day      IctDepositType = "ROLLOVER_60_DAY"
	IctDepositTypeRolloverDirect     IctDepositType = "ROLLOVER_DIRECT"
	IctDepositTypeTransfer           IctDepositType = "TRANSFER"
	IctDepositTypeTrusteeFee         IctDepositType = "TRUSTEE_FEE"
	IctDepositTypeConversion         IctDepositType = "CONVERSION"
	IctDepositTypeRepayment          IctDepositType = "REPAYMENT"
)

func (e IctDepositType) ToPointer() *IctDepositType {
	return &e
}

// IctDepositRetirementContribution - Retirement contribution details for deposit to retirement account
type IctDepositRetirementContribution struct {
	// Tax year for which the contribution is applied. Current year is always valid; prior year is only valid before tax deadline. Must be in "YYYY" format.
	TaxYear *int `json:"tax_year,omitempty"`
	// The type of retirement contribution.
	Type *IctDepositType `json:"type,omitempty"`
}

func (o *IctDepositRetirementContribution) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *IctDepositRetirementContribution) GetType() *IctDepositType {
	if o == nil {
		return nil
	}
	return o.Type
}

// IctDepositState - The high level state of a transfer, one of:
// - `PROCESSING` - The transfer is being processed and will be posted if successful.
// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
// - `COMPLETED` - The transfer has been batched and completed.
// - `REJECTED` - The transfer was rejected.
// - `CANCELED` - The transfer was canceled.
// - `RETURNED` - The transfer was returned.
// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
type IctDepositState string

const (
	IctDepositStateStateUnspecified IctDepositState = "STATE_UNSPECIFIED"
	IctDepositStateProcessing       IctDepositState = "PROCESSING"
	IctDepositStatePendingReview    IctDepositState = "PENDING_REVIEW"
	IctDepositStatePosted           IctDepositState = "POSTED"
	IctDepositStateCompleted        IctDepositState = "COMPLETED"
	IctDepositStateRejected         IctDepositState = "REJECTED"
	IctDepositStateCanceled         IctDepositState = "CANCELED"
	IctDepositStateReturned         IctDepositState = "RETURNED"
	IctDepositStatePostponed        IctDepositState = "POSTPONED"
)

func (e IctDepositState) ToPointer() *IctDepositState {
	return &e
}

// TransferState - The state of the ICT deposit
type TransferState struct {
	// The user or service that triggered the state update.
	Actor *string `json:"actor,omitempty"`
	// Additional description of the transfer state.
	Message *string `json:"message,omitempty"`
	// Additional metadata relating to the transfer state. Included data depends on the state, e.g.:
	//  - Rejection reasons are included when the `state` is `REJECTED`
	//  - Reason and comment are included when `state` is `CANCELED`
	Metadata map[string]any `json:"metadata,omitempty"`
	// The high level state of a transfer, one of:
	// - `PROCESSING` - The transfer is being processed and will be posted if successful.
	// - `PENDING_REVIEW` - The transfer is pending review and will continue processing if approved.
	// - `POSTED` - The transfer has been posted to the ledger and will be completed at the end of the processing window if not canceled first.
	// - `COMPLETED` - The transfer has been batched and completed.
	// - `REJECTED` - The transfer was rejected.
	// - `CANCELED` - The transfer was canceled.
	// - `RETURNED` - The transfer was returned.
	// - `POSTPONED` - The transfer is postponed and will resume processing during the next processing window.
	State *IctDepositState `json:"state,omitempty"`
	// The time of the state update.
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

func (t TransferState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransferState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransferState) GetActor() *string {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *TransferState) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *TransferState) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *TransferState) GetState() *IctDepositState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *TransferState) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

// IctDepositTravelRuleEntityOriginatingPartyAddress - The address of the entity
type IctDepositTravelRuleEntityOriginatingPartyAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *IctDepositTravelRuleEntityOriginatingPartyAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *IctDepositTravelRuleEntityOriginatingPartyAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *IctDepositTravelRuleEntityOriginatingPartyAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *IctDepositTravelRuleEntityOriginatingPartyAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *IctDepositTravelRuleEntityOriginatingPartyAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *IctDepositTravelRuleEntityOriginatingPartyAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *IctDepositTravelRuleEntityOriginatingPartyAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *IctDepositTravelRuleEntityOriginatingPartyAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *IctDepositTravelRuleEntityOriginatingPartyAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *IctDepositTravelRuleEntityOriginatingPartyAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *IctDepositTravelRuleEntityOriginatingPartyAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// EntityOriginatingParty - An entity originating party
type EntityOriginatingParty struct {
	// The address of the entity
	Address *IctDepositTravelRuleEntityOriginatingPartyAddress `json:"address,omitempty"`
	// The tax identification number of the entity
	TaxID *string `json:"tax_id,omitempty"`
	// The name of the entity
	Title *string `json:"title,omitempty"`
}

func (o *EntityOriginatingParty) GetAddress() *IctDepositTravelRuleEntityOriginatingPartyAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *EntityOriginatingParty) GetTaxID() *string {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *EntityOriginatingParty) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

// IctDepositAddress - The address of the entity
type IctDepositAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *IctDepositAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *IctDepositAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *IctDepositAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *IctDepositAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *IctDepositAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *IctDepositAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *IctDepositAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *IctDepositAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *IctDepositAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *IctDepositAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *IctDepositAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// EntityRecipientParty - An entity recipient party
type EntityRecipientParty struct {
	// The address of the entity
	Address *IctDepositAddress `json:"address,omitempty"`
	// The tax identification number of the entity
	TaxID *string `json:"tax_id,omitempty"`
	// The name of the entity
	Title *string `json:"title,omitempty"`
}

func (o *EntityRecipientParty) GetAddress() *IctDepositAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *EntityRecipientParty) GetTaxID() *string {
	if o == nil {
		return nil
	}
	return o.TaxID
}

func (o *EntityRecipientParty) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

// IctDepositTravelRuleAddress - The address of the party
type IctDepositTravelRuleAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *IctDepositTravelRuleAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *IctDepositTravelRuleAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *IctDepositTravelRuleAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *IctDepositTravelRuleAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *IctDepositTravelRuleAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *IctDepositTravelRuleAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *IctDepositTravelRuleAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *IctDepositTravelRuleAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *IctDepositTravelRuleAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *IctDepositTravelRuleAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *IctDepositTravelRuleAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// IndividualOriginatingParty - An individual originating party
type IndividualOriginatingParty struct {
	// The address of the party
	Address *IctDepositTravelRuleAddress `json:"address,omitempty"`
	// The last name of the party
	FamilyName *string `json:"family_name,omitempty"`
	// The first name of the party as well as any non-primary given names (e.g. middle names)
	GivenNames []string `json:"given_names,omitempty"`
}

func (o *IndividualOriginatingParty) GetAddress() *IctDepositTravelRuleAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *IndividualOriginatingParty) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *IndividualOriginatingParty) GetGivenNames() []string {
	if o == nil {
		return nil
	}
	return o.GivenNames
}

// IctDepositTravelRuleIndividualRecipientPartyAddress - The address of the party
type IctDepositTravelRuleIndividualRecipientPartyAddress struct {
	// Unstructured address lines describing the lower levels of an address.
	//
	//  Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language.
	//
	//  The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved.
	//
	//  Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).
	AddressLines []string `json:"address_lines,omitempty"`
	// Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.
	AdministrativeArea *string `json:"administrative_area,omitempty"`
	// Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations.
	//
	//  If this value is not known, it should be omitted (rather than specifying a possibly incorrect default).
	//
	//  Examples: "zh-Hant", "ja", "ja-Latn", "en".
	LanguageCode *string `json:"language_code,omitempty"`
	// Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.
	Locality *string `json:"locality,omitempty"`
	// Optional. The name of the organization at the address.
	Organization *string `json:"organization,omitempty"`
	// Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).
	PostalCode *string `json:"postal_code,omitempty"`
	// Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information.
	Recipients []string `json:"recipients,omitempty"`
	// Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See http://cldr.unicode.org/ and http://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland.
	RegionCode *string `json:"region_code,omitempty"`
	// The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision.
	//
	//  All new revisions **must** be backward compatible with old revisions.
	Revision *int `json:"revision,omitempty"`
	// Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (e.g. "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (e.g. CÃ´te d'Ivoire).
	SortingCode *string `json:"sorting_code,omitempty"`
	// Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.
	Sublocality *string `json:"sublocality,omitempty"`
}

func (o *IctDepositTravelRuleIndividualRecipientPartyAddress) GetAddressLines() []string {
	if o == nil {
		return nil
	}
	return o.AddressLines
}

func (o *IctDepositTravelRuleIndividualRecipientPartyAddress) GetAdministrativeArea() *string {
	if o == nil {
		return nil
	}
	return o.AdministrativeArea
}

func (o *IctDepositTravelRuleIndividualRecipientPartyAddress) GetLanguageCode() *string {
	if o == nil {
		return nil
	}
	return o.LanguageCode
}

func (o *IctDepositTravelRuleIndividualRecipientPartyAddress) GetLocality() *string {
	if o == nil {
		return nil
	}
	return o.Locality
}

func (o *IctDepositTravelRuleIndividualRecipientPartyAddress) GetOrganization() *string {
	if o == nil {
		return nil
	}
	return o.Organization
}

func (o *IctDepositTravelRuleIndividualRecipientPartyAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *IctDepositTravelRuleIndividualRecipientPartyAddress) GetRecipients() []string {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *IctDepositTravelRuleIndividualRecipientPartyAddress) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *IctDepositTravelRuleIndividualRecipientPartyAddress) GetRevision() *int {
	if o == nil {
		return nil
	}
	return o.Revision
}

func (o *IctDepositTravelRuleIndividualRecipientPartyAddress) GetSortingCode() *string {
	if o == nil {
		return nil
	}
	return o.SortingCode
}

func (o *IctDepositTravelRuleIndividualRecipientPartyAddress) GetSublocality() *string {
	if o == nil {
		return nil
	}
	return o.Sublocality
}

// IndividualRecipientParty - An individual recipient party
type IndividualRecipientParty struct {
	// The address of the party
	Address *IctDepositTravelRuleIndividualRecipientPartyAddress `json:"address,omitempty"`
	// The last name of the party
	FamilyName *string `json:"family_name,omitempty"`
	// The first name of the party as well as any non-primary given names (e.g. middle names)
	GivenNames []string `json:"given_names,omitempty"`
}

func (o *IndividualRecipientParty) GetAddress() *IctDepositTravelRuleIndividualRecipientPartyAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *IndividualRecipientParty) GetFamilyName() *string {
	if o == nil {
		return nil
	}
	return o.FamilyName
}

func (o *IndividualRecipientParty) GetGivenNames() []string {
	if o == nil {
		return nil
	}
	return o.GivenNames
}

// OriginatingInstitution - The name of the external financial institution and account that is the source of the funds
type OriginatingInstitution struct {
	// Account id at institution
	AccountID *string `json:"account_id,omitempty"`
	// Name of the institution
	Title *string `json:"title,omitempty"`
}

func (o *OriginatingInstitution) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *OriginatingInstitution) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

// RecipientInstitution - The name and account id of institution receiving the funds. Always 'Apex Clearing' and investor account id for ICT deposits;
type RecipientInstitution struct {
	// Account id at institution
	AccountID *string `json:"account_id,omitempty"`
	// Name of the institution
	Title *string `json:"title,omitempty"`
}

func (o *RecipientInstitution) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *RecipientInstitution) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

// TravelRule - The travel rule information for the ICT deposit
type TravelRule struct {
	// An entity originating party
	EntityOriginatingParty *EntityOriginatingParty `json:"entity_originating_party,omitempty"`
	// An entity recipient party
	EntityRecipientParty *EntityRecipientParty `json:"entity_recipient_party,omitempty"`
	// An individual originating party
	IndividualOriginatingParty *IndividualOriginatingParty `json:"individual_originating_party,omitempty"`
	// An individual recipient party
	IndividualRecipientParty *IndividualRecipientParty `json:"individual_recipient_party,omitempty"`
	// The name of the external financial institution and account that is the source of the funds
	OriginatingInstitution *OriginatingInstitution `json:"originating_institution,omitempty"`
	// The name and account id of institution receiving the funds. Always 'Apex Clearing' and investor account id for ICT deposits;
	RecipientInstitution *RecipientInstitution `json:"recipient_institution,omitempty"`
}

func (o *TravelRule) GetEntityOriginatingParty() *EntityOriginatingParty {
	if o == nil {
		return nil
	}
	return o.EntityOriginatingParty
}

func (o *TravelRule) GetEntityRecipientParty() *EntityRecipientParty {
	if o == nil {
		return nil
	}
	return o.EntityRecipientParty
}

func (o *TravelRule) GetIndividualOriginatingParty() *IndividualOriginatingParty {
	if o == nil {
		return nil
	}
	return o.IndividualOriginatingParty
}

func (o *TravelRule) GetIndividualRecipientParty() *IndividualRecipientParty {
	if o == nil {
		return nil
	}
	return o.IndividualRecipientParty
}

func (o *TravelRule) GetOriginatingInstitution() *OriginatingInstitution {
	if o == nil {
		return nil
	}
	return o.OriginatingInstitution
}

func (o *TravelRule) GetRecipientInstitution() *RecipientInstitution {
	if o == nil {
		return nil
	}
	return o.RecipientInstitution
}

// IctDeposit - An Instant Cash Transfer. Funds are moved from a configured Firm account to a customer's brokerage account.
type IctDeposit struct {
	// The amount of the transfer being deposited into the customer's account in USD
	Amount *IctDepositAmount `json:"amount,omitempty"`
	// External identifier supplied by the API caller. Each request must have a unique pairing of client_transfer_id and account.
	ClientTransferID *string `json:"client_transfer_id,omitempty"`
	// Full name of the ICT deposit resource, which contains account id and ICT deposit id
	Name *string `json:"name,omitempty"`
	// The name of the program the ICT deposit is associated with
	Program *IctDepositProgram `json:"program,omitempty"`
	// Retirement contribution details for deposit to retirement account
	RetirementContribution *IctDepositRetirementContribution `json:"retirement_contribution,omitempty"`
	// The state of the ICT deposit
	TransferState *TransferState `json:"transfer_state,omitempty"`
	// The travel rule information for the ICT deposit
	TravelRule *TravelRule `json:"travel_rule,omitempty"`
}

func (o *IctDeposit) GetAmount() *IctDepositAmount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *IctDeposit) GetClientTransferID() *string {
	if o == nil {
		return nil
	}
	return o.ClientTransferID
}

func (o *IctDeposit) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *IctDeposit) GetProgram() *IctDepositProgram {
	if o == nil {
		return nil
	}
	return o.Program
}

func (o *IctDeposit) GetRetirementContribution() *IctDepositRetirementContribution {
	if o == nil {
		return nil
	}
	return o.RetirementContribution
}

func (o *IctDeposit) GetTransferState() *TransferState {
	if o == nil {
		return nil
	}
	return o.TransferState
}

func (o *IctDeposit) GetTravelRule() *TravelRule {
	if o == nil {
		return nil
	}
	return o.TravelRule
}
