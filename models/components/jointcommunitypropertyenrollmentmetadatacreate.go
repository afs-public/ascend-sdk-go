// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan - Option to auto-enroll in Dividend Reinvestment; defaults to true
type JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan string

const (
	JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlanAutoEnrollDividendReinvestmentUnspecified JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan = "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED"
	JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlanDividendReinvestmentEnroll                JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan = "DIVIDEND_REINVESTMENT_ENROLL"
	JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlanDividendReinvestmentDecline               JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan = "DIVIDEND_REINVESTMENT_DECLINE"
)

func (e JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan) ToPointer() *JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan {
	return &e
}
func (e *JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AUTO_ENROLL_DIVIDEND_REINVESTMENT_UNSPECIFIED":
		fallthrough
	case "DIVIDEND_REINVESTMENT_ENROLL":
		fallthrough
	case "DIVIDEND_REINVESTMENT_DECLINE":
		*e = JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan: %v", v)
	}
}

// JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep - Option to auto-enroll in FDIC cash sweep; defaults to true
type JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep string

const (
	JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweepAutoEnrollFdicCashSweepUnspecified JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep = "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED"
	JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweepFdicCashSweepEnroll                JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep = "FDIC_CASH_SWEEP_ENROLL"
	JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweepFdicCashSweepDecline               JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep = "FDIC_CASH_SWEEP_DECLINE"
)

func (e JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep) ToPointer() *JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep {
	return &e
}
func (e *JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AUTO_ENROLL_FDIC_CASH_SWEEP_UNSPECIFIED":
		fallthrough
	case "FDIC_CASH_SWEEP_ENROLL":
		fallthrough
	case "FDIC_CASH_SWEEP_DECLINE":
		*e = JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep: %v", v)
	}
}

// LegalResidencyStateOfMarriedCouple - The legal residency state of a married couple
type LegalResidencyStateOfMarriedCouple string

const (
	LegalResidencyStateOfMarriedCoupleLegalResidencyStateOfMarriedCoupleUnspecified LegalResidencyStateOfMarriedCouple = "LEGAL_RESIDENCY_STATE_OF_MARRIED_COUPLE_UNSPECIFIED"
	LegalResidencyStateOfMarriedCoupleAk                                            LegalResidencyStateOfMarriedCouple = "AK"
	LegalResidencyStateOfMarriedCoupleAz                                            LegalResidencyStateOfMarriedCouple = "AZ"
	LegalResidencyStateOfMarriedCoupleAr                                            LegalResidencyStateOfMarriedCouple = "AR"
	LegalResidencyStateOfMarriedCoupleCa                                            LegalResidencyStateOfMarriedCouple = "CA"
	LegalResidencyStateOfMarriedCoupleDe                                            LegalResidencyStateOfMarriedCouple = "DE"
	LegalResidencyStateOfMarriedCoupleFl                                            LegalResidencyStateOfMarriedCouple = "FL"
	LegalResidencyStateOfMarriedCoupleHi                                            LegalResidencyStateOfMarriedCouple = "HI"
	LegalResidencyStateOfMarriedCoupleID                                            LegalResidencyStateOfMarriedCouple = "ID"
	LegalResidencyStateOfMarriedCoupleIl                                            LegalResidencyStateOfMarriedCouple = "IL"
	LegalResidencyStateOfMarriedCoupleIn                                            LegalResidencyStateOfMarriedCouple = "IN"
	LegalResidencyStateOfMarriedCoupleKy                                            LegalResidencyStateOfMarriedCouple = "KY"
	LegalResidencyStateOfMarriedCoupleLa                                            LegalResidencyStateOfMarriedCouple = "LA"
	LegalResidencyStateOfMarriedCoupleMd                                            LegalResidencyStateOfMarriedCouple = "MD"
	LegalResidencyStateOfMarriedCoupleMa                                            LegalResidencyStateOfMarriedCouple = "MA"
	LegalResidencyStateOfMarriedCoupleMi                                            LegalResidencyStateOfMarriedCouple = "MI"
	LegalResidencyStateOfMarriedCoupleMs                                            LegalResidencyStateOfMarriedCouple = "MS"
	LegalResidencyStateOfMarriedCoupleMo                                            LegalResidencyStateOfMarriedCouple = "MO"
	LegalResidencyStateOfMarriedCoupleNv                                            LegalResidencyStateOfMarriedCouple = "NV"
	LegalResidencyStateOfMarriedCoupleNj                                            LegalResidencyStateOfMarriedCouple = "NJ"
	LegalResidencyStateOfMarriedCoupleNm                                            LegalResidencyStateOfMarriedCouple = "NM"
	LegalResidencyStateOfMarriedCoupleNy                                            LegalResidencyStateOfMarriedCouple = "NY"
	LegalResidencyStateOfMarriedCoupleNc                                            LegalResidencyStateOfMarriedCouple = "NC"
	LegalResidencyStateOfMarriedCoupleOh                                            LegalResidencyStateOfMarriedCouple = "OH"
	LegalResidencyStateOfMarriedCoupleOk                                            LegalResidencyStateOfMarriedCouple = "OK"
	LegalResidencyStateOfMarriedCoupleOr                                            LegalResidencyStateOfMarriedCouple = "OR"
	LegalResidencyStateOfMarriedCouplePa                                            LegalResidencyStateOfMarriedCouple = "PA"
	LegalResidencyStateOfMarriedCoupleRi                                            LegalResidencyStateOfMarriedCouple = "RI"
	LegalResidencyStateOfMarriedCoupleTn                                            LegalResidencyStateOfMarriedCouple = "TN"
	LegalResidencyStateOfMarriedCoupleTx                                            LegalResidencyStateOfMarriedCouple = "TX"
	LegalResidencyStateOfMarriedCoupleVt                                            LegalResidencyStateOfMarriedCouple = "VT"
	LegalResidencyStateOfMarriedCoupleVa                                            LegalResidencyStateOfMarriedCouple = "VA"
	LegalResidencyStateOfMarriedCoupleWa                                            LegalResidencyStateOfMarriedCouple = "WA"
	LegalResidencyStateOfMarriedCoupleWi                                            LegalResidencyStateOfMarriedCouple = "WI"
	LegalResidencyStateOfMarriedCoupleWy                                            LegalResidencyStateOfMarriedCouple = "WY"
)

func (e LegalResidencyStateOfMarriedCouple) ToPointer() *LegalResidencyStateOfMarriedCouple {
	return &e
}
func (e *LegalResidencyStateOfMarriedCouple) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LEGAL_RESIDENCY_STATE_OF_MARRIED_COUPLE_UNSPECIFIED":
		fallthrough
	case "AK":
		fallthrough
	case "AZ":
		fallthrough
	case "AR":
		fallthrough
	case "CA":
		fallthrough
	case "DE":
		fallthrough
	case "FL":
		fallthrough
	case "HI":
		fallthrough
	case "ID":
		fallthrough
	case "IL":
		fallthrough
	case "IN":
		fallthrough
	case "KY":
		fallthrough
	case "LA":
		fallthrough
	case "MD":
		fallthrough
	case "MA":
		fallthrough
	case "MI":
		fallthrough
	case "MS":
		fallthrough
	case "MO":
		fallthrough
	case "NV":
		fallthrough
	case "NJ":
		fallthrough
	case "NM":
		fallthrough
	case "NY":
		fallthrough
	case "NC":
		fallthrough
	case "OH":
		fallthrough
	case "OK":
		fallthrough
	case "OR":
		fallthrough
	case "PA":
		fallthrough
	case "RI":
		fallthrough
	case "TN":
		fallthrough
	case "TX":
		fallthrough
	case "VT":
		fallthrough
	case "VA":
		fallthrough
	case "WA":
		fallthrough
	case "WI":
		fallthrough
	case "WY":
		*e = LegalResidencyStateOfMarriedCouple(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LegalResidencyStateOfMarriedCouple: %v", v)
	}
}

// JointCommunityPropertyEnrollmentMetadataCreate - Enrollment metadata for the Joint Community Property Registration enrollment type
type JointCommunityPropertyEnrollmentMetadataCreate struct {
	// Option to auto-enroll in Dividend Reinvestment; defaults to true
	DividendReinvestmentPlan *JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan `json:"dividend_reinvestment_plan,omitempty"`
	// Option to auto-enroll in FDIC cash sweep; defaults to true
	FdicCashSweep *JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep `json:"fdic_cash_sweep,omitempty"`
	// The legal residency state of a married couple
	LegalResidencyStateOfMarriedCouple LegalResidencyStateOfMarriedCouple `json:"legal_residency_state_of_married_couple"`
}

func (o *JointCommunityPropertyEnrollmentMetadataCreate) GetDividendReinvestmentPlan() *JointCommunityPropertyEnrollmentMetadataCreateDividendReinvestmentPlan {
	if o == nil {
		return nil
	}
	return o.DividendReinvestmentPlan
}

func (o *JointCommunityPropertyEnrollmentMetadataCreate) GetFdicCashSweep() *JointCommunityPropertyEnrollmentMetadataCreateFdicCashSweep {
	if o == nil {
		return nil
	}
	return o.FdicCashSweep
}

func (o *JointCommunityPropertyEnrollmentMetadataCreate) GetLegalResidencyStateOfMarriedCouple() LegalResidencyStateOfMarriedCouple {
	if o == nil {
		return LegalResidencyStateOfMarriedCouple("")
	}
	return o.LegalResidencyStateOfMarriedCouple
}
