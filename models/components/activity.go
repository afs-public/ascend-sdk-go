// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// ActivityAcatsPendingOut - Used to record the movement of funds or shares to/ from the pending_acats memo location
type ActivityAcatsPendingOut struct {
	// Unique Identifier generated by the NSCC ACATS when a transfer is initiated or submitted
	AcatsControlNumber *string `json:"acats_control_number,omitempty"`
	// Free form text field containing additional information about a transaction
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
}

func (o *ActivityAcatsPendingOut) GetAcatsControlNumber() *string {
	if o == nil {
		return nil
	}
	return o.AcatsControlNumber
}

func (o *ActivityAcatsPendingOut) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

// ActivityAccountMemo - Indicates the memo location impacted by an entry
type ActivityAccountMemo string

const (
	ActivityAccountMemoMemoTypeUnspecified ActivityAccountMemo = "MEMO_TYPE_UNSPECIFIED"
	ActivityAccountMemoFullyPaidStockLoan  ActivityAccountMemo = "FULLY_PAID_STOCK_LOAN"
	ActivityAccountMemoFree                ActivityAccountMemo = "FREE"
	ActivityAccountMemoPendingOutgoingAcat ActivityAccountMemo = "PENDING_OUTGOING_ACAT"
	ActivityAccountMemoPendingDrip         ActivityAccountMemo = "PENDING_DRIP"
	ActivityAccountMemoPendingWithdrawal   ActivityAccountMemo = "PENDING_WITHDRAWAL"
)

func (e ActivityAccountMemo) ToPointer() *ActivityAccountMemo {
	return &e
}

// ActivityAction - Denotes whether the shares are incoming or outgoing
type ActivityAction string

const (
	ActivityActionActionUnspecified ActivityAction = "ACTION_UNSPECIFIED"
	ActivityActionIncoming          ActivityAction = "INCOMING"
	ActivityActionOutgoing          ActivityAction = "OUTGOING"
	ActivityActionCashInLieu        ActivityAction = "CASH_IN_LIEU"
)

func (e ActivityAction) ToPointer() *ActivityAction {
	return &e
}

// ActivityMethod - The method used for the account transfer
type ActivityMethod string

const (
	ActivityMethodAccountTransferMethodUnspecified ActivityMethod = "ACCOUNT_TRANSFER_METHOD_UNSPECIFIED"
	ActivityMethodAcats                            ActivityMethod = "ACATS"
	ActivityMethodInternal                         ActivityMethod = "INTERNAL"
	ActivityMethodManual                           ActivityMethod = "MANUAL"
)

func (e ActivityMethod) ToPointer() *ActivityMethod {
	return &e
}

// ActivityAccountTransfer - Used to record the movement of funds or shares during the bookkeeping phase of an account transfer and details related to the account transfer
type ActivityAccountTransfer struct {
	// Sequence number assigned by the DTCC ACATS transfer system for each asset transferred
	AcatsAssetSequenceNumber *string `json:"acats_asset_sequence_number,omitempty"`
	// Unique Identifier generated by the NSCC ACATS when a transfer is initiated or submitted
	AcatsControlNumber *string `json:"acats_control_number,omitempty"`
	// Denotes whether the shares are incoming or outgoing
	Action *ActivityAction `json:"action,omitempty"`
	// Free form text field containing additional information about a transaction
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Account number at the contra firm
	ContraPartyAccountNumber *string `json:"contra_party_account_number,omitempty"`
	// Contra party identifier
	ContraPartyID *string `json:"contra_party_id,omitempty"`
	// Contra party institution for the account transfer
	Institution *string `json:"institution,omitempty"`
	// The method used for the account transfer
	Method *ActivityMethod `json:"method,omitempty"`
}

func (o *ActivityAccountTransfer) GetAcatsAssetSequenceNumber() *string {
	if o == nil {
		return nil
	}
	return o.AcatsAssetSequenceNumber
}

func (o *ActivityAccountTransfer) GetAcatsControlNumber() *string {
	if o == nil {
		return nil
	}
	return o.AcatsControlNumber
}

func (o *ActivityAccountTransfer) GetAction() *ActivityAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *ActivityAccountTransfer) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *ActivityAccountTransfer) GetContraPartyAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.ContraPartyAccountNumber
}

func (o *ActivityAccountTransfer) GetContraPartyID() *string {
	if o == nil {
		return nil
	}
	return o.ContraPartyID
}

func (o *ActivityAccountTransfer) GetInstitution() *string {
	if o == nil {
		return nil
	}
	return o.Institution
}

func (o *ActivityAccountTransfer) GetMethod() *ActivityMethod {
	if o == nil {
		return nil
	}
	return o.Method
}

// AccruedInterestDesc - Used to record the amount of interest that has been earned but not yet paid between the last interest payment and the date of the trade
type AccruedInterestDesc struct {
}

// ActivityActivityDate - The activity date refers to the specific calendar day on which a financial transaction, such as a trade at an exchange or a deposit at a bank, was executed. This date is specific to the institution where the transaction took place, capturing the exact day on which the institution formally records and effects the transaction
type ActivityActivityDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityActivityDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityActivityDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityActivityDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityBrokerCapacity - The execution route Apex used for this trade
type ActivityBrokerCapacity string

const (
	ActivityBrokerCapacityCapacityUnspecified ActivityBrokerCapacity = "CAPACITY_UNSPECIFIED"
	ActivityBrokerCapacityAgency              ActivityBrokerCapacity = "AGENCY"
	ActivityBrokerCapacityPrincipal           ActivityBrokerCapacity = "PRINCIPAL"
	ActivityBrokerCapacityMixed               ActivityBrokerCapacity = "MIXED"
)

func (e ActivityBrokerCapacity) ToPointer() *ActivityBrokerCapacity {
	return &e
}

// ActivityPrevailingMarketPrice - The price for the instrument that is prevailing in the market
type ActivityPrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityPrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityPriceAdjustmentAmount - Total monetary value of the price_adjustment
type ActivityPriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityPriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityPriceAdjustmentPercent - The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
type ActivityPriceAdjustmentPercent struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityPriceAdjustmentPercent) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityPriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security
type ActivityPriceAdjustmentType string

const (
	ActivityPriceAdjustmentTypePriceAdjustmentTypeUnspecified ActivityPriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	ActivityPriceAdjustmentTypeMarkup                         ActivityPriceAdjustmentType = "MARKUP"
	ActivityPriceAdjustmentTypeMarkdown                       ActivityPriceAdjustmentType = "MARKDOWN"
	ActivityPriceAdjustmentTypeSalesLoad                      ActivityPriceAdjustmentType = "SALES_LOAD"
)

func (e ActivityPriceAdjustmentType) ToPointer() *ActivityPriceAdjustmentType {
	return &e
}

// ActivityPriceAdjustmentRecord - Information about any price adjustments applied to the security
type ActivityPriceAdjustmentRecord struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *ActivityPriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
	PriceAdjustmentPercent *ActivityPriceAdjustmentPercent `json:"price_adjustment_percent,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security
	PriceAdjustmentType *ActivityPriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *ActivityPriceAdjustmentRecord) GetPriceAdjustmentAmount() *ActivityPriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *ActivityPriceAdjustmentRecord) GetPriceAdjustmentPercent() *ActivityPriceAdjustmentPercent {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentPercent
}

func (o *ActivityPriceAdjustmentRecord) GetPriceAdjustmentType() *ActivityPriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// ActivityAllocation - Object containing metadata for trade allocation
type ActivityAllocation struct {
	// To be populated by the submitter of the trade detail
	AdditionalInstructions []string `json:"additional_instructions,omitempty"`
	// A ULID assigned by the Booking API if a trade belongs to an allocation
	BookingAPITradeAllocationID *string `json:"booking_api_trade_allocation_id,omitempty"`
	// The execution route Apex used for this trade
	BrokerCapacity *ActivityBrokerCapacity `json:"broker_capacity,omitempty"`
	// Client usage area (intact)
	ClientMemos []string `json:"client_memos,omitempty"`
	// Client-provided order ID present in execution reports
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// External system ID provided by a client
	ExternalID *string `json:"external_id,omitempty"`
	// Order ID generated by the trading-gateway
	GatewayClientOrderID *string `json:"gateway_client_order_id,omitempty"`
	// Indicates the trade should be omitted from client billing
	InternalError *bool `json:"internal_error,omitempty"`
	// Trade lots
	Lots []Lot `json:"lots,omitempty"`
	// The price for the instrument that is prevailing in the market
	PrevailingMarketPrice *ActivityPrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Information about any price adjustments applied to the security
	PriceAdjustmentRecord *ActivityPriceAdjustmentRecord `json:"price_adjustment_record,omitempty"`
	// Special instructions for the trade
	SpecialInstructions []string `json:"special_instructions,omitempty"`
	// The yields associated with a fixed income trade
	YieldRecords []YieldRecord `json:"yield_records,omitempty"`
}

func (o *ActivityAllocation) GetAdditionalInstructions() []string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *ActivityAllocation) GetBookingAPITradeAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeAllocationID
}

func (o *ActivityAllocation) GetBrokerCapacity() *ActivityBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *ActivityAllocation) GetClientMemos() []string {
	if o == nil {
		return nil
	}
	return o.ClientMemos
}

func (o *ActivityAllocation) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *ActivityAllocation) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *ActivityAllocation) GetGatewayClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.GatewayClientOrderID
}

func (o *ActivityAllocation) GetInternalError() *bool {
	if o == nil {
		return nil
	}
	return o.InternalError
}

func (o *ActivityAllocation) GetLots() []Lot {
	if o == nil {
		return nil
	}
	return o.Lots
}

func (o *ActivityAllocation) GetPrevailingMarketPrice() *ActivityPrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *ActivityAllocation) GetPriceAdjustmentRecord() *ActivityPriceAdjustmentRecord {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentRecord
}

func (o *ActivityAllocation) GetSpecialInstructions() []string {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *ActivityAllocation) GetYieldRecords() []YieldRecord {
	if o == nil {
		return nil
	}
	return o.YieldRecords
}

// ActivityCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityPaymentDate - The anticipated payment date at the depository
type ActivityPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityBondDefaultQuantity - Corresponds to the position's trade quantity
type ActivityBondDefaultQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityBondDefaultQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityBondDefault - Object containing metadata for bond defaults
type ActivityBondDefault struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *ActivityPaymentDate `json:"payment_date,omitempty"`
	// Corresponds to the position's trade quantity
	Quantity *ActivityBondDefaultQuantity `json:"quantity,omitempty"`
}

func (o *ActivityBondDefault) GetCashRate() *ActivityCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityBondDefault) GetCorporateActionGeneralInformation() *ActivityCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityBondDefault) GetPaymentDate() *ActivityPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *ActivityBondDefault) GetQuantity() *ActivityBondDefaultQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

// ActivityCapitalGainsCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityCapitalGainsCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityCapitalGainsCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityCapitalGainsCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityCapitalGainsCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityCapitalGainsCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityCapitalGainsCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityCapitalGainsCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityCapitalGainsCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityCapitalGainsPaymentDate - The anticipated payment date at the depository
type ActivityCapitalGainsPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityCapitalGainsPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityCapitalGainsPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityCapitalGainsPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityCapitalGainsQuantity - The position on which the corporate action was paid
type ActivityCapitalGainsQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityCapitalGainsQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityRecordDate - The date on which positions are recorded in order to calculate entitlement
type ActivityRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityCapitalGains - Used to record a distribution of cash that an issuer has determined will be declared as income financed from capital gains and not ordinary income and details related to the capital gain
type ActivityCapitalGains struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityCapitalGainsCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Can indicate the capital gain is eligible for preferential tax treatment
	LongTermGain *bool `json:"long_term_gain,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *ActivityCapitalGainsPaymentDate `json:"payment_date,omitempty"`
	// The position on which the corporate action was paid
	Quantity *ActivityCapitalGainsQuantity `json:"quantity,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *ActivityRecordDate `json:"record_date,omitempty"`
	// Indicates whether the cash dividend was reinvested
	Reinvested *bool `json:"reinvested,omitempty"`
}

func (o *ActivityCapitalGains) GetCorporateActionGeneralInformation() *ActivityCapitalGainsCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityCapitalGains) GetLongTermGain() *bool {
	if o == nil {
		return nil
	}
	return o.LongTermGain
}

func (o *ActivityCapitalGains) GetPaymentDate() *ActivityCapitalGainsPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *ActivityCapitalGains) GetQuantity() *ActivityCapitalGainsQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ActivityCapitalGains) GetRecordDate() *ActivityRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *ActivityCapitalGains) GetReinvested() *bool {
	if o == nil {
		return nil
	}
	return o.Reinvested
}

// ActivityCashDividendCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityCashDividendCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityCashDividendCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityCashDividendCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityCashDividendCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityCashDividendCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityCashDividendCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityCashDividendCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityCashDividendCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityCashDividendCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityCashDividendCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityCashDividendCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityCashDividendFpsl - Number of shares loaned out via the FPSL program on record_date
type ActivityCashDividendFpsl struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityCashDividendFpsl) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityFree - Number of shares not loaned out via the FPSL program on record_date
type ActivityFree struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityFree) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityCashDividendPaymentDate - The anticipated payment date at the depository
type ActivityCashDividendPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityCashDividendPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityCashDividendPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityCashDividendPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityCashDividendQuantity - When ex-date occurs before the record date, quantity will equal the settled date position balance on the position date of the event When ex-date occurs after the record date, quantity will equal the trade date position balance on the position date of the event
type ActivityCashDividendQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityCashDividendQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityCashDividendRecordDate - The date on which positions are recorded in order to calculate entitlement
type ActivityCashDividendRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityCashDividendRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityCashDividendRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityCashDividendRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivitySettled - The accounts settled position for which the corporate action was paid
type ActivitySettled struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivitySettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivitySubtype - The subtype for the corporate action event
type ActivitySubtype string

const (
	ActivitySubtypeCorporateactionsubtypeUnspecified  ActivitySubtype = "CORPORATEACTIONSUBTYPE_UNSPECIFIED"
	ActivitySubtypeAdditionalDividend                 ActivitySubtype = "ADDITIONAL_DIVIDEND"
	ActivitySubtypeApproximateRate                    ActivitySubtype = "APPROXIMATE_RATE"
	ActivitySubtypeDividendArrears                    ActivitySubtype = "DIVIDEND_ARREARS"
	ActivitySubtypeDividendCancelled                  ActivitySubtype = "DIVIDEND_CANCELLED"
	ActivitySubtypeDividendPaymentTaxClassifications  ActivitySubtype = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS"
	ActivitySubtypeDividendRescinded                  ActivitySubtype = "DIVIDEND_RESCINDED"
	ActivitySubtypeEstimatedReturnOfCapital           ActivitySubtype = "ESTIMATED_RETURN_OF_CAPITAL"
	ActivitySubtypeEstimatedReturnOfCapitalPlusIncome ActivitySubtype = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME"
	ActivitySubtypeExtraDividend                      ActivitySubtype = "EXTRA_DIVIDEND"
	ActivitySubtypeExtraDividendPlusIncome            ActivitySubtype = "EXTRA_DIVIDEND_PLUS_INCOME"
	ActivitySubtypeFinalPaymentTransferBooksAreClosed ActivitySubtype = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED"
	ActivitySubtypeGrossRate                          ActivitySubtype = "GROSS_RATE"
	ActivitySubtypeInitialDividend                    ActivitySubtype = "INITIAL_DIVIDEND"
	ActivitySubtypeInitialDividendLongPeriod          ActivitySubtype = "INITIAL_DIVIDEND_LONG_PERIOD"
	ActivitySubtypeInitialDividendShortPeriod         ActivitySubtype = "INITIAL_DIVIDEND_SHORT_PERIOD"
	ActivitySubtypeLimitedPartnershipDistribution     ActivitySubtype = "LIMITED_PARTNERSHIP_DISTRIBUTION"
	ActivitySubtypeLiquidation                        ActivitySubtype = "LIQUIDATION"
	ActivitySubtypeNetRate                            ActivitySubtype = "NET_RATE"
	ActivitySubtypeOther                              ActivitySubtype = "OTHER"
	ActivitySubtypeProceedsFromSaleOfRights           ActivitySubtype = "PROCEEDS_FROM_SALE_OF_RIGHTS"
	ActivitySubtypeRegularDividend                    ActivitySubtype = "REGULAR_DIVIDEND"
	ActivitySubtypeReturnOfCapital                    ActivitySubtype = "RETURN_OF_CAPITAL"
	ActivitySubtypeReturnOfCapitalPlusIncome          ActivitySubtype = "RETURN_OF_CAPITAL_PLUS_INCOME"
	ActivitySubtypeSpecialDividend                    ActivitySubtype = "SPECIAL_DIVIDEND"
	ActivitySubtypeSpecialDividendPlusIncome          ActivitySubtype = "SPECIAL_DIVIDEND_PLUS_INCOME"
	ActivitySubtypeYearEndDividend                    ActivitySubtype = "YEAR_END_DIVIDEND"
	ActivitySubtypeYearEndDividendPlusIncome          ActivitySubtype = "YEAR_END_DIVIDEND_PLUS_INCOME"
	ActivitySubtypePartial                            ActivitySubtype = "PARTIAL"
	ActivitySubtypeFull                               ActivitySubtype = "FULL"
	ActivitySubtypeMaturity                           ActivitySubtype = "MATURITY"
	ActivitySubtypeTermination                        ActivitySubtype = "TERMINATION"
	ActivitySubtypeRedemptionOfWarrants               ActivitySubtype = "REDEMPTION_OF_WARRANTS"
)

func (e ActivitySubtype) ToPointer() *ActivitySubtype {
	return &e
}

// ActivityCashDividend - Used to record the distribution of cash to shareholders, paid by the issuer, usually based upon current earnings and/or accumulated profits as declared by the board of directors and details related to the cash dividend
type ActivityCashDividend struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityCashDividendCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityCashDividendCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Number of shares loaned out via the FPSL program on record_date
	Fpsl *ActivityCashDividendFpsl `json:"fpsl,omitempty"`
	// Number of shares not loaned out via the FPSL program on record_date
	Free *ActivityFree `json:"free,omitempty"`
	// Can indicate the capital gain is eligible for preferential tax treatment
	LongTermGain *bool `json:"long_term_gain,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *ActivityCashDividendPaymentDate `json:"payment_date,omitempty"`
	// If populated, can indicates whether the transaction may be taxed at a preferential rate
	Qualified *bool `json:"qualified,omitempty"`
	// When ex-date occurs before the record date, quantity will equal the settled date position balance on the position date of the event When ex-date occurs after the record date, quantity will equal the trade date position balance on the position date of the event
	Quantity *ActivityCashDividendQuantity `json:"quantity,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *ActivityCashDividendRecordDate `json:"record_date,omitempty"`
	// Indicates whether the cash dividend was reinvested
	Reinvested *bool `json:"reinvested,omitempty"`
	// The accounts settled position for which the corporate action was paid
	Settled *ActivitySettled `json:"settled,omitempty"`
	// Indicates that this portion of the dividend was paid on a position that is currently loaned out
	SubstitutePayment *bool `json:"substitute_payment,omitempty"`
	// The subtype for the corporate action event
	Subtype *ActivitySubtype `json:"subtype,omitempty"`
}

func (o *ActivityCashDividend) GetCashRate() *ActivityCashDividendCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityCashDividend) GetCorporateActionGeneralInformation() *ActivityCashDividendCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityCashDividend) GetFpsl() *ActivityCashDividendFpsl {
	if o == nil {
		return nil
	}
	return o.Fpsl
}

func (o *ActivityCashDividend) GetFree() *ActivityFree {
	if o == nil {
		return nil
	}
	return o.Free
}

func (o *ActivityCashDividend) GetLongTermGain() *bool {
	if o == nil {
		return nil
	}
	return o.LongTermGain
}

func (o *ActivityCashDividend) GetPaymentDate() *ActivityCashDividendPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *ActivityCashDividend) GetQualified() *bool {
	if o == nil {
		return nil
	}
	return o.Qualified
}

func (o *ActivityCashDividend) GetQuantity() *ActivityCashDividendQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ActivityCashDividend) GetRecordDate() *ActivityCashDividendRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *ActivityCashDividend) GetReinvested() *bool {
	if o == nil {
		return nil
	}
	return o.Reinvested
}

func (o *ActivityCashDividend) GetSettled() *ActivitySettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

func (o *ActivityCashDividend) GetSubstitutePayment() *bool {
	if o == nil {
		return nil
	}
	return o.SubstitutePayment
}

func (o *ActivityCashDividend) GetSubtype() *ActivitySubtype {
	if o == nil {
		return nil
	}
	return o.Subtype
}

// ActivityCashInLieuCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityCashInLieuCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityCashInLieuCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityCashInLieuCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityCashInLieuCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityCashInLieuCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityCashInLieuCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityCashInLieuCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityCashInLieuCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityCashInLieu - Object containing metadata for cash in lieu
type ActivityCashInLieu struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityCashInLieuCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
}

func (o *ActivityCashInLieu) GetCorporateActionGeneralInformation() *ActivityCashInLieuCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

// ActivityCommission - Used to record commission charged by brokers or financial intermediaries for executing financial transactions on behalf of clients
type ActivityCommission struct {
}

// ActivityConversionCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityConversionCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityConversionCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityConversionCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityConversionCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityConversionCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityConversionCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityConversionCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityConversionCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityConversionCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityConversionCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityConversionCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityStockRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type ActivityStockRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityStockRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityConversionType - The subtype for the corporate action event
type ActivityConversionType string

const (
	ActivityConversionTypeEventTypeUnspecified ActivityConversionType = "EVENT_TYPE_UNSPECIFIED"
	ActivityConversionTypeCash                 ActivityConversionType = "CASH"
	ActivityConversionTypeStock                ActivityConversionType = "STOCK"
	ActivityConversionTypeCashAndStock         ActivityConversionType = "CASH_AND_STOCK"
)

func (e ActivityConversionType) ToPointer() *ActivityConversionType {
	return &e
}

// ActivityConversion - Used to record the conversion of securities (generally convertible bonds or preferred shares) into another form of securities (usually common shares) at a pre-stated price or rate and details related to the conversion
type ActivityConversion struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityConversionCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityConversionCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	StockRate *ActivityStockRate `json:"stock_rate,omitempty"`
	// The subtype for the corporate action event
	Type *ActivityConversionType `json:"type,omitempty"`
}

func (o *ActivityConversion) GetCashRate() *ActivityConversionCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityConversion) GetCorporateActionGeneralInformation() *ActivityConversionCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityConversion) GetStockRate() *ActivityStockRate {
	if o == nil {
		return nil
	}
	return o.StockRate
}

func (o *ActivityConversion) GetType() *ActivityConversionType {
	if o == nil {
		return nil
	}
	return o.Type
}

// ActivityCorporateActionMemoAdjustment - Used to record memo location adjustments initiated by the corporate action system due to reorg events
type ActivityCorporateActionMemoAdjustment struct {
	// This field serves as a unique identifier for the specific corporate action linked to the memo adjustment
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Used to capture the specific type of corporate action related to the memo adjustment
	CorporateActionType *string `json:"corporate_action_type,omitempty"`
}

func (o *ActivityCorporateActionMemoAdjustment) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityCorporateActionMemoAdjustment) GetCorporateActionType() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionType
}

// ActivityCreditType - Further detail describing the type of credit
type ActivityCreditType string

const (
	ActivityCreditTypeCreditTypeUnspecified     ActivityCreditType = "CREDIT_TYPE_UNSPECIFIED"
	ActivityCreditTypeFullyPaidStockLoan        ActivityCreditType = "FULLY_PAID_STOCK_LOAN"
	ActivityCreditTypeWriteOff                  ActivityCreditType = "WRITE_OFF"
	ActivityCreditTypeReimbursement             ActivityCreditType = "REIMBURSEMENT"
	ActivityCreditTypePromotional               ActivityCreditType = "PROMOTIONAL"
	ActivityCreditTypeFdicInsuredDepositProgram ActivityCreditType = "FDIC_INSURED_DEPOSIT_PROGRAM"
	ActivityCreditTypeAccountTransferAdjustment ActivityCreditType = "ACCOUNT_TRANSFER_ADJUSTMENT"
)

func (e ActivityCreditType) ToPointer() *ActivityCreditType {
	return &e
}

// ActivityCredit - Used to disburse funds into a customer's account, typically for purposes such as refunds, interest payments, or rewards from enrolled programs and details related to the credit
type ActivityCredit struct {
	// Free form text field providing additional information about a transaction
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Further detail describing the type of credit
	CreditType *ActivityCreditType `json:"credit_type,omitempty"`
	// No longer applicable
	Taxable *bool `json:"taxable,omitempty"`
}

func (o *ActivityCredit) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *ActivityCredit) GetCreditType() *ActivityCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ActivityCredit) GetTaxable() *bool {
	if o == nil {
		return nil
	}
	return o.Taxable
}

// ActivityContributionType - Enum Representing whether the deposit is a new contribution to a retirement account or a rollover from a different account
type ActivityContributionType string

const (
	ActivityContributionTypeContributionTypeUnspecified ActivityContributionType = "CONTRIBUTION_TYPE_UNSPECIFIED"
	ActivityContributionTypeRegular                     ActivityContributionType = "REGULAR"
	ActivityContributionTypeEmployee                    ActivityContributionType = "EMPLOYEE"
	ActivityContributionTypeEmployer                    ActivityContributionType = "EMPLOYER"
	ActivityContributionTypeRecharacterization          ActivityContributionType = "RECHARACTERIZATION"
	ActivityContributionTypeRollover60Day               ActivityContributionType = "ROLLOVER_60_DAY"
	ActivityContributionTypeRolloverDirect              ActivityContributionType = "ROLLOVER_DIRECT"
	ActivityContributionTypeTransfer                    ActivityContributionType = "TRANSFER"
	ActivityContributionTypeTrusteeFee                  ActivityContributionType = "TRUSTEE_FEE"
	ActivityContributionTypeConversion                  ActivityContributionType = "CONVERSION"
	ActivityContributionTypeRepayment                   ActivityContributionType = "REPAYMENT"
	ActivityContributionTypeContributionNonReportable   ActivityContributionType = "CONTRIBUTION_NON_REPORTABLE"
)

func (e ActivityContributionType) ToPointer() *ActivityContributionType {
	return &e
}

// ActivityDepositType - The mechanism by which funds were deposited
type ActivityDepositType string

const (
	ActivityDepositTypeExternalMovementTypeUnspecified ActivityDepositType = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED"
	ActivityDepositTypeAch                             ActivityDepositType = "ACH"
	ActivityDepositTypeCheck                           ActivityDepositType = "CHECK"
	ActivityDepositTypeWire                            ActivityDepositType = "WIRE"
	ActivityDepositTypePaypal                          ActivityDepositType = "PAYPAL"
	ActivityDepositTypeRtp                             ActivityDepositType = "RTP"
	ActivityDepositTypeIct                             ActivityDepositType = "ICT"
	ActivityDepositTypeJournal                         ActivityDepositType = "JOURNAL"
	ActivityDepositTypeExternalAch                     ActivityDepositType = "EXTERNAL_ACH"
)

func (e ActivityDepositType) ToPointer() *ActivityDepositType {
	return &e
}

// ActivityDeposit - Used to record deposits of funds into an account and capture details related to the deposit
type ActivityDeposit struct {
	// Free form text field providing additional information about a transaction
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Enum Representing whether the deposit is a new contribution to a retirement account or a rollover from a different account
	ContributionType *ActivityContributionType `json:"contribution_type,omitempty"`
	// Integer representing the tax year the contribution should be applied to
	ContributionYear *int `json:"contribution_year,omitempty"`
	// Unique tracking number provided to allow tracking a wire transfer from the initiating bank to the receiving bank
	FedReferenceNumber *string `json:"fed_reference_number,omitempty"`
	// Human readable account identifier for the account the assets were journaled from. To be populated when the Deposit type is Journal
	OriginatingAccountNumber *string `json:"originating_account_number,omitempty"`
	// The mechanism by which funds were deposited
	Type *ActivityDepositType `json:"type,omitempty"`
}

func (o *ActivityDeposit) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *ActivityDeposit) GetContributionType() *ActivityContributionType {
	if o == nil {
		return nil
	}
	return o.ContributionType
}

func (o *ActivityDeposit) GetContributionYear() *int {
	if o == nil {
		return nil
	}
	return o.ContributionYear
}

func (o *ActivityDeposit) GetFedReferenceNumber() *string {
	if o == nil {
		return nil
	}
	return o.FedReferenceNumber
}

func (o *ActivityDeposit) GetOriginatingAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.OriginatingAccountNumber
}

func (o *ActivityDeposit) GetType() *ActivityDepositType {
	if o == nil {
		return nil
	}
	return o.Type
}

// ActivityDripAction - Denotes whether the reinvestment is pending or complete
type ActivityDripAction string

const (
	ActivityDripActionDripActionUnspecified ActivityDripAction = "DRIP_ACTION_UNSPECIFIED"
	ActivityDripActionDripPending           ActivityDripAction = "DRIP_PENDING"
	ActivityDripActionDripComplete          ActivityDripAction = "DRIP_COMPLETE"
)

func (e ActivityDripAction) ToPointer() *ActivityDripAction {
	return &e
}

// ActivityDrip - Used to record the movement of funds to/ from the pending_drip memo location
type ActivityDrip struct {
	// Denotes whether the reinvestment is pending or complete
	Action *ActivityDripAction `json:"action,omitempty"`
}

func (o *ActivityDrip) GetAction() *ActivityDripAction {
	if o == nil {
		return nil
	}
	return o.Action
}

// ActivityExchangeCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityExchangeCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityExchangeCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityExchangeCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityExchangeCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityExchangeCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityExchangeCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityExchangeCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityExchangeCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityExchangeCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityExchangeCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityExchangeCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityExchangeStockRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type ActivityExchangeStockRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityExchangeStockRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityExchangeType - Indicates whether the merger was for cash, stock, or both
type ActivityExchangeType string

const (
	ActivityExchangeTypeEventTypeUnspecified ActivityExchangeType = "EVENT_TYPE_UNSPECIFIED"
	ActivityExchangeTypeCash                 ActivityExchangeType = "CASH"
	ActivityExchangeTypeStock                ActivityExchangeType = "STOCK"
	ActivityExchangeTypeCashAndStock         ActivityExchangeType = "CASH_AND_STOCK"
)

func (e ActivityExchangeType) ToPointer() *ActivityExchangeType {
	return &e
}

// ActivityExchange - Used to record the exchange of certificates for a new security or cash and details related to the exchange
type ActivityExchange struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityExchangeCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityExchangeCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	StockRate *ActivityExchangeStockRate `json:"stock_rate,omitempty"`
	// Indicates whether the merger was for cash, stock, or both
	Type *ActivityExchangeType `json:"type,omitempty"`
}

func (o *ActivityExchange) GetCashRate() *ActivityExchangeCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityExchange) GetCorporateActionGeneralInformation() *ActivityExchangeCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityExchange) GetStockRate() *ActivityExchangeStockRate {
	if o == nil {
		return nil
	}
	return o.StockRate
}

func (o *ActivityExchange) GetType() *ActivityExchangeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// ActivityFee - Used to record Fees that have been assessed to account and capture details related to the fee
type ActivityFee struct {
	// Free form text field providing additional information about a transaction
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
}

func (o *ActivityFee) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

// ActivityFpslAction - Denotes whether the shares are incoming or outgoing
type ActivityFpslAction string

const (
	ActivityFpslActionFpslActionUnspecified ActivityFpslAction = "FPSL_ACTION_UNSPECIFIED"
	ActivityFpslActionAllocate              ActivityFpslAction = "ALLOCATE"
	ActivityFpslActionDeallocate            ActivityFpslAction = "DEALLOCATE"
)

func (e ActivityFpslAction) ToPointer() *ActivityFpslAction {
	return &e
}

// ActivityFpsl - Used to record the movements of shares to/ from the fpsl memo location and details related to the fpsl memo
type ActivityFpsl struct {
	// Denotes whether the shares are incoming or outgoing
	Action *ActivityFpslAction `json:"action,omitempty"`
}

func (o *ActivityFpsl) GetAction() *ActivityFpslAction {
	if o == nil {
		return nil
	}
	return o.Action
}

// ActivityGrossAmount - The monetary value of an activity, exclusive of any fees, withholdings, accrued_interest, or commissions (First money)
type ActivityGrossAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityGrossAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityInterestAccrualEndDate - Date on which interest accrues before the calculation is made for payment or charge
type ActivityInterestAccrualEndDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityInterestAccrualEndDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityInterestAccrualEndDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityInterestAccrualEndDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityInterestAccrualStartDate - Date on which interest begins to accrue on a cash balance or borrowed funds
type ActivityInterestAccrualStartDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityInterestAccrualStartDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityInterestAccrualStartDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityInterestAccrualStartDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

type ActivityInterestType string

const (
	ActivityInterestTypeInterestTypeUnspecified ActivityInterestType = "INTEREST_TYPE_UNSPECIFIED"
	ActivityInterestTypeCredit                  ActivityInterestType = "CREDIT"
	ActivityInterestTypeDebit                   ActivityInterestType = "DEBIT"
)

func (e ActivityInterestType) ToPointer() *ActivityInterestType {
	return &e
}

// ActivityInterest - Used to record the payment of interest to accounts that have maintained a cash balance or the charging of interest to accounts that have used margin and details related to the interest
type ActivityInterest struct {
	// Date on which interest accrues before the calculation is made for payment or charge
	InterestAccrualEndDate *ActivityInterestAccrualEndDate `json:"interest_accrual_end_date,omitempty"`
	// Date on which interest begins to accrue on a cash balance or borrowed funds
	InterestAccrualStartDate *ActivityInterestAccrualStartDate `json:"interest_accrual_start_date,omitempty"`
	InterestType             *ActivityInterestType             `json:"interest_type,omitempty"`
}

func (o *ActivityInterest) GetInterestAccrualEndDate() *ActivityInterestAccrualEndDate {
	if o == nil {
		return nil
	}
	return o.InterestAccrualEndDate
}

func (o *ActivityInterest) GetInterestAccrualStartDate() *ActivityInterestAccrualStartDate {
	if o == nil {
		return nil
	}
	return o.InterestAccrualStartDate
}

func (o *ActivityInterest) GetInterestType() *ActivityInterestType {
	if o == nil {
		return nil
	}
	return o.InterestType
}

// ActivityInterestPaymentCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityInterestPaymentCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityInterestPaymentCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityInterestPaymentCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityInterestPaymentCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityInterestPaymentCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityInterestPaymentCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityInterestPaymentCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityInterestPaymentCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityInterestPaymentCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityInterestPaymentCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityInterestPaymentCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityInterestPaymentPaymentDate - The anticipated payment date at the depository
type ActivityInterestPaymentPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityInterestPaymentPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityInterestPaymentPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityInterestPaymentPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityInterestPaymentRecordDate - The date on which positions are recorded in order to calculate entitlement
type ActivityInterestPaymentRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityInterestPaymentRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityInterestPaymentRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityInterestPaymentRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityInterestPaymentSettled - The accounts settled position for which the corporate action was paid
type ActivityInterestPaymentSettled struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityInterestPaymentSettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityInterestPayment - Used to record the The payment of an obligation an issuer has agreed to make to holders of an interest-bearing security and details related to the interest payment. Usually, the payment is made in cash and on a scheduled basis
type ActivityInterestPayment struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityInterestPaymentCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityInterestPaymentCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *ActivityInterestPaymentPaymentDate `json:"payment_date,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *ActivityInterestPaymentRecordDate `json:"record_date,omitempty"`
	// The accounts settled position for which the corporate action was paid
	Settled *ActivityInterestPaymentSettled `json:"settled,omitempty"`
}

func (o *ActivityInterestPayment) GetCashRate() *ActivityInterestPaymentCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityInterestPayment) GetCorporateActionGeneralInformation() *ActivityInterestPaymentCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityInterestPayment) GetPaymentDate() *ActivityInterestPaymentPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *ActivityInterestPayment) GetRecordDate() *ActivityInterestPaymentRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *ActivityInterestPayment) GetSettled() *ActivityInterestPaymentSettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

// ActivityLiquidationAction - Denotes whether the shares are incoming or outgoing
type ActivityLiquidationAction string

const (
	ActivityLiquidationActionActionUnspecified ActivityLiquidationAction = "ACTION_UNSPECIFIED"
	ActivityLiquidationActionIncoming          ActivityLiquidationAction = "INCOMING"
	ActivityLiquidationActionOutgoing          ActivityLiquidationAction = "OUTGOING"
	ActivityLiquidationActionCashInLieu        ActivityLiquidationAction = "CASH_IN_LIEU"
)

func (e ActivityLiquidationAction) ToPointer() *ActivityLiquidationAction {
	return &e
}

// ActivityLiquidationCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityLiquidationCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityLiquidationCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityLiquidationCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityLiquidationCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityLiquidationCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityLiquidationCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityLiquidationCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityLiquidationCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityLiquidationCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityLiquidationCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityLiquidationCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityEffectiveDate - Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
type ActivityEffectiveDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityEffectiveDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityEffectiveDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityEffectiveDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityLiquidationPaymentDate - The anticipated payment date at the depository
type ActivityLiquidationPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityLiquidationPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityLiquidationPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityLiquidationPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityLiquidationQuantity - The position on which the corporate action was paid
type ActivityLiquidationQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityLiquidationQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityLiquidationRecordDate - The date on which positions are recorded in order to calculate entitlement
type ActivityLiquidationRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityLiquidationRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityLiquidationRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityLiquidationRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityLiquidationSettled - The accounts settled position for which the corporate action was paid
type ActivityLiquidationSettled struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityLiquidationSettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityLiquidationSubtype - The subtype for the corporate action event
type ActivityLiquidationSubtype string

const (
	ActivityLiquidationSubtypeCorporateactionsubtypeUnspecified  ActivityLiquidationSubtype = "CORPORATEACTIONSUBTYPE_UNSPECIFIED"
	ActivityLiquidationSubtypeAdditionalDividend                 ActivityLiquidationSubtype = "ADDITIONAL_DIVIDEND"
	ActivityLiquidationSubtypeApproximateRate                    ActivityLiquidationSubtype = "APPROXIMATE_RATE"
	ActivityLiquidationSubtypeDividendArrears                    ActivityLiquidationSubtype = "DIVIDEND_ARREARS"
	ActivityLiquidationSubtypeDividendCancelled                  ActivityLiquidationSubtype = "DIVIDEND_CANCELLED"
	ActivityLiquidationSubtypeDividendPaymentTaxClassifications  ActivityLiquidationSubtype = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS"
	ActivityLiquidationSubtypeDividendRescinded                  ActivityLiquidationSubtype = "DIVIDEND_RESCINDED"
	ActivityLiquidationSubtypeEstimatedReturnOfCapital           ActivityLiquidationSubtype = "ESTIMATED_RETURN_OF_CAPITAL"
	ActivityLiquidationSubtypeEstimatedReturnOfCapitalPlusIncome ActivityLiquidationSubtype = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME"
	ActivityLiquidationSubtypeExtraDividend                      ActivityLiquidationSubtype = "EXTRA_DIVIDEND"
	ActivityLiquidationSubtypeExtraDividendPlusIncome            ActivityLiquidationSubtype = "EXTRA_DIVIDEND_PLUS_INCOME"
	ActivityLiquidationSubtypeFinalPaymentTransferBooksAreClosed ActivityLiquidationSubtype = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED"
	ActivityLiquidationSubtypeGrossRate                          ActivityLiquidationSubtype = "GROSS_RATE"
	ActivityLiquidationSubtypeInitialDividend                    ActivityLiquidationSubtype = "INITIAL_DIVIDEND"
	ActivityLiquidationSubtypeInitialDividendLongPeriod          ActivityLiquidationSubtype = "INITIAL_DIVIDEND_LONG_PERIOD"
	ActivityLiquidationSubtypeInitialDividendShortPeriod         ActivityLiquidationSubtype = "INITIAL_DIVIDEND_SHORT_PERIOD"
	ActivityLiquidationSubtypeLimitedPartnershipDistribution     ActivityLiquidationSubtype = "LIMITED_PARTNERSHIP_DISTRIBUTION"
	ActivityLiquidationSubtypeLiquidation                        ActivityLiquidationSubtype = "LIQUIDATION"
	ActivityLiquidationSubtypeNetRate                            ActivityLiquidationSubtype = "NET_RATE"
	ActivityLiquidationSubtypeOther                              ActivityLiquidationSubtype = "OTHER"
	ActivityLiquidationSubtypeProceedsFromSaleOfRights           ActivityLiquidationSubtype = "PROCEEDS_FROM_SALE_OF_RIGHTS"
	ActivityLiquidationSubtypeRegularDividend                    ActivityLiquidationSubtype = "REGULAR_DIVIDEND"
	ActivityLiquidationSubtypeReturnOfCapital                    ActivityLiquidationSubtype = "RETURN_OF_CAPITAL"
	ActivityLiquidationSubtypeReturnOfCapitalPlusIncome          ActivityLiquidationSubtype = "RETURN_OF_CAPITAL_PLUS_INCOME"
	ActivityLiquidationSubtypeSpecialDividend                    ActivityLiquidationSubtype = "SPECIAL_DIVIDEND"
	ActivityLiquidationSubtypeSpecialDividendPlusIncome          ActivityLiquidationSubtype = "SPECIAL_DIVIDEND_PLUS_INCOME"
	ActivityLiquidationSubtypeYearEndDividend                    ActivityLiquidationSubtype = "YEAR_END_DIVIDEND"
	ActivityLiquidationSubtypeYearEndDividendPlusIncome          ActivityLiquidationSubtype = "YEAR_END_DIVIDEND_PLUS_INCOME"
	ActivityLiquidationSubtypePartial                            ActivityLiquidationSubtype = "PARTIAL"
	ActivityLiquidationSubtypeFull                               ActivityLiquidationSubtype = "FULL"
	ActivityLiquidationSubtypeMaturity                           ActivityLiquidationSubtype = "MATURITY"
	ActivityLiquidationSubtypeTermination                        ActivityLiquidationSubtype = "TERMINATION"
	ActivityLiquidationSubtypeRedemptionOfWarrants               ActivityLiquidationSubtype = "REDEMPTION_OF_WARRANTS"
)

func (e ActivityLiquidationSubtype) ToPointer() *ActivityLiquidationSubtype {
	return &e
}

// ActivityLiquidation - Used to record the dismantling of a business by an issuer, paying off debts in order of priority and distributing the remaining assets in cash and/or securities to the owners of the securities and details related to the liquidation
type ActivityLiquidation struct {
	// Denotes whether the shares are incoming or outgoing
	Action *ActivityLiquidationAction `json:"action,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityLiquidationCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityLiquidationCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
	EffectiveDate *ActivityEffectiveDate `json:"effective_date,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *ActivityLiquidationPaymentDate `json:"payment_date,omitempty"`
	// The position on which the corporate action was paid
	Quantity *ActivityLiquidationQuantity `json:"quantity,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *ActivityLiquidationRecordDate `json:"record_date,omitempty"`
	// The accounts settled position for which the corporate action was paid
	Settled *ActivityLiquidationSettled `json:"settled,omitempty"`
	// The subtype for the corporate action event
	Subtype *ActivityLiquidationSubtype `json:"subtype,omitempty"`
}

func (o *ActivityLiquidation) GetAction() *ActivityLiquidationAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *ActivityLiquidation) GetCashRate() *ActivityLiquidationCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityLiquidation) GetCorporateActionGeneralInformation() *ActivityLiquidationCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityLiquidation) GetEffectiveDate() *ActivityEffectiveDate {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *ActivityLiquidation) GetPaymentDate() *ActivityLiquidationPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *ActivityLiquidation) GetQuantity() *ActivityLiquidationQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ActivityLiquidation) GetRecordDate() *ActivityLiquidationRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *ActivityLiquidation) GetSettled() *ActivityLiquidationSettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

func (o *ActivityLiquidation) GetSubtype() *ActivityLiquidationSubtype {
	if o == nil {
		return nil
	}
	return o.Subtype
}

// ActivityMaturityCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityMaturityCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityMaturityCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityMaturityCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityMaturityCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityMaturityCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityMaturityCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityMaturityCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityMaturityCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityMaturityCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityMaturityCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityMaturityCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityMaturityPaymentDate - The anticipated payment date at the depository.
type ActivityMaturityPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityMaturityPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityMaturityPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityMaturityPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityMaturityQuantity - The trade position quantity used to calculate the disbursed amount
type ActivityMaturityQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityMaturityQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityMaturity - Used to record he final repayment, usually in cash, by an issuer for the entire issue, or remaining outstanding securities of a specific security on a specified date and details related to the maturity
type ActivityMaturity struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityMaturityCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityMaturityCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository.
	PaymentDate *ActivityMaturityPaymentDate `json:"payment_date,omitempty"`
	// The trade position quantity used to calculate the disbursed amount
	Quantity *ActivityMaturityQuantity `json:"quantity,omitempty"`
}

func (o *ActivityMaturity) GetCashRate() *ActivityMaturityCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityMaturity) GetCorporateActionGeneralInformation() *ActivityMaturityCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityMaturity) GetPaymentDate() *ActivityMaturityPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *ActivityMaturity) GetQuantity() *ActivityMaturityQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

// ActivityMergerAction - Denotes whether the shares are incoming or outgoing
type ActivityMergerAction string

const (
	ActivityMergerActionActionUnspecified ActivityMergerAction = "ACTION_UNSPECIFIED"
	ActivityMergerActionIncoming          ActivityMergerAction = "INCOMING"
	ActivityMergerActionOutgoing          ActivityMergerAction = "OUTGOING"
	ActivityMergerActionCashInLieu        ActivityMergerAction = "CASH_IN_LIEU"
)

func (e ActivityMergerAction) ToPointer() *ActivityMergerAction {
	return &e
}

// ActivityMergerCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityMergerCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityMergerCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityMergerCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityMergerCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityMergerCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityMergerCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityMergerCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityMergerCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityMergerCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityMergerCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityMergerCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityMergerEffectiveDate - Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
type ActivityMergerEffectiveDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityMergerEffectiveDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityMergerEffectiveDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityMergerEffectiveDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityMergerQuantity - The position on which the corporate action was paid
type ActivityMergerQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityMergerQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityMergerStockRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type ActivityMergerStockRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityMergerStockRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityMergerType - The subtype for the corporate action event
type ActivityMergerType string

const (
	ActivityMergerTypeEventTypeUnspecified ActivityMergerType = "EVENT_TYPE_UNSPECIFIED"
	ActivityMergerTypeCash                 ActivityMergerType = "CASH"
	ActivityMergerTypeStock                ActivityMergerType = "STOCK"
	ActivityMergerTypeCashAndStock         ActivityMergerType = "CASH_AND_STOCK"
)

func (e ActivityMergerType) ToPointer() *ActivityMergerType {
	return &e
}

// ActivityMerger - Used to record the exchange of one company's security for another company's security, cash, or a combination of cash and securities and details related to the merger
type ActivityMerger struct {
	// Denotes whether the shares are incoming or outgoing
	Action *ActivityMergerAction `json:"action,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityMergerCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityMergerCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
	EffectiveDate *ActivityMergerEffectiveDate `json:"effective_date,omitempty"`
	// The position on which the corporate action was paid
	Quantity *ActivityMergerQuantity `json:"quantity,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	StockRate *ActivityMergerStockRate `json:"stock_rate,omitempty"`
	// The subtype for the corporate action event
	Type *ActivityMergerType `json:"type,omitempty"`
}

func (o *ActivityMerger) GetAction() *ActivityMergerAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *ActivityMerger) GetCashRate() *ActivityMergerCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityMerger) GetCorporateActionGeneralInformation() *ActivityMergerCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityMerger) GetEffectiveDate() *ActivityMergerEffectiveDate {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *ActivityMerger) GetQuantity() *ActivityMergerQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ActivityMerger) GetStockRate() *ActivityMergerStockRate {
	if o == nil {
		return nil
	}
	return o.StockRate
}

func (o *ActivityMerger) GetType() *ActivityMergerType {
	if o == nil {
		return nil
	}
	return o.Type
}

// ActivityNameChangeAction - Denotes whether the shares are incoming or outgoing
type ActivityNameChangeAction string

const (
	ActivityNameChangeActionActionUnspecified ActivityNameChangeAction = "ACTION_UNSPECIFIED"
	ActivityNameChangeActionIncoming          ActivityNameChangeAction = "INCOMING"
	ActivityNameChangeActionOutgoing          ActivityNameChangeAction = "OUTGOING"
	ActivityNameChangeActionCashInLieu        ActivityNameChangeAction = "CASH_IN_LIEU"
)

func (e ActivityNameChangeAction) ToPointer() *ActivityNameChangeAction {
	return &e
}

// ActivityNameChangeCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityNameChangeCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityNameChangeCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityNameChangeCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityNameChangeCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityNameChangeCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityNameChangeCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityNameChangeCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityNameChangeCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityNameChangeEffectiveDate - Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
type ActivityNameChangeEffectiveDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityNameChangeEffectiveDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityNameChangeEffectiveDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityNameChangeEffectiveDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityNameChangeQuantity - The position on which the corporate action was paid
type ActivityNameChangeQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityNameChangeQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityNameChange - Used to record changes in the name of a security/securities by the issuer which result in surrendering physical securities or the assigning of a new security identifier which result in new securities being issued and details related to the name changes
type ActivityNameChange struct {
	// Denotes whether the shares are incoming or outgoing
	Action *ActivityNameChangeAction `json:"action,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityNameChangeCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
	EffectiveDate *ActivityNameChangeEffectiveDate `json:"effective_date,omitempty"`
	// The position on which the corporate action was paid
	Quantity *ActivityNameChangeQuantity `json:"quantity,omitempty"`
}

func (o *ActivityNameChange) GetAction() *ActivityNameChangeAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *ActivityNameChange) GetCorporateActionGeneralInformation() *ActivityNameChangeCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityNameChange) GetEffectiveDate() *ActivityNameChangeEffectiveDate {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *ActivityNameChange) GetQuantity() *ActivityNameChangeQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

// ActivityNetAmount - The monetary value of an activity, inclusive of fees, withholding, commisions, etc (Second Money)
type ActivityNetAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityNetAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// NextActivityProcessDate - the process date of the next activity(nil if the next_activity_id is an empty string)
type NextActivityProcessDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *NextActivityProcessDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *NextActivityProcessDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *NextActivityProcessDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// None
type None struct {
}

// ActivityPaymentInKindCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityPaymentInKindCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityPaymentInKindCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityPaymentInKindCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityPaymentInKindCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityPaymentInKindCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityPaymentInKindCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityPaymentInKindCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityPaymentInKindCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityPaymentInKindPaymentDate - The anticipated payment date at the depository
type ActivityPaymentInKindPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityPaymentInKindPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityPaymentInKindPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityPaymentInKindPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityPaymentInKindRecordDate - The date on which positions are recorded in order to calculate entitlement
type ActivityPaymentInKindRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityPaymentInKindRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityPaymentInKindRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityPaymentInKindRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityPaymentInKindSettled - Corresponds to the position's settled quantity
type ActivityPaymentInKindSettled struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityPaymentInKindSettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityPaymentInKindStockRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type ActivityPaymentInKindStockRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityPaymentInKindStockRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityPaymentInKind - Used to record payments on interest-bearing securities where the payment is made in additional securities rather than cash and details related to the payment
type ActivityPaymentInKind struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityPaymentInKindCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *ActivityPaymentInKindPaymentDate `json:"payment_date,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *ActivityPaymentInKindRecordDate `json:"record_date,omitempty"`
	// Corresponds to the position's settled quantity
	Settled *ActivityPaymentInKindSettled `json:"settled,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	StockRate *ActivityPaymentInKindStockRate `json:"stock_rate,omitempty"`
}

func (o *ActivityPaymentInKind) GetCorporateActionGeneralInformation() *ActivityPaymentInKindCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityPaymentInKind) GetPaymentDate() *ActivityPaymentInKindPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *ActivityPaymentInKind) GetRecordDate() *ActivityPaymentInKindRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *ActivityPaymentInKind) GetSettled() *ActivityPaymentInKindSettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

func (o *ActivityPaymentInKind) GetStockRate() *ActivityPaymentInKindStockRate {
	if o == nil {
		return nil
	}
	return o.StockRate
}

// PreviousProcessDate - When populated, the processing_date of the previous_activity_id
type PreviousProcessDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *PreviousProcessDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *PreviousProcessDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *PreviousProcessDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityPrice - The monetary value paid for a given security in a trade Not populated on a currency only movement
type ActivityPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityProcessDate - The date that the activity was booked to the ledger
type ActivityProcessDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityProcessDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityProcessDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityProcessDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityQuantity - The quantity of shares bought, sold, or moved for a given entry/activity Required if activity.state != PENDING
type ActivityQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityRedemptionFullAction - Denotes whether the shares are incoming or outgoing
type ActivityRedemptionFullAction string

const (
	ActivityRedemptionFullActionActionUnspecified ActivityRedemptionFullAction = "ACTION_UNSPECIFIED"
	ActivityRedemptionFullActionIncoming          ActivityRedemptionFullAction = "INCOMING"
	ActivityRedemptionFullActionOutgoing          ActivityRedemptionFullAction = "OUTGOING"
	ActivityRedemptionFullActionCashInLieu        ActivityRedemptionFullAction = "CASH_IN_LIEU"
)

func (e ActivityRedemptionFullAction) ToPointer() *ActivityRedemptionFullAction {
	return &e
}

// ActivityRedemptionFullCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityRedemptionFullCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityRedemptionFullCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityRedemptionFullCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityRedemptionFullCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityRedemptionFullCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityRedemptionFullCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityRedemptionFullCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityRedemptionFullCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityRedemptionFullCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityRedemptionFullCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityRedemptionFullCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityRedemptionFullPaymentDate - The anticipated payment date at the depository
type ActivityRedemptionFullPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityRedemptionFullPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityRedemptionFullPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityRedemptionFullPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityRedemptionFullQuantity - The position on which the corporate action was paid
type ActivityRedemptionFullQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityRedemptionFullQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityRedemptionFullSubtype - The subtype for the corporate action event
type ActivityRedemptionFullSubtype string

const (
	ActivityRedemptionFullSubtypeCorporateactionsubtypeUnspecified  ActivityRedemptionFullSubtype = "CORPORATEACTIONSUBTYPE_UNSPECIFIED"
	ActivityRedemptionFullSubtypeAdditionalDividend                 ActivityRedemptionFullSubtype = "ADDITIONAL_DIVIDEND"
	ActivityRedemptionFullSubtypeApproximateRate                    ActivityRedemptionFullSubtype = "APPROXIMATE_RATE"
	ActivityRedemptionFullSubtypeDividendArrears                    ActivityRedemptionFullSubtype = "DIVIDEND_ARREARS"
	ActivityRedemptionFullSubtypeDividendCancelled                  ActivityRedemptionFullSubtype = "DIVIDEND_CANCELLED"
	ActivityRedemptionFullSubtypeDividendPaymentTaxClassifications  ActivityRedemptionFullSubtype = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS"
	ActivityRedemptionFullSubtypeDividendRescinded                  ActivityRedemptionFullSubtype = "DIVIDEND_RESCINDED"
	ActivityRedemptionFullSubtypeEstimatedReturnOfCapital           ActivityRedemptionFullSubtype = "ESTIMATED_RETURN_OF_CAPITAL"
	ActivityRedemptionFullSubtypeEstimatedReturnOfCapitalPlusIncome ActivityRedemptionFullSubtype = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME"
	ActivityRedemptionFullSubtypeExtraDividend                      ActivityRedemptionFullSubtype = "EXTRA_DIVIDEND"
	ActivityRedemptionFullSubtypeExtraDividendPlusIncome            ActivityRedemptionFullSubtype = "EXTRA_DIVIDEND_PLUS_INCOME"
	ActivityRedemptionFullSubtypeFinalPaymentTransferBooksAreClosed ActivityRedemptionFullSubtype = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED"
	ActivityRedemptionFullSubtypeGrossRate                          ActivityRedemptionFullSubtype = "GROSS_RATE"
	ActivityRedemptionFullSubtypeInitialDividend                    ActivityRedemptionFullSubtype = "INITIAL_DIVIDEND"
	ActivityRedemptionFullSubtypeInitialDividendLongPeriod          ActivityRedemptionFullSubtype = "INITIAL_DIVIDEND_LONG_PERIOD"
	ActivityRedemptionFullSubtypeInitialDividendShortPeriod         ActivityRedemptionFullSubtype = "INITIAL_DIVIDEND_SHORT_PERIOD"
	ActivityRedemptionFullSubtypeLimitedPartnershipDistribution     ActivityRedemptionFullSubtype = "LIMITED_PARTNERSHIP_DISTRIBUTION"
	ActivityRedemptionFullSubtypeLiquidation                        ActivityRedemptionFullSubtype = "LIQUIDATION"
	ActivityRedemptionFullSubtypeNetRate                            ActivityRedemptionFullSubtype = "NET_RATE"
	ActivityRedemptionFullSubtypeOther                              ActivityRedemptionFullSubtype = "OTHER"
	ActivityRedemptionFullSubtypeProceedsFromSaleOfRights           ActivityRedemptionFullSubtype = "PROCEEDS_FROM_SALE_OF_RIGHTS"
	ActivityRedemptionFullSubtypeRegularDividend                    ActivityRedemptionFullSubtype = "REGULAR_DIVIDEND"
	ActivityRedemptionFullSubtypeReturnOfCapital                    ActivityRedemptionFullSubtype = "RETURN_OF_CAPITAL"
	ActivityRedemptionFullSubtypeReturnOfCapitalPlusIncome          ActivityRedemptionFullSubtype = "RETURN_OF_CAPITAL_PLUS_INCOME"
	ActivityRedemptionFullSubtypeSpecialDividend                    ActivityRedemptionFullSubtype = "SPECIAL_DIVIDEND"
	ActivityRedemptionFullSubtypeSpecialDividendPlusIncome          ActivityRedemptionFullSubtype = "SPECIAL_DIVIDEND_PLUS_INCOME"
	ActivityRedemptionFullSubtypeYearEndDividend                    ActivityRedemptionFullSubtype = "YEAR_END_DIVIDEND"
	ActivityRedemptionFullSubtypeYearEndDividendPlusIncome          ActivityRedemptionFullSubtype = "YEAR_END_DIVIDEND_PLUS_INCOME"
	ActivityRedemptionFullSubtypePartial                            ActivityRedemptionFullSubtype = "PARTIAL"
	ActivityRedemptionFullSubtypeFull                               ActivityRedemptionFullSubtype = "FULL"
	ActivityRedemptionFullSubtypeMaturity                           ActivityRedemptionFullSubtype = "MATURITY"
	ActivityRedemptionFullSubtypeTermination                        ActivityRedemptionFullSubtype = "TERMINATION"
	ActivityRedemptionFullSubtypeRedemptionOfWarrants               ActivityRedemptionFullSubtype = "REDEMPTION_OF_WARRANTS"
)

func (e ActivityRedemptionFullSubtype) ToPointer() *ActivityRedemptionFullSubtype {
	return &e
}

// ActivityRedemptionFull - Used to record the redemption of a security for cash in its entirety for which the holders receive the principal amount of the security and details related to the redemption
type ActivityRedemptionFull struct {
	// Denotes whether the shares are incoming or outgoing
	Action *ActivityRedemptionFullAction `json:"action,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityRedemptionFullCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityRedemptionFullCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *ActivityRedemptionFullPaymentDate `json:"payment_date,omitempty"`
	// The position on which the corporate action was paid
	Quantity *ActivityRedemptionFullQuantity `json:"quantity,omitempty"`
	// The subtype for the corporate action event
	Subtype *ActivityRedemptionFullSubtype `json:"subtype,omitempty"`
}

func (o *ActivityRedemptionFull) GetAction() *ActivityRedemptionFullAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *ActivityRedemptionFull) GetCashRate() *ActivityRedemptionFullCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityRedemptionFull) GetCorporateActionGeneralInformation() *ActivityRedemptionFullCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityRedemptionFull) GetPaymentDate() *ActivityRedemptionFullPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *ActivityRedemptionFull) GetQuantity() *ActivityRedemptionFullQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ActivityRedemptionFull) GetSubtype() *ActivityRedemptionFullSubtype {
	if o == nil {
		return nil
	}
	return o.Subtype
}

// ActivityRedemptionPartialAction - Corresponds to whether the entry is incoming or outgoing
type ActivityRedemptionPartialAction string

const (
	ActivityRedemptionPartialActionActionUnspecified ActivityRedemptionPartialAction = "ACTION_UNSPECIFIED"
	ActivityRedemptionPartialActionIncoming          ActivityRedemptionPartialAction = "INCOMING"
	ActivityRedemptionPartialActionOutgoing          ActivityRedemptionPartialAction = "OUTGOING"
	ActivityRedemptionPartialActionCashInLieu        ActivityRedemptionPartialAction = "CASH_IN_LIEU"
)

func (e ActivityRedemptionPartialAction) ToPointer() *ActivityRedemptionPartialAction {
	return &e
}

// ActivityRedemptionPartialCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityRedemptionPartialCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityRedemptionPartialCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityRedemptionPartialCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityRedemptionPartialCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityRedemptionPartialCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityRedemptionPartialCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityRedemptionPartialCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityRedemptionPartialCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityRedemptionPartialCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityRedemptionPartialCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityRedemptionPartialCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityRedemptionPartialPaymentDate - The anticipated payment date at the depository
type ActivityRedemptionPartialPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityRedemptionPartialPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityRedemptionPartialPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityRedemptionPartialPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityRedemptionPartialQuantity - Corresponds to the position's trade quantity
type ActivityRedemptionPartialQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityRedemptionPartialQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityRedemptionPartial - Used when securities are redeemed by the issuer for cash, in part, before their scheduled maturity date and details related to the redemption. The outstanding amount of securities will be proportionally reduced based on a specific percentage of holding
type ActivityRedemptionPartial struct {
	// Corresponds to whether the entry is incoming or outgoing
	Action *ActivityRedemptionPartialAction `json:"action,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityRedemptionPartialCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityRedemptionPartialCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *ActivityRedemptionPartialPaymentDate `json:"payment_date,omitempty"`
	// Corresponds to the position's trade quantity
	Quantity *ActivityRedemptionPartialQuantity `json:"quantity,omitempty"`
}

func (o *ActivityRedemptionPartial) GetAction() *ActivityRedemptionPartialAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *ActivityRedemptionPartial) GetCashRate() *ActivityRedemptionPartialCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityRedemptionPartial) GetCorporateActionGeneralInformation() *ActivityRedemptionPartialCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityRedemptionPartial) GetPaymentDate() *ActivityRedemptionPartialPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *ActivityRedemptionPartial) GetQuantity() *ActivityRedemptionPartialQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

// ActivityReverseStockSplitAction - Denotes whether the shares are incoming or outgoing
type ActivityReverseStockSplitAction string

const (
	ActivityReverseStockSplitActionActionUnspecified ActivityReverseStockSplitAction = "ACTION_UNSPECIFIED"
	ActivityReverseStockSplitActionIncoming          ActivityReverseStockSplitAction = "INCOMING"
	ActivityReverseStockSplitActionOutgoing          ActivityReverseStockSplitAction = "OUTGOING"
	ActivityReverseStockSplitActionCashInLieu        ActivityReverseStockSplitAction = "CASH_IN_LIEU"
)

func (e ActivityReverseStockSplitAction) ToPointer() *ActivityReverseStockSplitAction {
	return &e
}

// ActivityReverseStockSplitCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityReverseStockSplitCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityReverseStockSplitCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityReverseStockSplitCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityReverseStockSplitCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityReverseStockSplitCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityReverseStockSplitCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityReverseStockSplitCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityReverseStockSplitCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityReverseStockSplitCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityReverseStockSplitCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityReverseStockSplitCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityReverseStockSplitEffectiveDate - Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
type ActivityReverseStockSplitEffectiveDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityReverseStockSplitEffectiveDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityReverseStockSplitEffectiveDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityReverseStockSplitEffectiveDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityFactorDenominator - The old rate of the security
type ActivityFactorDenominator struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityFactorDenominator) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityFactorNumerator - The new rate of the security
type ActivityFactorNumerator struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityFactorNumerator) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityReverseStockSplitQuantity - The position on which the corporate action was paid
type ActivityReverseStockSplitQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityReverseStockSplitQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityReverseStockSplit - Used to record the exchange of a company's security for the same company's new security at a preset rate and details related to the reverse stock split
type ActivityReverseStockSplit struct {
	// Denotes whether the shares are incoming or outgoing
	Action *ActivityReverseStockSplitAction `json:"action,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityReverseStockSplitCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityReverseStockSplitCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
	EffectiveDate *ActivityReverseStockSplitEffectiveDate `json:"effective_date,omitempty"`
	// The old rate of the security
	FactorDenominator *ActivityFactorDenominator `json:"factor_denominator,omitempty"`
	// The new rate of the security
	FactorNumerator *ActivityFactorNumerator `json:"factor_numerator,omitempty"`
	// The position on which the corporate action was paid
	Quantity *ActivityReverseStockSplitQuantity `json:"quantity,omitempty"`
}

func (o *ActivityReverseStockSplit) GetAction() *ActivityReverseStockSplitAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *ActivityReverseStockSplit) GetCashRate() *ActivityReverseStockSplitCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityReverseStockSplit) GetCorporateActionGeneralInformation() *ActivityReverseStockSplitCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityReverseStockSplit) GetEffectiveDate() *ActivityReverseStockSplitEffectiveDate {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *ActivityReverseStockSplit) GetFactorDenominator() *ActivityFactorDenominator {
	if o == nil {
		return nil
	}
	return o.FactorDenominator
}

func (o *ActivityReverseStockSplit) GetFactorNumerator() *ActivityFactorNumerator {
	if o == nil {
		return nil
	}
	return o.FactorNumerator
}

func (o *ActivityReverseStockSplit) GetQuantity() *ActivityReverseStockSplitQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

// ActivityRightsDistributionCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityRightsDistributionCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityRightsDistributionCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityRightsDistributionCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityRightsDistributionCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityRightsDistributionCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityRightsDistributionCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityRightsDistributionCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityRightsDistributionCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityRightsDistributionPaymentDate - The anticipated payment date at the depository
type ActivityRightsDistributionPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityRightsDistributionPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityRightsDistributionPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityRightsDistributionPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityRightsDistributionRecordDate - The date on which positions are recorded in order to calculate entitlement
type ActivityRightsDistributionRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityRightsDistributionRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityRightsDistributionRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityRightsDistributionRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityRightsDistributionSettled - The accounts settled position for which the corporate action was paid
type ActivityRightsDistributionSettled struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityRightsDistributionSettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityRightsDistribution - Used to record distributions to common stock holders of a company that grant the option to purchase new or additional securities of the same company during a predetermined time period at a predetermined price and details related to the rights distribution
type ActivityRightsDistribution struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityRightsDistributionCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *ActivityRightsDistributionPaymentDate `json:"payment_date,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *ActivityRightsDistributionRecordDate `json:"record_date,omitempty"`
	// The accounts settled position for which the corporate action was paid
	Settled *ActivityRightsDistributionSettled `json:"settled,omitempty"`
}

func (o *ActivityRightsDistribution) GetCorporateActionGeneralInformation() *ActivityRightsDistributionCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityRightsDistribution) GetPaymentDate() *ActivityRightsDistributionPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *ActivityRightsDistribution) GetRecordDate() *ActivityRightsDistributionRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *ActivityRightsDistribution) GetSettled() *ActivityRightsDistributionSettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

// ActivityRightsSubscriptionCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityRightsSubscriptionCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityRightsSubscriptionCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityRightsSubscriptionCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityRightsSubscriptionCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityRightsSubscriptionCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityRightsSubscriptionCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityRightsSubscriptionCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityRightsSubscriptionCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityRightsSubscription - Used to record the purchase of new or additional securities and details related to the subscription. Rights are often tradable in a secondary market
type ActivityRightsSubscription struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityRightsSubscriptionCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
}

func (o *ActivityRightsSubscription) GetCorporateActionGeneralInformation() *ActivityRightsSubscriptionCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

// ActivityRoundingAdjustment - Used to record rounding adjustments when the sum(price x quantity) of all entries for a given activity do not equal the price x quantity of the fully formed activity record
type ActivityRoundingAdjustment struct {
	// Free form text field providing reason for rounding
	RoundingReason *string `json:"rounding_reason,omitempty"`
}

func (o *ActivityRoundingAdjustment) GetRoundingReason() *string {
	if o == nil {
		return nil
	}
	return o.RoundingReason
}

// RoundingAmount - the difference between the aggregation of gross_amount from the trade entries and the rounded gross_amount of the fully formed activity This amount can also be found as a rounding_adjustment entry
type RoundingAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RoundingAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivitySaleOfRightsCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivitySaleOfRightsCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivitySaleOfRightsCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivitySaleOfRightsCorporateActionGeneralInformation - Common fields for corporate actions
type ActivitySaleOfRightsCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivitySaleOfRightsCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivitySaleOfRightsCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivitySaleOfRightsCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivitySaleOfRightsCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivitySaleOfRightsCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivitySaleOfRightsCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivitySaleOfRightsCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivitySaleOfRightsPaymentDate - The anticipated payment date at the depository
type ActivitySaleOfRightsPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivitySaleOfRightsPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivitySaleOfRightsPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivitySaleOfRightsPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivitySaleOfRightsRecordDate - The date on which positions are recorded in order to calculate entitlement
type ActivitySaleOfRightsRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivitySaleOfRightsRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivitySaleOfRightsRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivitySaleOfRightsRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivitySaleOfRightsSettled - The accounts settled position for which the corporate action was paid
type ActivitySaleOfRightsSettled struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivitySaleOfRightsSettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivitySaleOfRights - Used to record payments made by the issuer to security holders when the security is subject to redemptions other than full and partial calls (e.g., early CD redemptions) and details related to the sale of rights
type ActivitySaleOfRights struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivitySaleOfRightsCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivitySaleOfRightsCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *ActivitySaleOfRightsPaymentDate `json:"payment_date,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *ActivitySaleOfRightsRecordDate `json:"record_date,omitempty"`
	// The accounts settled position for which the corporate action was paid
	Settled *ActivitySaleOfRightsSettled `json:"settled,omitempty"`
}

func (o *ActivitySaleOfRights) GetCashRate() *ActivitySaleOfRightsCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivitySaleOfRights) GetCorporateActionGeneralInformation() *ActivitySaleOfRightsCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivitySaleOfRights) GetPaymentDate() *ActivitySaleOfRightsPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *ActivitySaleOfRights) GetRecordDate() *ActivitySaleOfRightsRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *ActivitySaleOfRights) GetSettled() *ActivitySaleOfRightsSettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

// ActivitySettleDate - The date a given activity will officially settle
type ActivitySettleDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivitySettleDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivitySettleDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivitySettleDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivitySide - Denotes whether the trade is a buy or sell
type ActivitySide string

const (
	ActivitySideSideUnspecified ActivitySide = "SIDE_UNSPECIFIED"
	ActivitySideBuy             ActivitySide = "BUY"
	ActivitySideSell            ActivitySide = "SELL"
)

func (e ActivitySide) ToPointer() *ActivitySide {
	return &e
}

// ActivitySideModifier - Indicates whether the trade is opening a new position or closing an existing position
type ActivitySideModifier string

const (
	ActivitySideModifierSideModifierUnspecified ActivitySideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	ActivitySideModifierShort                   ActivitySideModifier = "SHORT"
	ActivitySideModifierShortExempt             ActivitySideModifier = "SHORT_EXEMPT"
	ActivitySideModifierShortCover              ActivitySideModifier = "SHORT_COVER"
	ActivitySideModifierOpen                    ActivitySideModifier = "OPEN"
	ActivitySideModifierClose                   ActivitySideModifier = "CLOSE"
)

func (e ActivitySideModifier) ToPointer() *ActivitySideModifier {
	return &e
}

// ActivitySpinoffCorporateActionGeneralInformation - Common fields for corporate actions
type ActivitySpinoffCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivitySpinoffCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivitySpinoffCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivitySpinoffCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivitySpinoffCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivitySpinoffCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivitySpinoffCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivitySpinoffCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityPayDate - The anticipated payment date at the depository
type ActivityPayDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityPayDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityPayDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityPayDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivitySpinoffQuantity - The position on which the corporate action was paid
type ActivitySpinoffQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivitySpinoffQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivitySpinoffRecordDate - The date on which positions are recorded in order to calculate entitlement
type ActivitySpinoffRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivitySpinoffRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivitySpinoffRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivitySpinoffRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivitySpinoff - Used to record a distribution of subsidiary securities to the shareholders of the parent company without a surrender of securities or payment and details related to the spinoff. A spin-off represents a form of divestiture resulting in an independent company
type ActivitySpinoff struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivitySpinoffCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PayDate *ActivityPayDate `json:"pay_date,omitempty"`
	// The position on which the corporate action was paid
	Quantity *ActivitySpinoffQuantity `json:"quantity,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *ActivitySpinoffRecordDate `json:"record_date,omitempty"`
}

func (o *ActivitySpinoff) GetCorporateActionGeneralInformation() *ActivitySpinoffCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivitySpinoff) GetPayDate() *ActivityPayDate {
	if o == nil {
		return nil
	}
	return o.PayDate
}

func (o *ActivitySpinoff) GetQuantity() *ActivitySpinoffQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ActivitySpinoff) GetRecordDate() *ActivitySpinoffRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

// ActivityState - The state of the activity
type ActivityState string

const (
	ActivityStateActivityStateUnspecified ActivityState = "ACTIVITY_STATE_UNSPECIFIED"
	ActivityStatePending                  ActivityState = "PENDING"
	ActivityStateCurrent                  ActivityState = "CURRENT"
	ActivityStateCanceled                 ActivityState = "CANCELED"
	ActivityStateRebooked                 ActivityState = "REBOOKED"
	ActivityStateRebook                   ActivityState = "REBOOK"
	ActivityStateCancel                   ActivityState = "CANCEL"
)

func (e ActivityState) ToPointer() *ActivityState {
	return &e
}

// ActivityStockDividendCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityStockDividendCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityStockDividendCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityStockDividendCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityStockDividendCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityStockDividendCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityStockDividendCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityStockDividendCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityStockDividendCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityStockDividendPayDate - The anticipated payment date at the depository
type ActivityStockDividendPayDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityStockDividendPayDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityStockDividendPayDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityStockDividendPayDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityStockDividendQuantity - The position on which the corporate action was paid
type ActivityStockDividendQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityStockDividendQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type ActivityRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityStockDividendRecordDate - The date on which positions are recorded in order to calculate entitlement
type ActivityStockDividendRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityStockDividendRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityStockDividendRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityStockDividendRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityStockDividend - Used to record a dividend paid to shareholders in the form of shares of stock in either the issuing company or in another company and details related to the stock dividend
type ActivityStockDividend struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityStockDividendCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PayDate *ActivityStockDividendPayDate `json:"pay_date,omitempty"`
	// The position on which the corporate action was paid
	Quantity *ActivityStockDividendQuantity `json:"quantity,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	Rate *ActivityRate `json:"rate,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *ActivityStockDividendRecordDate `json:"record_date,omitempty"`
}

func (o *ActivityStockDividend) GetCorporateActionGeneralInformation() *ActivityStockDividendCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityStockDividend) GetPayDate() *ActivityStockDividendPayDate {
	if o == nil {
		return nil
	}
	return o.PayDate
}

func (o *ActivityStockDividend) GetQuantity() *ActivityStockDividendQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ActivityStockDividend) GetRate() *ActivityRate {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *ActivityStockDividend) GetRecordDate() *ActivityStockDividendRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

// ActivityStockSplitCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityStockSplitCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityStockSplitCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityStockSplitCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityStockSplitCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityStockSplitCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityStockSplitCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityStockSplitCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityStockSplitCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityStockSplitFactorDenominator - The old rate of the security
type ActivityStockSplitFactorDenominator struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityStockSplitFactorDenominator) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityStockSplitFactorNumerator - The new rate of the security
type ActivityStockSplitFactorNumerator struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityStockSplitFactorNumerator) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityStockSplitPayDate - The anticipated payment date at the depository
type ActivityStockSplitPayDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityStockSplitPayDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityStockSplitPayDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityStockSplitPayDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityStockSplitQuantity - The position on which the corporate action was paid
type ActivityStockSplitQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityStockSplitQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityStockSplitRecordDate - The date on which positions are recorded in order to calculate entitlement
type ActivityStockSplitRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityStockSplitRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityStockSplitRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityStockSplitRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityStockSplit - Used to record the increase in a company's number of outstanding shares of stock without any change in the shareholder's equity or the aggregate market value at the time of the split and details related to the stock split
type ActivityStockSplit struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityStockSplitCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The old rate of the security
	FactorDenominator *ActivityStockSplitFactorDenominator `json:"factor_denominator,omitempty"`
	// The new rate of the security
	FactorNumerator *ActivityStockSplitFactorNumerator `json:"factor_numerator,omitempty"`
	// The anticipated payment date at the depository
	PayDate *ActivityStockSplitPayDate `json:"pay_date,omitempty"`
	// The position on which the corporate action was paid
	Quantity *ActivityStockSplitQuantity `json:"quantity,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *ActivityStockSplitRecordDate `json:"record_date,omitempty"`
}

func (o *ActivityStockSplit) GetCorporateActionGeneralInformation() *ActivityStockSplitCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityStockSplit) GetFactorDenominator() *ActivityStockSplitFactorDenominator {
	if o == nil {
		return nil
	}
	return o.FactorDenominator
}

func (o *ActivityStockSplit) GetFactorNumerator() *ActivityStockSplitFactorNumerator {
	if o == nil {
		return nil
	}
	return o.FactorNumerator
}

func (o *ActivityStockSplit) GetPayDate() *ActivityStockSplitPayDate {
	if o == nil {
		return nil
	}
	return o.PayDate
}

func (o *ActivityStockSplit) GetQuantity() *ActivityStockSplitQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ActivityStockSplit) GetRecordDate() *ActivityStockSplitRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

// ActivitySweepAction - Indicates purchase or redemption of the sweep asset
type ActivitySweepAction string

const (
	ActivitySweepActionSweepActionUnspecified ActivitySweepAction = "SWEEP_ACTION_UNSPECIFIED"
	ActivitySweepActionPurchase               ActivitySweepAction = "PURCHASE"
	ActivitySweepActionRedemption             ActivitySweepAction = "REDEMPTION"
)

func (e ActivitySweepAction) ToPointer() *ActivitySweepAction {
	return &e
}

// ActivitySweepType - Sweep program that cash is being swept to/ from
type ActivitySweepType string

const (
	ActivitySweepTypeSweepTypeUnspecified ActivitySweepType = "SWEEP_TYPE_UNSPECIFIED"
	ActivitySweepTypeFdic                 ActivitySweepType = "FDIC"
	ActivitySweepTypeMoneyMarket          ActivitySweepType = "MONEY_MARKET"
)

func (e ActivitySweepType) ToPointer() *ActivitySweepType {
	return &e
}

// ActivitySweep - Used to record sweeps from a cash balance to an alternative asset or vice versa and details related to the sweep
type ActivitySweep struct {
	// Indicates purchase or redemption of the sweep asset
	Action *ActivitySweepAction `json:"action,omitempty"`
	// Indicates the sweep was performed books were closed to prevent an investor account from carrying a negative cash balance overnight
	EodRedemption *bool `json:"eod_redemption,omitempty"`
	// Sweep program that cash is being swept to/ from
	Type *ActivitySweepType `json:"type,omitempty"`
}

func (o *ActivitySweep) GetAction() *ActivitySweepAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *ActivitySweep) GetEodRedemption() *bool {
	if o == nil {
		return nil
	}
	return o.EodRedemption
}

func (o *ActivitySweep) GetType() *ActivitySweepType {
	if o == nil {
		return nil
	}
	return o.Type
}

// ActivityTenderOfferCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type ActivityTenderOfferCashRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityTenderOfferCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityTenderOfferCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityTenderOfferCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityTenderOfferCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityTenderOfferCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityTenderOfferCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityTenderOfferCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityTenderOfferCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityTenderOfferCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityTenderOfferCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityTenderOfferType - the type of tender offer
type ActivityTenderOfferType string

const (
	ActivityTenderOfferTypeTenderOfferTypeUnspecified ActivityTenderOfferType = "TENDER_OFFER_TYPE_UNSPECIFIED"
	ActivityTenderOfferTypeOddLotTender               ActivityTenderOfferType = "ODD_LOT_TENDER"
	ActivityTenderOfferTypeDutchAuction               ActivityTenderOfferType = "DUTCH_AUCTION"
)

func (e ActivityTenderOfferType) ToPointer() *ActivityTenderOfferType {
	return &e
}

// ActivityTenderOffer - Used to record the sale of securities for a specified price due to an offer from the issuer or a third party and details related to the tender offer
type ActivityTenderOffer struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *ActivityTenderOfferCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityTenderOfferCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// the type of tender offer
	TenderOfferType *ActivityTenderOfferType `json:"tender_offer_type,omitempty"`
}

func (o *ActivityTenderOffer) GetCashRate() *ActivityTenderOfferCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *ActivityTenderOffer) GetCorporateActionGeneralInformation() *ActivityTenderOfferCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityTenderOffer) GetTenderOfferType() *ActivityTenderOfferType {
	if o == nil {
		return nil
	}
	return o.TenderOfferType
}

// ActivityTradeBrokerCapacity - Used to calculate broadridge blotter code
type ActivityTradeBrokerCapacity string

const (
	ActivityTradeBrokerCapacityCapacityUnspecified ActivityTradeBrokerCapacity = "CAPACITY_UNSPECIFIED"
	ActivityTradeBrokerCapacityAgency              ActivityTradeBrokerCapacity = "AGENCY"
	ActivityTradeBrokerCapacityPrincipal           ActivityTradeBrokerCapacity = "PRINCIPAL"
	ActivityTradeBrokerCapacityMixed               ActivityTradeBrokerCapacity = "MIXED"
)

func (e ActivityTradeBrokerCapacity) ToPointer() *ActivityTradeBrokerCapacity {
	return &e
}

// ActivityTradePrevailingMarketPrice - The price for the instrument that is prevailing in the market.
type ActivityTradePrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityTradePrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityTradePriceAdjustmentAmount - Total monetary value of the price_adjustment
type ActivityTradePriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityTradePriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityTradePriceAdjustmentPercent - The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
type ActivityTradePriceAdjustmentPercent struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityTradePriceAdjustmentPercent) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityTradePriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security
type ActivityTradePriceAdjustmentType string

const (
	ActivityTradePriceAdjustmentTypePriceAdjustmentTypeUnspecified ActivityTradePriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	ActivityTradePriceAdjustmentTypeMarkup                         ActivityTradePriceAdjustmentType = "MARKUP"
	ActivityTradePriceAdjustmentTypeMarkdown                       ActivityTradePriceAdjustmentType = "MARKDOWN"
	ActivityTradePriceAdjustmentTypeSalesLoad                      ActivityTradePriceAdjustmentType = "SALES_LOAD"
)

func (e ActivityTradePriceAdjustmentType) ToPointer() *ActivityTradePriceAdjustmentType {
	return &e
}

// ActivityTradePriceAdjustmentRecord - Information about any price adjustments applied to the security
type ActivityTradePriceAdjustmentRecord struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *ActivityTradePriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
	PriceAdjustmentPercent *ActivityTradePriceAdjustmentPercent `json:"price_adjustment_percent,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security
	PriceAdjustmentType *ActivityTradePriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *ActivityTradePriceAdjustmentRecord) GetPriceAdjustmentAmount() *ActivityTradePriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *ActivityTradePriceAdjustmentRecord) GetPriceAdjustmentPercent() *ActivityTradePriceAdjustmentPercent {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentPercent
}

func (o *ActivityTradePriceAdjustmentRecord) GetPriceAdjustmentType() *ActivityTradePriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// ActivityTrade - Used to record the the execution of a buy or sell transaction resulting in the transfer of securities and corresponding payment and details related to the trade
type ActivityTrade struct {
	// Free form text field containing additional information for a trade
	AdditionalInstructions []string `json:"additional_instructions,omitempty"`
	// Max Length 100 characters. Alternate order id from the street used for FRAC trades
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// uuid assigned by the Booking API if a trade belongs to an allocation
	BookingAPITradeAllocationID *string `json:"booking_api_trade_allocation_id,omitempty"`
	// uuid assigned by the Booking API to all trades
	BookingAPITradeID *string `json:"booking_api_trade_id,omitempty"`
	// Executing broker of the trade
	Broker *string `json:"broker,omitempty"`
	// Used to calculate broadridge blotter code
	BrokerCapacity *ActivityTradeBrokerCapacity `json:"broker_capacity,omitempty"`
	// Free form text submitted by the client for internal purposes
	ClientMemos []string `json:"client_memos,omitempty"`
	// 32 characters. The client order ID from the order submitted
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// MIC code for the exchange
	Exchange *string `json:"exchange,omitempty"`
	// Execution id from the street
	ExecutionID *string `json:"execution_id,omitempty"`
	// Indicates whether Apex is the clearing broker for this trade. When false, indicates Apex is the clearing broker
	ExecutionOnly *bool `json:"execution_only,omitempty"`
	// Max Length 100 characters. External system id provided by a client
	ExternalID *string `json:"external_id,omitempty"`
	// The confirmation number associated with a mutual fund trade
	FundConfirmationNumber *string `json:"fund_confirmation_number,omitempty"`
	// Max length 100 characters. Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system. Used as the client_order_id on new order singles sent downstream of the trading-gateway
	GatewayClientOrderID *string `json:"gateway_client_order_id,omitempty"`
	// If set to true, indicates the trade should be omitted from client billing
	InternalError *bool `json:"internal_error,omitempty"`
	// Set on penny-for-the-lot trades
	IsWriteoff *bool `json:"is_writeoff,omitempty"`
	// Repeated record containing information about the tax lots, if specified
	Lots []Lot `json:"lots,omitempty"`
	// Max Length 100 characters. Internally generated order id that is returned to client on exec reports
	OrderID *string `json:"order_id,omitempty"`
	// The price for the instrument that is prevailing in the market.
	PrevailingMarketPrice *ActivityTradePrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Information about any price adjustments applied to the security
	PriceAdjustmentRecord *ActivityTradePriceAdjustmentRecord `json:"price_adjustment_record,omitempty"`
	// Used to calculate broadridge blotter code
	Route *string `json:"route,omitempty"`
	// The special instructions for a trade
	SpecialInstructions []string `json:"special_instructions,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the particular issue
	SymbolDescription *string `json:"symbol_description,omitempty"`
	// Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
	WhenIssued *bool `json:"when_issued,omitempty"`
	// The yields associated with a fixed income trade. only valid if the SecurityType is FIXED_INCOME.
	YieldRecords []YieldRecord `json:"yield_records,omitempty"`
}

func (o *ActivityTrade) GetAdditionalInstructions() []string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *ActivityTrade) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *ActivityTrade) GetBookingAPITradeAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeAllocationID
}

func (o *ActivityTrade) GetBookingAPITradeID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeID
}

func (o *ActivityTrade) GetBroker() *string {
	if o == nil {
		return nil
	}
	return o.Broker
}

func (o *ActivityTrade) GetBrokerCapacity() *ActivityTradeBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *ActivityTrade) GetClientMemos() []string {
	if o == nil {
		return nil
	}
	return o.ClientMemos
}

func (o *ActivityTrade) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *ActivityTrade) GetExchange() *string {
	if o == nil {
		return nil
	}
	return o.Exchange
}

func (o *ActivityTrade) GetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionID
}

func (o *ActivityTrade) GetExecutionOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ExecutionOnly
}

func (o *ActivityTrade) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *ActivityTrade) GetFundConfirmationNumber() *string {
	if o == nil {
		return nil
	}
	return o.FundConfirmationNumber
}

func (o *ActivityTrade) GetGatewayClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.GatewayClientOrderID
}

func (o *ActivityTrade) GetInternalError() *bool {
	if o == nil {
		return nil
	}
	return o.InternalError
}

func (o *ActivityTrade) GetIsWriteoff() *bool {
	if o == nil {
		return nil
	}
	return o.IsWriteoff
}

func (o *ActivityTrade) GetLots() []Lot {
	if o == nil {
		return nil
	}
	return o.Lots
}

func (o *ActivityTrade) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *ActivityTrade) GetPrevailingMarketPrice() *ActivityTradePrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *ActivityTrade) GetPriceAdjustmentRecord() *ActivityTradePriceAdjustmentRecord {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentRecord
}

func (o *ActivityTrade) GetRoute() *string {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *ActivityTrade) GetSpecialInstructions() []string {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *ActivityTrade) GetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.SymbolDescription
}

func (o *ActivityTrade) GetWhenIssued() *bool {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

func (o *ActivityTrade) GetYieldRecords() []YieldRecord {
	if o == nil {
		return nil
	}
	return o.YieldRecords
}

// ActivityTransferType - Provides more granular detail on the purpose of transfer
type ActivityTransferType string

const (
	ActivityTransferTypeTransferTypeUnspecified ActivityTransferType = "TRANSFER_TYPE_UNSPECIFIED"
	ActivityTransferTypeTransferConversion      ActivityTransferType = "TRANSFER_CONVERSION"
	ActivityTransferTypeDeconversion            ActivityTransferType = "DECONVERSION"
	ActivityTransferTypeMigration               ActivityTransferType = "MIGRATION"
	ActivityTransferTypeManualAdjustment        ActivityTransferType = "MANUAL_ADJUSTMENT"
	ActivityTransferTypeInternalConversion      ActivityTransferType = "INTERNAL_CONVERSION"
)

func (e ActivityTransferType) ToPointer() *ActivityTransferType {
	return &e
}

// ActivityTransfer - Used to record more generic transfers of funds or securities and details related to the transfer. The transfer type and activity_description can be used to provide more specific context
type ActivityTransfer struct {
	// Free form text for additional sweep messages or instructions
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// String field that can be populated with the broker dealer undergoing a clearing platform conversion. Used for activity description purposes
	ClientBrokerage *string `json:"client_brokerage,omitempty"`
	// Provides more granular detail on the purpose of transfer
	TransferType *ActivityTransferType `json:"transfer_type,omitempty"`
}

func (o *ActivityTransfer) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *ActivityTransfer) GetClientBrokerage() *string {
	if o == nil {
		return nil
	}
	return o.ClientBrokerage
}

func (o *ActivityTransfer) GetTransferType() *ActivityTransferType {
	if o == nil {
		return nil
	}
	return o.TransferType
}

// ActivityType - The type of activity this is
type ActivityType string

const (
	ActivityTypeTypeUnspecified ActivityType = "TYPE_UNSPECIFIED"
	ActivityTypeTrade           ActivityType = "TRADE"
	ActivityTypeMovement        ActivityType = "MOVEMENT"
	ActivityTypeMemo            ActivityType = "MEMO"
	ActivityTypeCorporateAction ActivityType = "CORPORATE_ACTION"
)

func (e ActivityType) ToPointer() *ActivityType {
	return &e
}

// ActivityUnitSplitCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityUnitSplitCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityUnitSplitCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityUnitSplitCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityUnitSplitCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityUnitSplitCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityUnitSplitCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityUnitSplitCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityUnitSplitCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityUnitSplitStockRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type ActivityUnitSplitStockRate struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ActivityUnitSplitStockRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ActivityUnitSplit - Used to record increases in the number of units outstanding through the issuing of more units to current shareholders and details related to the unit split
type ActivityUnitSplit struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityUnitSplitCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	StockRate *ActivityUnitSplitStockRate `json:"stock_rate,omitempty"`
}

func (o *ActivityUnitSplit) GetCorporateActionGeneralInformation() *ActivityUnitSplitCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityUnitSplit) GetStockRate() *ActivityUnitSplitStockRate {
	if o == nil {
		return nil
	}
	return o.StockRate
}

// ActivityWarrantExerciseCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityWarrantExerciseCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityWarrantExerciseCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityWarrantExerciseCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityWarrantExerciseCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityWarrantExerciseCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityWarrantExerciseCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityWarrantExerciseCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityWarrantExerciseCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityWarrantExercise - Used to record the exchange of warrants for shares and details related to the warrant exercise. The exercise will commonly require a payment based upon a pre-determined value and time and details related to the warrant exercise
type ActivityWarrantExercise struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityWarrantExerciseCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
}

func (o *ActivityWarrantExercise) GetCorporateActionGeneralInformation() *ActivityWarrantExerciseCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

// ActivityDistributionType - Categorizes the withdrawal to indicate whether special handling of the transaction is needed elsewhere
type ActivityDistributionType string

const (
	ActivityDistributionTypeDistributionTypeUnspecified                ActivityDistributionType = "DISTRIBUTION_TYPE_UNSPECIFIED"
	ActivityDistributionTypePremature                                  ActivityDistributionType = "PREMATURE"
	ActivityDistributionTypeDisability                                 ActivityDistributionType = "DISABILITY"
	ActivityDistributionTypeDeath                                      ActivityDistributionType = "DEATH"
	ActivityDistributionTypeNormal                                     ActivityDistributionType = "NORMAL"
	ActivityDistributionTypeSosepp                                     ActivityDistributionType = "SOSEPP"
	ActivityDistributionTypeRolloverToQualifiedPlan                    ActivityDistributionType = "ROLLOVER_TO_QUALIFIED_PLAN"
	ActivityDistributionTypeRolloverToIra                              ActivityDistributionType = "ROLLOVER_TO_IRA"
	ActivityDistributionTypeDistTransfer                               ActivityDistributionType = "DIST_TRANSFER"
	ActivityDistributionTypeExcessContributionRemovalBeforeTaxDeadline ActivityDistributionType = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE"
	ActivityDistributionTypeExcessContributionRemovalAfterTaxDeadline  ActivityDistributionType = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE"
	ActivityDistributionTypeRecharacterizationPriorYear                ActivityDistributionType = "RECHARACTERIZATION_PRIOR_YEAR"
	ActivityDistributionTypeRecharacterizationCurrentYear              ActivityDistributionType = "RECHARACTERIZATION_CURRENT_YEAR"
	ActivityDistributionTypeDistConversion                             ActivityDistributionType = "DIST_CONVERSION"
	ActivityDistributionTypeManagementFee                              ActivityDistributionType = "MANAGEMENT_FEE"
	ActivityDistributionTypePrematureSimpleIraLessThan2Years           ActivityDistributionType = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS"
	ActivityDistributionTypeNormalRothIraGreaterThan5Years             ActivityDistributionType = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS"
	ActivityDistributionTypePlanLoan401K                               ActivityDistributionType = "PLAN_LOAN_401K"
	ActivityDistributionTypeNetIncomeAttributable                      ActivityDistributionType = "NET_INCOME_ATTRIBUTABLE"
	ActivityDistributionTypeRevocation                                 ActivityDistributionType = "REVOCATION"
	ActivityDistributionTypeNonReportable                              ActivityDistributionType = "NON_REPORTABLE"
)

func (e ActivityDistributionType) ToPointer() *ActivityDistributionType {
	return &e
}

// ActivityRetirementType - The type of retirement account the withdrawal is being made from
type ActivityRetirementType string

const (
	ActivityRetirementTypeRetirementTypeUnspecified ActivityRetirementType = "RETIREMENT_TYPE_UNSPECIFIED"
	ActivityRetirementTypeIra                       ActivityRetirementType = "IRA"
	ActivityRetirementTypeSep                       ActivityRetirementType = "SEP"
	ActivityRetirementTypeSimple                    ActivityRetirementType = "SIMPLE"
	ActivityRetirementTypeKeogh                     ActivityRetirementType = "KEOGH"
	ActivityRetirementTypeRoth                      ActivityRetirementType = "ROTH"
	ActivityRetirementTypeQp                        ActivityRetirementType = "QP"
	ActivityRetirementTypeRolloverIra               ActivityRetirementType = "ROLLOVER_IRA"
)

func (e ActivityRetirementType) ToPointer() *ActivityRetirementType {
	return &e
}

// ActivityWithdrawalType - The mechanism by which the funds will be withdrawn
type ActivityWithdrawalType string

const (
	ActivityWithdrawalTypeExternalMovementTypeUnspecified ActivityWithdrawalType = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED"
	ActivityWithdrawalTypeAch                             ActivityWithdrawalType = "ACH"
	ActivityWithdrawalTypeCheck                           ActivityWithdrawalType = "CHECK"
	ActivityWithdrawalTypeWire                            ActivityWithdrawalType = "WIRE"
	ActivityWithdrawalTypePaypal                          ActivityWithdrawalType = "PAYPAL"
	ActivityWithdrawalTypeRtp                             ActivityWithdrawalType = "RTP"
	ActivityWithdrawalTypeIct                             ActivityWithdrawalType = "ICT"
	ActivityWithdrawalTypeJournal                         ActivityWithdrawalType = "JOURNAL"
	ActivityWithdrawalTypeExternalAch                     ActivityWithdrawalType = "EXTERNAL_ACH"
)

func (e ActivityWithdrawalType) ToPointer() *ActivityWithdrawalType {
	return &e
}

// ActivityWithdrawal - Used to record withdrawals of funds from an account and capture details related to the withdrawal
type ActivityWithdrawal struct {
	// Free form text for additional sweep messages or instructions
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// indicates whether the withdrawal is a cash advance
	Advance *bool `json:"advance,omitempty"`
	// Indicates whether this withdrawal is intended to fully deplete and close an account
	ClosingAccount *bool `json:"closing_account,omitempty"`
	// Indicates whether this transaction is converting a retirement account to a ROTH IRA
	Conversion *bool `json:"conversion,omitempty"`
	// Human readable account identifier for the account the assets were journaled. To be populated when the Withdrawal type is Journal
	DestinationAccountNumber *string `json:"destination_account_number,omitempty"`
	// Name of the firm which was the destination of funds out of the account
	DestinationInstitution *string `json:"destination_institution,omitempty"`
	// Categorizes the withdrawal to indicate whether special handling of the transaction is needed elsewhere
	DistributionType *ActivityDistributionType `json:"distribution_type,omitempty"`
	// The tax year the withdrawal should be applied to (YYYY)
	DistributionYear *int `json:"distribution_year,omitempty"`
	// Unique tracking number provided to allow tracking a wire transfer from the initiating bank to the receiving bank
	FedReferenceNumber *string `json:"fed_reference_number,omitempty"`
	// Indicates whether the transaction is for a futures related transaction
	FuturesSettlement *bool `json:"futures_settlement,omitempty"`
	// Indicates whether this transaction is a micro withdrawal to validate ACH Relationships
	Micro *bool `json:"micro,omitempty"`
	// Name of the firm which was the source of funds into the account
	OriginatingInstitution *string `json:"originating_institution,omitempty"`
	// Indicates whether the transaction is a scheduled periodic withdrawal
	Periodic *bool `json:"periodic,omitempty"`
	// The type of retirement account the withdrawal is being made from
	RetirementType *ActivityRetirementType `json:"retirement_type,omitempty"`
	// Indicates whether the transaction is taxable
	Taxable *bool `json:"taxable,omitempty"`
	// Indicates whether or a not a distribution is a full liquidation of a tax-advantaged account
	TotalDistribution *bool `json:"total_distribution,omitempty"`
	// The mechanism by which the funds will be withdrawn
	Type *ActivityWithdrawalType `json:"type,omitempty"`
}

func (o *ActivityWithdrawal) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *ActivityWithdrawal) GetAdvance() *bool {
	if o == nil {
		return nil
	}
	return o.Advance
}

func (o *ActivityWithdrawal) GetClosingAccount() *bool {
	if o == nil {
		return nil
	}
	return o.ClosingAccount
}

func (o *ActivityWithdrawal) GetConversion() *bool {
	if o == nil {
		return nil
	}
	return o.Conversion
}

func (o *ActivityWithdrawal) GetDestinationAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.DestinationAccountNumber
}

func (o *ActivityWithdrawal) GetDestinationInstitution() *string {
	if o == nil {
		return nil
	}
	return o.DestinationInstitution
}

func (o *ActivityWithdrawal) GetDistributionType() *ActivityDistributionType {
	if o == nil {
		return nil
	}
	return o.DistributionType
}

func (o *ActivityWithdrawal) GetDistributionYear() *int {
	if o == nil {
		return nil
	}
	return o.DistributionYear
}

func (o *ActivityWithdrawal) GetFedReferenceNumber() *string {
	if o == nil {
		return nil
	}
	return o.FedReferenceNumber
}

func (o *ActivityWithdrawal) GetFuturesSettlement() *bool {
	if o == nil {
		return nil
	}
	return o.FuturesSettlement
}

func (o *ActivityWithdrawal) GetMicro() *bool {
	if o == nil {
		return nil
	}
	return o.Micro
}

func (o *ActivityWithdrawal) GetOriginatingInstitution() *string {
	if o == nil {
		return nil
	}
	return o.OriginatingInstitution
}

func (o *ActivityWithdrawal) GetPeriodic() *bool {
	if o == nil {
		return nil
	}
	return o.Periodic
}

func (o *ActivityWithdrawal) GetRetirementType() *ActivityRetirementType {
	if o == nil {
		return nil
	}
	return o.RetirementType
}

func (o *ActivityWithdrawal) GetTaxable() *bool {
	if o == nil {
		return nil
	}
	return o.Taxable
}

func (o *ActivityWithdrawal) GetTotalDistribution() *bool {
	if o == nil {
		return nil
	}
	return o.TotalDistribution
}

func (o *ActivityWithdrawal) GetType() *ActivityWithdrawalType {
	if o == nil {
		return nil
	}
	return o.Type
}

// ActivityReview - Denotes whether the withdrawal is pending or complete
type ActivityReview string

const (
	ActivityReviewReviewStateUnspecified ActivityReview = "REVIEW_STATE_UNSPECIFIED"
	ActivityReviewReviewStatePending     ActivityReview = "REVIEW_STATE_PENDING"
	ActivityReviewReviewStateComplete    ActivityReview = "REVIEW_STATE_COMPLETE"
)

func (e ActivityReview) ToPointer() *ActivityReview {
	return &e
}

// ActivityWithdrawalPendingReview - Used to record the movement of funds to/ from the pending_withdrawal memo location
type ActivityWithdrawalPendingReview struct {
	// Denotes whether the withdrawal is pending or complete
	Review *ActivityReview `json:"review,omitempty"`
}

func (o *ActivityWithdrawalPendingReview) GetReview() *ActivityReview {
	if o == nil {
		return nil
	}
	return o.Review
}

// ActivityWithholding - Used to record tax withholdings and details related to the withholding
type ActivityWithholding struct {
	// Contains information about the tax withholdings associated with a 'parent' activity
	Data []WithholdingData `json:"data,omitempty"`
}

func (o *ActivityWithholding) GetData() []WithholdingData {
	if o == nil {
		return nil
	}
	return o.Data
}

// ActivityWorthlessCorporateActionGeneralInformation - Common fields for corporate actions
type ActivityWorthlessCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *ActivityWorthlessCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *ActivityWorthlessCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *ActivityWorthlessCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *ActivityWorthlessCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *ActivityWorthlessCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *ActivityWorthlessCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *ActivityWorthlessCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// ActivityWorthlessEffectiveDate - Corresponds to corporateactions.announcement.effective_date
type ActivityWorthlessEffectiveDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityWorthlessEffectiveDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityWorthlessEffectiveDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityWorthlessEffectiveDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityWorthlessPaymentDate - The anticipated payment date at the depository
type ActivityWorthlessPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityWorthlessPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityWorthlessPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityWorthlessPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// ActivityWorthless - Used to record the removal of positions in a given security when the DTC has received formal notice that the security is worthless and details related to the worthless event
type ActivityWorthless struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *ActivityWorthlessCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Corresponds to corporateactions.announcement.effective_date
	EffectiveDate *ActivityWorthlessEffectiveDate `json:"effective_date,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *ActivityWorthlessPaymentDate `json:"payment_date,omitempty"`
}

func (o *ActivityWorthless) GetCorporateActionGeneralInformation() *ActivityWorthlessCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ActivityWorthless) GetEffectiveDate() *ActivityWorthlessEffectiveDate {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *ActivityWorthless) GetPaymentDate() *ActivityWorthlessPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

// Activity is a representation of several ledger entries rolled up for easy correlation and usage
type Activity struct {
	// Used to record the movement of funds or shares to/ from the pending_acats memo location
	AcatsPendingOut *ActivityAcatsPendingOut `json:"acats_pending_out,omitempty"`
	// A globally unique identifier referencing a single account; this is the main identifier for an account used for machine-to-machine interactions
	AccountID *string `json:"account_id,omitempty"`
	// Indicates the memo location impacted by an entry
	AccountMemo *ActivityAccountMemo `json:"account_memo,omitempty"`
	// Used to record the movement of funds or shares during the bookkeeping phase of an account transfer and details related to the account transfer
	AccountTransfer *ActivityAccountTransfer `json:"account_transfer,omitempty"`
	// Any accrued interest that has been earned but not yet paid between the last interest payment and the date of the activity
	AccruedInterest []AccruedInterest `json:"accrued_interest,omitempty"`
	// Used to record the amount of interest that has been earned but not yet paid between the last interest payment and the date of the trade
	AccruedInterestDesc *AccruedInterestDesc `json:"accrued_interest_desc,omitempty"`
	// The activity date refers to the specific calendar day on which a financial transaction, such as a trade at an exchange or a deposit at a bank, was executed. This date is specific to the institution where the transaction took place, capturing the exact day on which the institution formally records and effects the transaction
	ActivityDate *ActivityActivityDate `json:"activity_date,omitempty"`
	// The description for an activity. This may include special instructions, symbol description, etc when relavant
	ActivityDescription *string `json:"activity_description,omitempty"`
	// Apex-generated unique activity identifier
	ActivityID *string `json:"activity_id,omitempty"`
	// Activity time refers to the precise moment, recorded in Coordinated Universal Time (UTC), when a financial transaction is executed as reported to Apex
	ActivityTime *time.Time `json:"activity_time,omitempty"`
	// Object containing metadata for trade allocation
	Allocation *ActivityAllocation `json:"allocation,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the particular issue
	AssetDescription *string `json:"asset_description,omitempty"`
	// An Apex-provided, global identifier created on a per asset bases which provides connectivity across all areas Not populated on a currency only movement
	AssetID *string `json:"asset_id,omitempty"`
	// Object containing metadata for bond defaults
	BondDefault *ActivityBondDefault `json:"bond_default,omitempty"`
	// Used to record a distribution of cash that an issuer has determined will be declared as income financed from capital gains and not ordinary income and details related to the capital gain
	CapitalGains *ActivityCapitalGains `json:"capital_gains,omitempty"`
	// Used to record the distribution of cash to shareholders, paid by the issuer, usually based upon current earnings and/or accumulated profits as declared by the board of directors and details related to the cash dividend
	CashDividend *ActivityCashDividend `json:"cash_dividend,omitempty"`
	// Object containing metadata for cash in lieu
	CashInLieu *ActivityCashInLieu `json:"cash_in_lieu,omitempty"`
	// Used to record commission charged by brokers or financial intermediaries for executing financial transactions on behalf of clients
	Commission *ActivityCommission `json:"commission,omitempty"`
	// Any commissions associated with the activity
	Commissions []Commission `json:"commissions,omitempty"`
	// Used to record the conversion of securities (generally convertible bonds or preferred shares) into another form of securities (usually common shares) at a pre-stated price or rate and details related to the conversion
	Conversion *ActivityConversion `json:"conversion,omitempty"`
	// Used to record memo location adjustments initiated by the corporate action system due to reorg events
	CorporateActionMemoAdjustment *ActivityCorporateActionMemoAdjustment `json:"corporate_action_memo_adjustment,omitempty"`
	// A unique identifier referencing a Correspondent
	CorrespondentID *string `json:"correspondent_id,omitempty"`
	// The date/time an activity was created in the ledger
	CreationTime *time.Time `json:"creation_time,omitempty"`
	// Used to disburse funds into a customer's account, typically for purposes such as refunds, interest payments, or rewards from enrolled programs and details related to the credit
	Credit *ActivityCredit `json:"credit,omitempty"`
	// Required if any currency field like `price, gross_amount, trade.markup, fee.amount` is provided. The currency's ascend asset_id
	CurrencyAssetID *string `json:"currency_asset_id,omitempty"`
	// The currency associated with the security Populated on a currency movement
	CurrencyCode *string `json:"currency_code,omitempty"`
	// Used to record deposits of funds into an account and capture details related to the deposit
	Deposit *ActivityDeposit `json:"deposit,omitempty"`
	// Used to record the movement of funds to/ from the pending_drip memo location
	Drip *ActivityDrip `json:"drip,omitempty"`
	// Used to record the exchange of certificates for a new security or cash and details related to the exchange
	Exchange *ActivityExchange `json:"exchange,omitempty"`
	// Used to record Fees that have been assessed to account and capture details related to the fee
	Fee *ActivityFee `json:"fee,omitempty"`
	// Any fees associated with the activity
	Fees []Fee `json:"fees,omitempty"`
	// Used to record the movements of shares to/ from the fpsl memo location and details related to the fpsl memo
	Fpsl *ActivityFpsl `json:"fpsl,omitempty"`
	// For a given set of activity that are part of the same lineage the highest generation will be the most recent activity
	Generation *string `json:"generation,omitempty"`
	// The monetary value of an activity, exclusive of any fees, withholdings, accrued_interest, or commissions (First money)
	GrossAmount *ActivityGrossAmount `json:"gross_amount,omitempty"`
	// Used to record the payment of interest to accounts that have maintained a cash balance or the charging of interest to accounts that have used margin and details related to the interest
	Interest *ActivityInterest `json:"interest,omitempty"`
	// Used to record the The payment of an obligation an issuer has agreed to make to holders of an interest-bearing security and details related to the interest payment. Usually, the payment is made in cash and on a scheduled basis
	InterestPayment *ActivityInterestPayment `json:"interest_payment,omitempty"`
	// Used to record the dismantling of a business by an issuer, paying off debts in order of priority and distributing the remaining assets in cash and/or securities to the owners of the securities and details related to the liquidation
	Liquidation *ActivityLiquidation `json:"liquidation,omitempty"`
	// Used to record he final repayment, usually in cash, by an issuer for the entire issue, or remaining outstanding securities of a specific security on a specified date and details related to the maturity
	Maturity *ActivityMaturity `json:"maturity,omitempty"`
	// Used to record the exchange of one company's security for another company's security, cash, or a combination of cash and securities and details related to the merger
	Merger *ActivityMerger `json:"merger,omitempty"`
	// accounts/{account_id}/activities/{activity_id}
	Name *string `json:"name,omitempty"`
	// Used to record changes in the name of a security/securities by the issuer which result in surrendering physical securities or the assigning of a new security identifier which result in new securities being issued and details related to the name changes
	NameChange *ActivityNameChange `json:"name_change,omitempty"`
	// The monetary value of an activity, inclusive of fees, withholding, commisions, etc (Second Money)
	NetAmount *ActivityNetAmount `json:"net_amount,omitempty"`
	// can be an empty string if there is no next activity is populated when there is a modification resulting in a new activity
	NextActivityID *string `json:"next_activity_id,omitempty"`
	// the process date of the next activity(nil if the next_activity_id is an empty string)
	NextActivityProcessDate *NextActivityProcessDate `json:"next_activity_process_date,omitempty"`
	// None
	None *None `json:"none,omitempty"`
	// Used to record payments on interest-bearing securities where the payment is made in additional securities rather than cash and details related to the payment
	PaymentInKind *ActivityPaymentInKind `json:"payment_in_kind,omitempty"`
	// When populated, the activity_id of that precedes this one
	PreviousActivityID *string `json:"previous_activity_id,omitempty"`
	// When populated, the processing_date of the previous_activity_id
	PreviousProcessDate *PreviousProcessDate `json:"previous_process_date,omitempty"`
	// The monetary value paid for a given security in a trade Not populated on a currency only movement
	Price *ActivityPrice `json:"price,omitempty"`
	// The date that the activity was booked to the ledger
	ProcessDate *ActivityProcessDate `json:"process_date,omitempty"`
	// The quantity of shares bought, sold, or moved for a given entry/activity Required if activity.state != PENDING
	Quantity *ActivityQuantity `json:"quantity,omitempty"`
	// Used to record the redemption of a security for cash in its entirety for which the holders receive the principal amount of the security and details related to the redemption
	RedemptionFull *ActivityRedemptionFull `json:"redemption_full,omitempty"`
	// Used when securities are redeemed by the issuer for cash, in part, before their scheduled maturity date and details related to the redemption. The outstanding amount of securities will be proportionally reduced based on a specific percentage of holding
	RedemptionPartial *ActivityRedemptionPartial `json:"redemption_partial,omitempty"`
	// Two character region code, complies with https://cldr.unicode.org/index
	RegionCode *string `json:"region_code,omitempty"`
	// Used to record the exchange of a company's security for the same company's new security at a preset rate and details related to the reverse stock split
	ReverseStockSplit *ActivityReverseStockSplit `json:"reverse_stock_split,omitempty"`
	// Used to record distributions to common stock holders of a company that grant the option to purchase new or additional securities of the same company during a predetermined time period at a predetermined price and details related to the rights distribution
	RightsDistribution *ActivityRightsDistribution `json:"rights_distribution,omitempty"`
	// Used to record the purchase of new or additional securities and details related to the subscription. Rights are often tradable in a secondary market
	RightsSubscription *ActivityRightsSubscription `json:"rights_subscription,omitempty"`
	// Used to record rounding adjustments when the sum(price x quantity) of all entries for a given activity do not equal the price x quantity of the fully formed activity record
	RoundingAdjustment *ActivityRoundingAdjustment `json:"rounding_adjustment,omitempty"`
	// the difference between the aggregation of gross_amount from the trade entries and the rounded gross_amount of the fully formed activity This amount can also be found as a rounding_adjustment entry
	RoundingAmount *RoundingAmount `json:"rounding_amount,omitempty"`
	// Free form text field providing reason for rounding
	RoundingReason *string `json:"rounding_reason,omitempty"`
	// Used to record payments made by the issuer to security holders when the security is subject to redemptions other than full and partial calls (e.g., early CD redemptions) and details related to the sale of rights
	SaleOfRights *ActivitySaleOfRights `json:"sale_of_rights,omitempty"`
	// The date a given activity will officially settle
	SettleDate *ActivitySettleDate `json:"settle_date,omitempty"`
	// Denotes whether the trade is a buy or sell
	Side *ActivitySide `json:"side,omitempty"`
	// Indicates whether the trade is opening a new position or closing an existing position
	SideModifier *ActivitySideModifier `json:"side_modifier,omitempty"`
	// Used to record a distribution of subsidiary securities to the shareholders of the parent company without a surrender of securities or payment and details related to the spinoff. A spin-off represents a form of divestiture resulting in an independent company
	Spinoff *ActivitySpinoff `json:"spinoff,omitempty"`
	// The state of the activity
	State *ActivityState `json:"state,omitempty"`
	// Used to record a dividend paid to shareholders in the form of shares of stock in either the issuing company or in another company and details related to the stock dividend
	StockDividend *ActivityStockDividend `json:"stock_dividend,omitempty"`
	// Used to record the increase in a company's number of outstanding shares of stock without any change in the shareholder's equity or the aggregate market value at the time of the split and details related to the stock split
	StockSplit *ActivityStockSplit `json:"stock_split,omitempty"`
	// String representation of the metadata object containing more information about an entry/ activity
	SubtypeCategory *string `json:"subtype_category,omitempty"`
	// Used to record sweeps from a cash balance to an alternative asset or vice versa and details related to the sweep
	Sweep *ActivitySweep `json:"sweep,omitempty"`
	// Used to record the sale of securities for a specified price due to an offer from the issuer or a third party and details related to the tender offer
	TenderOffer *ActivityTenderOffer `json:"tender_offer,omitempty"`
	// Used to record the the execution of a buy or sell transaction resulting in the transfer of securities and corresponding payment and details related to the trade
	Trade *ActivityTrade `json:"trade,omitempty"`
	// Used to record more generic transfers of funds or securities and details related to the transfer. The transfer type and activity_description can be used to provide more specific context
	Transfer *ActivityTransfer `json:"transfer,omitempty"`
	// The type of activity this is
	Type *ActivityType `json:"type,omitempty"`
	// Used to record increases in the number of units outstanding through the issuing of more units to current shareholders and details related to the unit split
	UnitSplit *ActivityUnitSplit `json:"unit_split,omitempty"`
	// Used to record the exchange of warrants for shares and details related to the warrant exercise. The exercise will commonly require a payment based upon a pre-determined value and time and details related to the warrant exercise
	WarrantExercise *ActivityWarrantExercise `json:"warrant_exercise,omitempty"`
	// Used to record withdrawals of funds from an account and capture details related to the withdrawal
	Withdrawal *ActivityWithdrawal `json:"withdrawal,omitempty"`
	// Used to record the movement of funds to/ from the pending_withdrawal memo location
	WithdrawalPendingReview *ActivityWithdrawalPendingReview `json:"withdrawal_pending_review,omitempty"`
	// Used to record tax withholdings and details related to the withholding
	Withholding *ActivityWithholding `json:"withholding,omitempty"`
	// Any withholdings associated with the activity
	Withholdings []Withholding `json:"withholdings,omitempty"`
	// Used to record the removal of positions in a given security when the DTC has received formal notice that the security is worthless and details related to the worthless event
	Worthless *ActivityWorthless `json:"worthless,omitempty"`
}

func (a Activity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Activity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Activity) GetAcatsPendingOut() *ActivityAcatsPendingOut {
	if o == nil {
		return nil
	}
	return o.AcatsPendingOut
}

func (o *Activity) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *Activity) GetAccountMemo() *ActivityAccountMemo {
	if o == nil {
		return nil
	}
	return o.AccountMemo
}

func (o *Activity) GetAccountTransfer() *ActivityAccountTransfer {
	if o == nil {
		return nil
	}
	return o.AccountTransfer
}

func (o *Activity) GetAccruedInterest() []AccruedInterest {
	if o == nil {
		return nil
	}
	return o.AccruedInterest
}

func (o *Activity) GetAccruedInterestDesc() *AccruedInterestDesc {
	if o == nil {
		return nil
	}
	return o.AccruedInterestDesc
}

func (o *Activity) GetActivityDate() *ActivityActivityDate {
	if o == nil {
		return nil
	}
	return o.ActivityDate
}

func (o *Activity) GetActivityDescription() *string {
	if o == nil {
		return nil
	}
	return o.ActivityDescription
}

func (o *Activity) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *Activity) GetActivityTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ActivityTime
}

func (o *Activity) GetAllocation() *ActivityAllocation {
	if o == nil {
		return nil
	}
	return o.Allocation
}

func (o *Activity) GetAssetDescription() *string {
	if o == nil {
		return nil
	}
	return o.AssetDescription
}

func (o *Activity) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *Activity) GetBondDefault() *ActivityBondDefault {
	if o == nil {
		return nil
	}
	return o.BondDefault
}

func (o *Activity) GetCapitalGains() *ActivityCapitalGains {
	if o == nil {
		return nil
	}
	return o.CapitalGains
}

func (o *Activity) GetCashDividend() *ActivityCashDividend {
	if o == nil {
		return nil
	}
	return o.CashDividend
}

func (o *Activity) GetCashInLieu() *ActivityCashInLieu {
	if o == nil {
		return nil
	}
	return o.CashInLieu
}

func (o *Activity) GetCommission() *ActivityCommission {
	if o == nil {
		return nil
	}
	return o.Commission
}

func (o *Activity) GetCommissions() []Commission {
	if o == nil {
		return nil
	}
	return o.Commissions
}

func (o *Activity) GetConversion() *ActivityConversion {
	if o == nil {
		return nil
	}
	return o.Conversion
}

func (o *Activity) GetCorporateActionMemoAdjustment() *ActivityCorporateActionMemoAdjustment {
	if o == nil {
		return nil
	}
	return o.CorporateActionMemoAdjustment
}

func (o *Activity) GetCorrespondentID() *string {
	if o == nil {
		return nil
	}
	return o.CorrespondentID
}

func (o *Activity) GetCreationTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreationTime
}

func (o *Activity) GetCredit() *ActivityCredit {
	if o == nil {
		return nil
	}
	return o.Credit
}

func (o *Activity) GetCurrencyAssetID() *string {
	if o == nil {
		return nil
	}
	return o.CurrencyAssetID
}

func (o *Activity) GetCurrencyCode() *string {
	if o == nil {
		return nil
	}
	return o.CurrencyCode
}

func (o *Activity) GetDeposit() *ActivityDeposit {
	if o == nil {
		return nil
	}
	return o.Deposit
}

func (o *Activity) GetDrip() *ActivityDrip {
	if o == nil {
		return nil
	}
	return o.Drip
}

func (o *Activity) GetExchange() *ActivityExchange {
	if o == nil {
		return nil
	}
	return o.Exchange
}

func (o *Activity) GetFee() *ActivityFee {
	if o == nil {
		return nil
	}
	return o.Fee
}

func (o *Activity) GetFees() []Fee {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *Activity) GetFpsl() *ActivityFpsl {
	if o == nil {
		return nil
	}
	return o.Fpsl
}

func (o *Activity) GetGeneration() *string {
	if o == nil {
		return nil
	}
	return o.Generation
}

func (o *Activity) GetGrossAmount() *ActivityGrossAmount {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *Activity) GetInterest() *ActivityInterest {
	if o == nil {
		return nil
	}
	return o.Interest
}

func (o *Activity) GetInterestPayment() *ActivityInterestPayment {
	if o == nil {
		return nil
	}
	return o.InterestPayment
}

func (o *Activity) GetLiquidation() *ActivityLiquidation {
	if o == nil {
		return nil
	}
	return o.Liquidation
}

func (o *Activity) GetMaturity() *ActivityMaturity {
	if o == nil {
		return nil
	}
	return o.Maturity
}

func (o *Activity) GetMerger() *ActivityMerger {
	if o == nil {
		return nil
	}
	return o.Merger
}

func (o *Activity) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Activity) GetNameChange() *ActivityNameChange {
	if o == nil {
		return nil
	}
	return o.NameChange
}

func (o *Activity) GetNetAmount() *ActivityNetAmount {
	if o == nil {
		return nil
	}
	return o.NetAmount
}

func (o *Activity) GetNextActivityID() *string {
	if o == nil {
		return nil
	}
	return o.NextActivityID
}

func (o *Activity) GetNextActivityProcessDate() *NextActivityProcessDate {
	if o == nil {
		return nil
	}
	return o.NextActivityProcessDate
}

func (o *Activity) GetNone() *None {
	if o == nil {
		return nil
	}
	return o.None
}

func (o *Activity) GetPaymentInKind() *ActivityPaymentInKind {
	if o == nil {
		return nil
	}
	return o.PaymentInKind
}

func (o *Activity) GetPreviousActivityID() *string {
	if o == nil {
		return nil
	}
	return o.PreviousActivityID
}

func (o *Activity) GetPreviousProcessDate() *PreviousProcessDate {
	if o == nil {
		return nil
	}
	return o.PreviousProcessDate
}

func (o *Activity) GetPrice() *ActivityPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *Activity) GetProcessDate() *ActivityProcessDate {
	if o == nil {
		return nil
	}
	return o.ProcessDate
}

func (o *Activity) GetQuantity() *ActivityQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *Activity) GetRedemptionFull() *ActivityRedemptionFull {
	if o == nil {
		return nil
	}
	return o.RedemptionFull
}

func (o *Activity) GetRedemptionPartial() *ActivityRedemptionPartial {
	if o == nil {
		return nil
	}
	return o.RedemptionPartial
}

func (o *Activity) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *Activity) GetReverseStockSplit() *ActivityReverseStockSplit {
	if o == nil {
		return nil
	}
	return o.ReverseStockSplit
}

func (o *Activity) GetRightsDistribution() *ActivityRightsDistribution {
	if o == nil {
		return nil
	}
	return o.RightsDistribution
}

func (o *Activity) GetRightsSubscription() *ActivityRightsSubscription {
	if o == nil {
		return nil
	}
	return o.RightsSubscription
}

func (o *Activity) GetRoundingAdjustment() *ActivityRoundingAdjustment {
	if o == nil {
		return nil
	}
	return o.RoundingAdjustment
}

func (o *Activity) GetRoundingAmount() *RoundingAmount {
	if o == nil {
		return nil
	}
	return o.RoundingAmount
}

func (o *Activity) GetRoundingReason() *string {
	if o == nil {
		return nil
	}
	return o.RoundingReason
}

func (o *Activity) GetSaleOfRights() *ActivitySaleOfRights {
	if o == nil {
		return nil
	}
	return o.SaleOfRights
}

func (o *Activity) GetSettleDate() *ActivitySettleDate {
	if o == nil {
		return nil
	}
	return o.SettleDate
}

func (o *Activity) GetSide() *ActivitySide {
	if o == nil {
		return nil
	}
	return o.Side
}

func (o *Activity) GetSideModifier() *ActivitySideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *Activity) GetSpinoff() *ActivitySpinoff {
	if o == nil {
		return nil
	}
	return o.Spinoff
}

func (o *Activity) GetState() *ActivityState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *Activity) GetStockDividend() *ActivityStockDividend {
	if o == nil {
		return nil
	}
	return o.StockDividend
}

func (o *Activity) GetStockSplit() *ActivityStockSplit {
	if o == nil {
		return nil
	}
	return o.StockSplit
}

func (o *Activity) GetSubtypeCategory() *string {
	if o == nil {
		return nil
	}
	return o.SubtypeCategory
}

func (o *Activity) GetSweep() *ActivitySweep {
	if o == nil {
		return nil
	}
	return o.Sweep
}

func (o *Activity) GetTenderOffer() *ActivityTenderOffer {
	if o == nil {
		return nil
	}
	return o.TenderOffer
}

func (o *Activity) GetTrade() *ActivityTrade {
	if o == nil {
		return nil
	}
	return o.Trade
}

func (o *Activity) GetTransfer() *ActivityTransfer {
	if o == nil {
		return nil
	}
	return o.Transfer
}

func (o *Activity) GetType() *ActivityType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Activity) GetUnitSplit() *ActivityUnitSplit {
	if o == nil {
		return nil
	}
	return o.UnitSplit
}

func (o *Activity) GetWarrantExercise() *ActivityWarrantExercise {
	if o == nil {
		return nil
	}
	return o.WarrantExercise
}

func (o *Activity) GetWithdrawal() *ActivityWithdrawal {
	if o == nil {
		return nil
	}
	return o.Withdrawal
}

func (o *Activity) GetWithdrawalPendingReview() *ActivityWithdrawalPendingReview {
	if o == nil {
		return nil
	}
	return o.WithdrawalPendingReview
}

func (o *Activity) GetWithholding() *ActivityWithholding {
	if o == nil {
		return nil
	}
	return o.Withholding
}

func (o *Activity) GetWithholdings() []Withholding {
	if o == nil {
		return nil
	}
	return o.Withholdings
}

func (o *Activity) GetWorthless() *ActivityWorthless {
	if o == nil {
		return nil
	}
	return o.Worthless
}
