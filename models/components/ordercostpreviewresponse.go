// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// OrderCostPreviewResponseAssetType - The type of asset referenced by the security identifier
type OrderCostPreviewResponseAssetType string

const (
	OrderCostPreviewResponseAssetTypeAssetTypeUnspecified OrderCostPreviewResponseAssetType = "ASSET_TYPE_UNSPECIFIED"
	OrderCostPreviewResponseAssetTypeEquity               OrderCostPreviewResponseAssetType = "EQUITY"
	OrderCostPreviewResponseAssetTypeFixedIncome          OrderCostPreviewResponseAssetType = "FIXED_INCOME"
	OrderCostPreviewResponseAssetTypeMutualFund           OrderCostPreviewResponseAssetType = "MUTUAL_FUND"
	OrderCostPreviewResponseAssetTypeOption               OrderCostPreviewResponseAssetType = "OPTION"
)

func (e OrderCostPreviewResponseAssetType) ToPointer() *OrderCostPreviewResponseAssetType {
	return &e
}

// OrderCostPreviewResponseBrokerCapacity - Capacity used in determining the order cost. Defaults to "AGENCY" if no value specified.
type OrderCostPreviewResponseBrokerCapacity string

const (
	OrderCostPreviewResponseBrokerCapacityBrokerCapacityUnspecified OrderCostPreviewResponseBrokerCapacity = "BROKER_CAPACITY_UNSPECIFIED"
	OrderCostPreviewResponseBrokerCapacityAgency                    OrderCostPreviewResponseBrokerCapacity = "AGENCY"
	OrderCostPreviewResponseBrokerCapacityPrincipal                 OrderCostPreviewResponseBrokerCapacity = "PRINCIPAL"
)

func (e OrderCostPreviewResponseBrokerCapacity) ToPointer() *OrderCostPreviewResponseBrokerCapacity {
	return &e
}

// EstimatedAccruedInterest - The estimated total of accrued interest that would be exchanged in an order of the given quantity
type EstimatedAccruedInterest struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EstimatedAccruedInterest) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EstimatedGrossAmount - The principal amount involved, which is the notional value of the underlying assets that would be exchanged for the given quantity
type EstimatedGrossAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EstimatedGrossAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EstimatedGrossCreditAmount - Customer disclosure of the estimated gross credit (fee / markup) amount retained by broker based given the price adjustment schedule configured for orders executed in a principal capacity for a given quantity, and limit price. This amount is priced into the estimated_gross_credit_amount and is not separately charged explicitly.
type EstimatedGrossCreditAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EstimatedGrossCreditAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EstimatedNetAmount - The estimated net notional amount involved in an order of the given quantity, capacity, and limit price. This will be the sum of the estimated gross amount and accrued interest, rounded to two decimal places. (For orders in the principal capacity, this total will include mark-up/mark-down price adjustments.)
type EstimatedNetAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EstimatedNetAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// OrderCostPreviewResponseIdentifierType - The identifier type of the asset used for price calculations. This will be the same value as what was sent on the request.
type OrderCostPreviewResponseIdentifierType string

const (
	OrderCostPreviewResponseIdentifierTypeAssetID OrderCostPreviewResponseIdentifierType = "ASSET_ID"
	OrderCostPreviewResponseIdentifierTypeCusip   OrderCostPreviewResponseIdentifierType = "CUSIP"
	OrderCostPreviewResponseIdentifierTypeIsin    OrderCostPreviewResponseIdentifierType = "ISIN"
)

func (e OrderCostPreviewResponseIdentifierType) ToPointer() *OrderCostPreviewResponseIdentifierType {
	return &e
}

// OrderCostPreviewResponsePrice - The limit price which must be greater than zero if provided. For equity orders in the USD currency, up to 2 decimal places are allowed for prices above $1 and up to 4 decimal places for prices at or below $1. For fixed income orders this is expressed as a percentage of par, which allows up to 4 decimal places in the USD currency.
type OrderCostPreviewResponsePrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *OrderCostPreviewResponsePrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// OrderCostPreviewResponseType - The type of this price, which must be PRICE_PER_UNIT for equity orders, or PERCENTAGE_OF_PAR for fixed income orders.
type OrderCostPreviewResponseType string

const (
	OrderCostPreviewResponseTypeLimitPriceTypeUnspecified OrderCostPreviewResponseType = "LIMIT_PRICE_TYPE_UNSPECIFIED"
	OrderCostPreviewResponseTypePricePerUnit              OrderCostPreviewResponseType = "PRICE_PER_UNIT"
	OrderCostPreviewResponseTypePercentageOfPar           OrderCostPreviewResponseType = "PERCENTAGE_OF_PAR"
)

func (e OrderCostPreviewResponseType) ToPointer() *OrderCostPreviewResponseType {
	return &e
}

// OrderCostPreviewResponseLimitPrice - The limit price to use in calculating costs. Only PERCENTAGE_OF_PAR will be accepted and returned.
type OrderCostPreviewResponseLimitPrice struct {
	// The limit price which must be greater than zero if provided. For equity orders in the USD currency, up to 2 decimal places are allowed for prices above $1 and up to 4 decimal places for prices at or below $1. For fixed income orders this is expressed as a percentage of par, which allows up to 4 decimal places in the USD currency.
	Price *OrderCostPreviewResponsePrice `json:"price,omitempty"`
	// The type of this price, which must be PRICE_PER_UNIT for equity orders, or PERCENTAGE_OF_PAR for fixed income orders.
	Type *OrderCostPreviewResponseType `json:"type,omitempty"`
}

func (o *OrderCostPreviewResponseLimitPrice) GetPrice() *OrderCostPreviewResponsePrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *OrderCostPreviewResponseLimitPrice) GetType() *OrderCostPreviewResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

// OrderCostPreviewResponseQuantity - The quantity of the designated asset that would be ordered. For Fixed Income: Expressed in the par (face-value) amount and may not exceed two decimal places for USD-based currencies.
type OrderCostPreviewResponseQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *OrderCostPreviewResponseQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// OrderCostPreviewResponse - Preview of estimated costs for a chosen quantity, asset, capacity, and limit price
type OrderCostPreviewResponse struct {
	// The account id used in calculating order costs
	AccountID *string `json:"account_id,omitempty"`
	// Apex Asset ID for this asset.
	AssetID *string `json:"asset_id,omitempty"`
	// The type of asset referenced by the security identifier
	AssetType *OrderCostPreviewResponseAssetType `json:"asset_type,omitempty"`
	// Capacity used in determining the order cost. Defaults to "AGENCY" if no value specified.
	BrokerCapacity *OrderCostPreviewResponseBrokerCapacity `json:"broker_capacity,omitempty"`
	// The estimated total of accrued interest that would be exchanged in an order of the given quantity
	EstimatedAccruedInterest *EstimatedAccruedInterest `json:"estimated_accrued_interest,omitempty"`
	// The principal amount involved, which is the notional value of the underlying assets that would be exchanged for the given quantity
	EstimatedGrossAmount *EstimatedGrossAmount `json:"estimated_gross_amount,omitempty"`
	// Customer disclosure of the estimated gross credit (fee / markup) amount retained by broker based given the price adjustment schedule configured for orders executed in a principal capacity for a given quantity, and limit price. This amount is priced into the estimated_gross_credit_amount and is not separately charged explicitly.
	EstimatedGrossCreditAmount *EstimatedGrossCreditAmount `json:"estimated_gross_credit_amount,omitempty"`
	// The estimated net notional amount involved in an order of the given quantity, capacity, and limit price. This will be the sum of the estimated gross amount and accrued interest, rounded to two decimal places. (For orders in the principal capacity, this total will include mark-up/mark-down price adjustments.)
	EstimatedNetAmount *EstimatedNetAmount `json:"estimated_net_amount,omitempty"`
	// Identifier of the asset (of the type specified in `identifier_type`).
	Identifier *string `json:"identifier,omitempty"`
	// The identifier type of the asset used for price calculations. This will be the same value as what was sent on the request.
	IdentifierType *OrderCostPreviewResponseIdentifierType `json:"identifier_type,omitempty"`
	// The limit price to use in calculating costs. Only PERCENTAGE_OF_PAR will be accepted and returned.
	LimitPrice *OrderCostPreviewResponseLimitPrice `json:"limit_price,omitempty"`
	// The quantity of the designated asset that would be ordered. For Fixed Income: Expressed in the par (face-value) amount and may not exceed two decimal places for USD-based currencies.
	Quantity *OrderCostPreviewResponseQuantity `json:"quantity,omitempty"`
	// The time the response was generated by the system
	ResponseGenerationTime *time.Time `json:"response_generation_time,omitempty"`
}

func (o OrderCostPreviewResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OrderCostPreviewResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *OrderCostPreviewResponse) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *OrderCostPreviewResponse) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *OrderCostPreviewResponse) GetAssetType() *OrderCostPreviewResponseAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *OrderCostPreviewResponse) GetBrokerCapacity() *OrderCostPreviewResponseBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *OrderCostPreviewResponse) GetEstimatedAccruedInterest() *EstimatedAccruedInterest {
	if o == nil {
		return nil
	}
	return o.EstimatedAccruedInterest
}

func (o *OrderCostPreviewResponse) GetEstimatedGrossAmount() *EstimatedGrossAmount {
	if o == nil {
		return nil
	}
	return o.EstimatedGrossAmount
}

func (o *OrderCostPreviewResponse) GetEstimatedGrossCreditAmount() *EstimatedGrossCreditAmount {
	if o == nil {
		return nil
	}
	return o.EstimatedGrossCreditAmount
}

func (o *OrderCostPreviewResponse) GetEstimatedNetAmount() *EstimatedNetAmount {
	if o == nil {
		return nil
	}
	return o.EstimatedNetAmount
}

func (o *OrderCostPreviewResponse) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *OrderCostPreviewResponse) GetIdentifierType() *OrderCostPreviewResponseIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *OrderCostPreviewResponse) GetLimitPrice() *OrderCostPreviewResponseLimitPrice {
	if o == nil {
		return nil
	}
	return o.LimitPrice
}

func (o *OrderCostPreviewResponse) GetQuantity() *OrderCostPreviewResponseQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *OrderCostPreviewResponse) GetResponseGenerationTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ResponseGenerationTime
}
