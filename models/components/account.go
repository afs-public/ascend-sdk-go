// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// AccountCatAccountHolderType - The FINRA CAT classification for the Account Holder; Is set automatically based on attributes of the owners and account type
type AccountCatAccountHolderType string

const (
	AccountCatAccountHolderTypeCatAccountHolderTypeUnspecified AccountCatAccountHolderType = "CAT_ACCOUNT_HOLDER_TYPE_UNSPECIFIED"
	AccountCatAccountHolderTypeAInstitutionalCustomer          AccountCatAccountHolderType = "A_INSTITUTIONAL_CUSTOMER"
	AccountCatAccountHolderTypeEEmployeeAccount                AccountCatAccountHolderType = "E_EMPLOYEE_ACCOUNT"
	AccountCatAccountHolderTypeFForeign                        AccountCatAccountHolderType = "F_FOREIGN"
	AccountCatAccountHolderTypeIIndividual                     AccountCatAccountHolderType = "I_INDIVIDUAL"
	AccountCatAccountHolderTypeOMarketMaking                   AccountCatAccountHolderType = "O_MARKET_MAKING"
	AccountCatAccountHolderTypeVAgencyAveragePriceAccount      AccountCatAccountHolderType = "V_AGENCY_AVERAGE_PRICE_ACCOUNT"
	AccountCatAccountHolderTypePOtherProprietary               AccountCatAccountHolderType = "P_OTHER_PROPRIETARY"
	AccountCatAccountHolderTypeXErrorAccount                   AccountCatAccountHolderType = "X_ERROR_ACCOUNT"
)

func (e AccountCatAccountHolderType) ToPointer() *AccountCatAccountHolderType {
	return &e
}

// Domicile - Indicates if the account is `DOMESTIC` or `FOREIGN`
type Domicile string

const (
	DomicileDomicileUnspecified Domicile = "DOMICILE_UNSPECIFIED"
	DomicileDomestic            Domicile = "DOMESTIC"
	DomicileForeign             Domicile = "FOREIGN"
)

func (e Domicile) ToPointer() *Domicile {
	return &e
}

// FinraCoaCode - The FINRA COA code associated with the account
type FinraCoaCode string

const (
	FinraCoaCodeFinraCoaCodeUnspecified                        FinraCoaCode = "FINRA_COA_CODE_UNSPECIFIED"
	FinraCoaCodeCat01CustomerDvpRvp                            FinraCoaCode = "CAT_01_CUSTOMER_DVP_RVP"
	FinraCoaCodeCat02CustomerManagedAccounts                   FinraCoaCode = "CAT_02_CUSTOMER_MANAGED_ACCOUNTS"
	FinraCoaCodeCat03CustomerIraAccounts                       FinraCoaCode = "CAT_03_CUSTOMER_IRA_ACCOUNTS"
	FinraCoaCodeCat04CustomerEmployee                          FinraCoaCode = "CAT_04_CUSTOMER_EMPLOYEE"
	FinraCoaCodeCat05CustomerPrimeBroker                       FinraCoaCode = "CAT_05_CUSTOMER_PRIME_BROKER"
	FinraCoaCodeCat06CustomerAffiliateNonBd                    FinraCoaCode = "CAT_06_CUSTOMER_AFFILIATE_NON_BD"
	FinraCoaCodeCat07CustomerOmnibus                           FinraCoaCode = "CAT_07_CUSTOMER_OMNIBUS"
	FinraCoaCodeCat08Customer                                  FinraCoaCode = "CAT_08_CUSTOMER"
	FinraCoaCodeCat09NonCustomerOfficerDirector                FinraCoaCode = "CAT_09_NON_CUSTOMER_OFFICER_DIRECTOR"
	FinraCoaCodeCat10NonCustomerOfficerDirectorOrFamilyMembers FinraCoaCode = "CAT_10_NON_CUSTOMER_OFFICER_DIRECTOR_OR_FAMILY_MEMBERS"
	FinraCoaCodeCat11NonCustomerAffiliateBd                    FinraCoaCode = "CAT_11_NON_CUSTOMER_AFFILIATE_BD"
	FinraCoaCodeCat12NonCustomerOmnibus                        FinraCoaCode = "CAT_12_NON_CUSTOMER_OMNIBUS"
	FinraCoaCodeCat13NonCustomer                               FinraCoaCode = "CAT_13_NON_CUSTOMER"
	FinraCoaCodeCat14Paib                                      FinraCoaCode = "CAT_14_PAIB"
	FinraCoaCodeCat15FirmInventory                             FinraCoaCode = "CAT_15_FIRM_INVENTORY"
	FinraCoaCodeCat16CnsFails                                  FinraCoaCode = "CAT_16_CNS_FAILS"
	FinraCoaCodeCat17OtherClearingCorpFails                    FinraCoaCode = "CAT_17_OTHER_CLEARING_CORP_FAILS"
	FinraCoaCodeCat18ExecutingPrimeBroker                      FinraCoaCode = "CAT_18_EXECUTING_PRIME_BROKER"
	FinraCoaCodeCat19BrokerFailsToReceive                      FinraCoaCode = "CAT_19_BROKER_FAILS_TO_RECEIVE"
	FinraCoaCodeCat20BrokerFailsToDeliver                      FinraCoaCode = "CAT_20_BROKER_FAILS_TO_DELIVER"
	FinraCoaCodeCat21BrokerFails                               FinraCoaCode = "CAT_21_BROKER_FAILS"
	FinraCoaCodeCat22FailToDeliverGreaterThan30Days            FinraCoaCode = "CAT_22_FAIL_TO_DELIVER_GREATER_THAN_30_DAYS"
	FinraCoaCodeCat23SecuritiesBorrowed                        FinraCoaCode = "CAT_23_SECURITIES_BORROWED"
	FinraCoaCodeCat24SecuritiesBorrowedNonCash                 FinraCoaCode = "CAT_24_SECURITIES_BORROWED_NON_CASH"
	FinraCoaCodeCat25SecuritiesBorrowedConduit                 FinraCoaCode = "CAT_25_SECURITIES_BORROWED_CONDUIT"
	FinraCoaCodeCat26SecuritiesLoaned                          FinraCoaCode = "CAT_26_SECURITIES_LOANED"
	FinraCoaCodeCat27SecuritiesLoanedNonCash                   FinraCoaCode = "CAT_27_SECURITIES_LOANED_NON_CASH"
	FinraCoaCodeCat28SecuritiesLoanedConduit                   FinraCoaCode = "CAT_28_SECURITIES_LOANED_CONDUIT"
	FinraCoaCodeCat29SecuritiesLoanedCns                       FinraCoaCode = "CAT_29_SECURITIES_LOANED_CNS"
	FinraCoaCodeCat30ReverseRepo                               FinraCoaCode = "CAT_30_REVERSE_REPO"
	FinraCoaCodeCat31ReverseRepoTriParty                       FinraCoaCode = "CAT_31_REVERSE_REPO_TRI_PARTY"
	FinraCoaCodeCat32Repo                                      FinraCoaCode = "CAT_32_REPO"
	FinraCoaCodeCat33RepoHoldInCustody                         FinraCoaCode = "CAT_33_REPO_HOLD_IN_CUSTODY"
	FinraCoaCodeCat34RepoTriParty                              FinraCoaCode = "CAT_34_REPO_TRI_PARTY"
	FinraCoaCodeCat35BankLoanFirm                              FinraCoaCode = "CAT_35_BANK_LOAN_FIRM"
	FinraCoaCodeCat36BankLoanCustomer                          FinraCoaCode = "CAT_36_BANK_LOAN_CUSTOMER"
	FinraCoaCodeCat37BankLoanNonCustomer                       FinraCoaCode = "CAT_37_BANK_LOAN_NON_CUSTOMER"
	FinraCoaCodeCat38BankLoanPaib                              FinraCoaCode = "CAT_38_BANK_LOAN_PAIB"
	FinraCoaCodeCat39Suspense                                  FinraCoaCode = "CAT_39_SUSPENSE"
	FinraCoaCodeCat40Reorganizations                           FinraCoaCode = "CAT_40_REORGANIZATIONS"
	FinraCoaCodeCat41StockDividends                            FinraCoaCode = "CAT_41_STOCK_DIVIDENDS"
	FinraCoaCodeCat42AbandonedProperty                         FinraCoaCode = "CAT_42_ABANDONED_PROPERTY"
	FinraCoaCodeCat43PhysicalBox                               FinraCoaCode = "CAT_43_PHYSICAL_BOX"
	FinraCoaCodeCat44LegalBox                                  FinraCoaCode = "CAT_44_LEGAL_BOX"
	FinraCoaCodeCat45Safekeeping                               FinraCoaCode = "CAT_45_SAFEKEEPING"
	FinraCoaCodeCat4615C33Deposit                              FinraCoaCode = "CAT_46_15C3_3_DEPOSIT"
	FinraCoaCodeCat47DomesticDepositoryControl                 FinraCoaCode = "CAT_47_DOMESTIC_DEPOSITORY_CONTROL"
	FinraCoaCodeCat48ForeignDepositoryControl                  FinraCoaCode = "CAT_48_FOREIGN_DEPOSITORY_CONTROL"
	FinraCoaCodeCat49DomesticDepositoryNonControl              FinraCoaCode = "CAT_49_DOMESTIC_DEPOSITORY_NON_CONTROL"
	FinraCoaCodeCat50ForeignDepositoryNonControl               FinraCoaCode = "CAT_50_FOREIGN_DEPOSITORY_NON_CONTROL"
	FinraCoaCodeCat51TransferControl                           FinraCoaCode = "CAT_51_TRANSFER_CONTROL"
	FinraCoaCodeCat52TransferNonControl                        FinraCoaCode = "CAT_52_TRANSFER_NON_CONTROL"
	FinraCoaCodeCat53TransferLegal                             FinraCoaCode = "CAT_53_TRANSFER_LEGAL"
	FinraCoaCodeCat54InTransitControl                          FinraCoaCode = "CAT_54_IN_TRANSIT_CONTROL"
	FinraCoaCodeCat55InTransitNonControl                       FinraCoaCode = "CAT_55_IN_TRANSIT_NON_CONTROL"
	FinraCoaCodeCat56ClearingDomestic                          FinraCoaCode = "CAT_56_CLEARING_DOMESTIC"
	FinraCoaCodeCat57ClearingForeign                           FinraCoaCode = "CAT_57_CLEARING_FOREIGN"
	FinraCoaCodeCat58TestAccount                               FinraCoaCode = "CAT_58_TEST_ACCOUNT"
	FinraCoaCodeCat59OutOfBalance                              FinraCoaCode = "CAT_59_OUT_OF_BALANCE"
	FinraCoaCodeCat60Conversion                                FinraCoaCode = "CAT_60_CONVERSION"
	FinraCoaCodeCat61DepositsOccMargin                         FinraCoaCode = "CAT_61_DEPOSITS_OCC_MARGIN"
	FinraCoaCodeCat62DepositsOther                             FinraCoaCode = "CAT_62_DEPOSITS_OTHER"
	FinraCoaCodeCat63Other                                     FinraCoaCode = "CAT_63_OTHER"
)

func (e FinraCoaCode) ToPointer() *FinraCoaCode {
	return &e
}

// FundingType - Describes if the account is cash-only or has access to a form of margin
type FundingType string

const (
	FundingTypeFundingTypeUnspecified FundingType = "FUNDING_TYPE_UNSPECIFIED"
	FundingTypeCash                   FundingType = "CASH"
	FundingTypeMarginLimitedPurpose   FundingType = "MARGIN_LIMITED_PURPOSE"
	FundingTypeMarginRegT             FundingType = "MARGIN_REG_T"
	FundingTypeMarginPortfolio        FundingType = "MARGIN_PORTFOLIO"
)

func (e FundingType) ToPointer() *FundingType {
	return &e
}

// AccountInvestmentObjective - The financial goal or purpose that an investor has in mind when making investment decisions; firms often ask investors to specify their investment objectives when opening an account, in order to provide appropriate investment recommendations and manage risk appropriately
type AccountInvestmentObjective string

const (
	AccountInvestmentObjectiveInvestmentObjectiveUnspecified AccountInvestmentObjective = "INVESTMENT_OBJECTIVE_UNSPECIFIED"
	AccountInvestmentObjectiveBalanced                       AccountInvestmentObjective = "BALANCED"
	AccountInvestmentObjectiveCapitalAppreciation            AccountInvestmentObjective = "CAPITAL_APPRECIATION"
	AccountInvestmentObjectiveCapitalPreservation            AccountInvestmentObjective = "CAPITAL_PRESERVATION"
	AccountInvestmentObjectiveGrowth                         AccountInvestmentObjective = "GROWTH"
	AccountInvestmentObjectiveGrowthAndIncome                AccountInvestmentObjective = "GROWTH_AND_INCOME"
	AccountInvestmentObjectiveGrowthIncome                   AccountInvestmentObjective = "GROWTH_INCOME"
	AccountInvestmentObjectiveIncome                         AccountInvestmentObjective = "INCOME"
	AccountInvestmentObjectiveLongTermGrowthWithGreaterRisk  AccountInvestmentObjective = "LONG_TERM_GROWTH_WITH_GREATER_RISK"
	AccountInvestmentObjectiveLongTermGrowthWithSafety       AccountInvestmentObjective = "LONG_TERM_GROWTH_WITH_SAFETY"
	AccountInvestmentObjectiveMaximumGrowth                  AccountInvestmentObjective = "MAXIMUM_GROWTH"
	AccountInvestmentObjectiveShortTermGrowthWithRisk        AccountInvestmentObjective = "SHORT_TERM_GROWTH_WITH_RISK"
	AccountInvestmentObjectiveSpeculation                    AccountInvestmentObjective = "SPECULATION"
	AccountInvestmentObjectiveOther                          AccountInvestmentObjective = "OTHER"
)

func (e AccountInvestmentObjective) ToPointer() *AccountInvestmentObjective {
	return &e
}

// AccountLiquidityNeeds - An investor’s short-term cash requirements or the need to access funds quickly; it is important to consider an investor’s liquidity needs to ensure that they have sufficient cash or easily liquidated assets available to meet their financial obligations - this may include holding cash or cash equivalents
type AccountLiquidityNeeds string

const (
	AccountLiquidityNeedsLiquidityNeedsUnspecified AccountLiquidityNeeds = "LIQUIDITY_NEEDS_UNSPECIFIED"
	AccountLiquidityNeedsVeryImportant             AccountLiquidityNeeds = "VERY_IMPORTANT"
	AccountLiquidityNeedsSomewhatImportant         AccountLiquidityNeeds = "SOMEWHAT_IMPORTANT"
	AccountLiquidityNeedsNotImportant              AccountLiquidityNeeds = "NOT_IMPORTANT"
)

func (e AccountLiquidityNeeds) ToPointer() *AccountLiquidityNeeds {
	return &e
}

// AccountRiskTolerance - An investor’s willingness and ability to tolerate risk when making investment decisions; reflects the investor’s comfort level with the potential ups and downs of the market and their ability to withstand potential losses
type AccountRiskTolerance string

const (
	AccountRiskToleranceRiskToleranceUnspecified AccountRiskTolerance = "RISK_TOLERANCE_UNSPECIFIED"
	AccountRiskToleranceLow                      AccountRiskTolerance = "LOW"
	AccountRiskToleranceMedium                   AccountRiskTolerance = "MEDIUM"
	AccountRiskToleranceHigh                     AccountRiskTolerance = "HIGH"
)

func (e AccountRiskTolerance) ToPointer() *AccountRiskTolerance {
	return &e
}

// AccountTimeHorizon - TThe length of time an investor expects to hold an investment before selling it; this can affect the appropriate asset allocation and risk level for the portfolio
type AccountTimeHorizon string

const (
	AccountTimeHorizonTimeHorizonUnspecified AccountTimeHorizon = "TIME_HORIZON_UNSPECIFIED"
	AccountTimeHorizonShort                  AccountTimeHorizon = "SHORT"
	AccountTimeHorizonAverage                AccountTimeHorizon = "AVERAGE"
	AccountTimeHorizonLong                   AccountTimeHorizon = "LONG"
)

func (e AccountTimeHorizon) ToPointer() *AccountTimeHorizon {
	return &e
}

// AccountGoals - Account goals.
type AccountGoals struct {
	// The financial goal or purpose that an investor has in mind when making investment decisions; firms often ask investors to specify their investment objectives when opening an account, in order to provide appropriate investment recommendations and manage risk appropriately
	InvestmentObjective *AccountInvestmentObjective `json:"investment_objective,omitempty"`
	// An investor’s short-term cash requirements or the need to access funds quickly; it is important to consider an investor’s liquidity needs to ensure that they have sufficient cash or easily liquidated assets available to meet their financial obligations - this may include holding cash or cash equivalents
	LiquidityNeeds *AccountLiquidityNeeds `json:"liquidity_needs,omitempty"`
	// An investor’s willingness and ability to tolerate risk when making investment decisions; reflects the investor’s comfort level with the potential ups and downs of the market and their ability to withstand potential losses
	RiskTolerance *AccountRiskTolerance `json:"risk_tolerance,omitempty"`
	// TThe length of time an investor expects to hold an investment before selling it; this can affect the appropriate asset allocation and risk level for the portfolio
	TimeHorizon *AccountTimeHorizon `json:"time_horizon,omitempty"`
}

func (o *AccountGoals) GetInvestmentObjective() *AccountInvestmentObjective {
	if o == nil {
		return nil
	}
	return o.InvestmentObjective
}

func (o *AccountGoals) GetLiquidityNeeds() *AccountLiquidityNeeds {
	if o == nil {
		return nil
	}
	return o.LiquidityNeeds
}

func (o *AccountGoals) GetRiskTolerance() *AccountRiskTolerance {
	if o == nil {
		return nil
	}
	return o.RiskTolerance
}

func (o *AccountGoals) GetTimeHorizon() *AccountTimeHorizon {
	if o == nil {
		return nil
	}
	return o.TimeHorizon
}

// AccountAnnualIncomeRangeUsd - Annual income range; the low number is exclusive, the high number is inclusive
type AccountAnnualIncomeRangeUsd string

const (
	AccountAnnualIncomeRangeUsdUsdRangeUnspecified AccountAnnualIncomeRangeUsd = "USD_RANGE_UNSPECIFIED"
	AccountAnnualIncomeRangeUsdUnder25K            AccountAnnualIncomeRangeUsd = "UNDER_25K"
	AccountAnnualIncomeRangeUsdFrom25KTo50K        AccountAnnualIncomeRangeUsd = "FROM_25K_TO_50K"
	AccountAnnualIncomeRangeUsdFrom50KTo100K       AccountAnnualIncomeRangeUsd = "FROM_50K_TO_100K"
	AccountAnnualIncomeRangeUsdFrom100KTo200K      AccountAnnualIncomeRangeUsd = "FROM_100K_TO_200K"
	AccountAnnualIncomeRangeUsdFrom200KTo300K      AccountAnnualIncomeRangeUsd = "FROM_200K_TO_300K"
	AccountAnnualIncomeRangeUsdFrom300KTo500K      AccountAnnualIncomeRangeUsd = "FROM_300K_TO_500K"
	AccountAnnualIncomeRangeUsdFrom500KTo1M        AccountAnnualIncomeRangeUsd = "FROM_500K_TO_1M"
	AccountAnnualIncomeRangeUsdFrom1MTo5M          AccountAnnualIncomeRangeUsd = "FROM_1M_TO_5M"
	AccountAnnualIncomeRangeUsdOver5M              AccountAnnualIncomeRangeUsd = "OVER_5M"
)

func (e AccountAnnualIncomeRangeUsd) ToPointer() *AccountAnnualIncomeRangeUsd {
	return &e
}

// AccountInvestmentExperience - Investment experience.
type AccountInvestmentExperience string

const (
	AccountInvestmentExperienceInvestmentExperienceUnspecified AccountInvestmentExperience = "INVESTMENT_EXPERIENCE_UNSPECIFIED"
	AccountInvestmentExperienceNone                            AccountInvestmentExperience = "NONE"
	AccountInvestmentExperienceLimited                         AccountInvestmentExperience = "LIMITED"
	AccountInvestmentExperienceGood                            AccountInvestmentExperience = "GOOD"
	AccountInvestmentExperienceExtensive                       AccountInvestmentExperience = "EXTENSIVE"
)

func (e AccountInvestmentExperience) ToPointer() *AccountInvestmentExperience {
	return &e
}

// AccountLiquidNetWorthRangeUsd - Liquid net worth range; the low number is exclusive, the high number is inclusive
type AccountLiquidNetWorthRangeUsd string

const (
	AccountLiquidNetWorthRangeUsdUsdRangeUnspecified AccountLiquidNetWorthRangeUsd = "USD_RANGE_UNSPECIFIED"
	AccountLiquidNetWorthRangeUsdUnder25K            AccountLiquidNetWorthRangeUsd = "UNDER_25K"
	AccountLiquidNetWorthRangeUsdFrom25KTo50K        AccountLiquidNetWorthRangeUsd = "FROM_25K_TO_50K"
	AccountLiquidNetWorthRangeUsdFrom50KTo100K       AccountLiquidNetWorthRangeUsd = "FROM_50K_TO_100K"
	AccountLiquidNetWorthRangeUsdFrom100KTo200K      AccountLiquidNetWorthRangeUsd = "FROM_100K_TO_200K"
	AccountLiquidNetWorthRangeUsdFrom200KTo300K      AccountLiquidNetWorthRangeUsd = "FROM_200K_TO_300K"
	AccountLiquidNetWorthRangeUsdFrom300KTo500K      AccountLiquidNetWorthRangeUsd = "FROM_300K_TO_500K"
	AccountLiquidNetWorthRangeUsdFrom500KTo1M        AccountLiquidNetWorthRangeUsd = "FROM_500K_TO_1M"
	AccountLiquidNetWorthRangeUsdFrom1MTo5M          AccountLiquidNetWorthRangeUsd = "FROM_1M_TO_5M"
	AccountLiquidNetWorthRangeUsdOver5M              AccountLiquidNetWorthRangeUsd = "OVER_5M"
)

func (e AccountLiquidNetWorthRangeUsd) ToPointer() *AccountLiquidNetWorthRangeUsd {
	return &e
}

// AccountTotalNetWorthRangeUsd - Total net worth range; the low number is exclusive, the high number is inclusive
type AccountTotalNetWorthRangeUsd string

const (
	AccountTotalNetWorthRangeUsdUsdRangeUnspecified AccountTotalNetWorthRangeUsd = "USD_RANGE_UNSPECIFIED"
	AccountTotalNetWorthRangeUsdUnder25K            AccountTotalNetWorthRangeUsd = "UNDER_25K"
	AccountTotalNetWorthRangeUsdFrom25KTo50K        AccountTotalNetWorthRangeUsd = "FROM_25K_TO_50K"
	AccountTotalNetWorthRangeUsdFrom50KTo100K       AccountTotalNetWorthRangeUsd = "FROM_50K_TO_100K"
	AccountTotalNetWorthRangeUsdFrom100KTo200K      AccountTotalNetWorthRangeUsd = "FROM_100K_TO_200K"
	AccountTotalNetWorthRangeUsdFrom200KTo300K      AccountTotalNetWorthRangeUsd = "FROM_200K_TO_300K"
	AccountTotalNetWorthRangeUsdFrom300KTo500K      AccountTotalNetWorthRangeUsd = "FROM_300K_TO_500K"
	AccountTotalNetWorthRangeUsdFrom500KTo1M        AccountTotalNetWorthRangeUsd = "FROM_500K_TO_1M"
	AccountTotalNetWorthRangeUsdFrom1MTo5M          AccountTotalNetWorthRangeUsd = "FROM_1M_TO_5M"
	AccountTotalNetWorthRangeUsdOver5M              AccountTotalNetWorthRangeUsd = "OVER_5M"
)

func (e AccountTotalNetWorthRangeUsd) ToPointer() *AccountTotalNetWorthRangeUsd {
	return &e
}

// CustomerProfile - Customer profile.
type CustomerProfile struct {
	// Annual income range; the low number is exclusive, the high number is inclusive
	AnnualIncomeRangeUsd *AccountAnnualIncomeRangeUsd `json:"annual_income_range_usd,omitempty"`
	// Federal tax bracket percent.
	FederalTaxBracket *float64 `json:"federal_tax_bracket,omitempty"`
	// Investment experience.
	InvestmentExperience *AccountInvestmentExperience `json:"investment_experience,omitempty"`
	// Liquid net worth range; the low number is exclusive, the high number is inclusive
	LiquidNetWorthRangeUsd *AccountLiquidNetWorthRangeUsd `json:"liquid_net_worth_range_usd,omitempty"`
	// Total net worth range; the low number is exclusive, the high number is inclusive
	TotalNetWorthRangeUsd *AccountTotalNetWorthRangeUsd `json:"total_net_worth_range_usd,omitempty"`
}

func (o *CustomerProfile) GetAnnualIncomeRangeUsd() *AccountAnnualIncomeRangeUsd {
	if o == nil {
		return nil
	}
	return o.AnnualIncomeRangeUsd
}

func (o *CustomerProfile) GetFederalTaxBracket() *float64 {
	if o == nil {
		return nil
	}
	return o.FederalTaxBracket
}

func (o *CustomerProfile) GetInvestmentExperience() *AccountInvestmentExperience {
	if o == nil {
		return nil
	}
	return o.InvestmentExperience
}

func (o *CustomerProfile) GetLiquidNetWorthRangeUsd() *AccountLiquidNetWorthRangeUsd {
	if o == nil {
		return nil
	}
	return o.LiquidNetWorthRangeUsd
}

func (o *CustomerProfile) GetTotalNetWorthRangeUsd() *AccountTotalNetWorthRangeUsd {
	if o == nil {
		return nil
	}
	return o.TotalNetWorthRangeUsd
}

// InvestmentProfile - The account's goals and customer's financial profile; Used to assess customer fitness and is required by FINRA
type InvestmentProfile struct {
	// Account goals.
	AccountGoals *AccountGoals `json:"account_goals,omitempty"`
	// Customer profile.
	CustomerProfile *CustomerProfile `json:"customer_profile,omitempty"`
	// The investment profile ID (generated internally).
	InvestmentProfileID *string `json:"investment_profile_id,omitempty"`
}

func (o *InvestmentProfile) GetAccountGoals() *AccountGoals {
	if o == nil {
		return nil
	}
	return o.AccountGoals
}

func (o *InvestmentProfile) GetCustomerProfile() *CustomerProfile {
	if o == nil {
		return nil
	}
	return o.CustomerProfile
}

func (o *InvestmentProfile) GetInvestmentProfileID() *string {
	if o == nil {
		return nil
	}
	return o.InvestmentProfileID
}

// OwnershipType - A roll-up account classification based on the `registration_type`; Indicates what owns the account and/or if it is a special type (e.g., Joint, Estate, Retirement, etc.); Used primarily for reporting and high-level type identification
type OwnershipType string

const (
	OwnershipTypeOwnershipTypeUnspecified OwnershipType = "OWNERSHIP_TYPE_UNSPECIFIED"
	OwnershipTypeIndividual               OwnershipType = "INDIVIDUAL"
	OwnershipTypeJoint                    OwnershipType = "JOINT"
	OwnershipTypeEstate                   OwnershipType = "ESTATE"
	OwnershipTypeRetirement               OwnershipType = "RETIREMENT"
	OwnershipTypeTrust                    OwnershipType = "TRUST"
	OwnershipTypeEntity                   OwnershipType = "ENTITY"
	OwnershipTypeMinor                    OwnershipType = "MINOR"
)

func (e OwnershipType) ToPointer() *OwnershipType {
	return &e
}

// RegistrationType - The registration of the account (e.g. Individual, Joint, IRA, etc.)
type RegistrationType string

const (
	RegistrationTypeRegistrationTypeUnspecified               RegistrationType = "REGISTRATION_TYPE_UNSPECIFIED"
	RegistrationTypeIndividualRegistration                    RegistrationType = "INDIVIDUAL_REGISTRATION"
	RegistrationTypeEstateRegistration                        RegistrationType = "ESTATE_REGISTRATION"
	RegistrationTypeTraditionalIraRegistration                RegistrationType = "TRADITIONAL_IRA_REGISTRATION"
	RegistrationTypeSimpleIraRegistration                     RegistrationType = "SIMPLE_IRA_REGISTRATION"
	RegistrationTypeSepIraRegistration                        RegistrationType = "SEP_IRA_REGISTRATION"
	RegistrationTypeRothIraRegistration                       RegistrationType = "ROTH_IRA_REGISTRATION"
	RegistrationTypeRolloverIraRegistration                   RegistrationType = "ROLLOVER_IRA_REGISTRATION"
	RegistrationTypeJointWithRightsOfSurvivorshipRegistration RegistrationType = "JOINT_WITH_RIGHTS_OF_SURVIVORSHIP_REGISTRATION"
	RegistrationTypeJointTenantsInCommonRegistration          RegistrationType = "JOINT_TENANTS_IN_COMMON_REGISTRATION"
	RegistrationTypeJointTenantsByEntiretyRegistration        RegistrationType = "JOINT_TENANTS_BY_ENTIRETY_REGISTRATION"
	RegistrationTypeJointCommunityPropertyRegistration        RegistrationType = "JOINT_COMMUNITY_PROPERTY_REGISTRATION"
	RegistrationTypeTrustRegistration                         RegistrationType = "TRUST_REGISTRATION"
	RegistrationTypeCorporationRegistration                   RegistrationType = "CORPORATION_REGISTRATION"
	RegistrationTypeLlcRegistration                           RegistrationType = "LLC_REGISTRATION"
	RegistrationTypePartnershipRegistration                   RegistrationType = "PARTNERSHIP_REGISTRATION"
	RegistrationTypeOperatingRegistration                     RegistrationType = "OPERATING_REGISTRATION"
	RegistrationTypeIraBeneficiaryTraditionalRegistration     RegistrationType = "IRA_BENEFICIARY_TRADITIONAL_REGISTRATION"
	RegistrationTypeIraBeneficiaryRothRegistration            RegistrationType = "IRA_BENEFICIARY_ROTH_REGISTRATION"
	RegistrationTypeForeignIndividualRegistration             RegistrationType = "FOREIGN_INDIVIDUAL_REGISTRATION"
	RegistrationTypeCustodialRegistration                     RegistrationType = "CUSTODIAL_REGISTRATION"
)

func (e RegistrationType) ToPointer() *RegistrationType {
	return &e
}

// ReserveClass - The Reserve Class associated with the account
type ReserveClass string

const (
	ReserveClassReserveClassUnspecified ReserveClass = "RESERVE_CLASS_UNSPECIFIED"
	ReserveClassCustomer                ReserveClass = "CUSTOMER"
	ReserveClassPab                     ReserveClass = "PAB"
	ReserveClassFirm                    ReserveClass = "FIRM"
	ReserveClassStreet                  ReserveClass = "STREET"
	ReserveClassGl                      ReserveClass = "G_L"
)

func (e ReserveClass) ToPointer() *ReserveClass {
	return &e
}

// AccountState - Indicates if the account is `OPEN`, `PENDING`, or `CLOSED`
type AccountState string

const (
	AccountStateStateUnspecified AccountState = "STATE_UNSPECIFIED"
	AccountStatePending          AccountState = "PENDING"
	AccountStateOpen             AccountState = "OPEN"
	AccountStateClosed           AccountState = "CLOSED"
)

func (e AccountState) ToPointer() *AccountState {
	return &e
}

// AccountCostBasisLotDisposalMethod - A method of determining the cost basis of an asset that has been sold or disposed of, by identifying which specific lot of the asset was sold and using the cost of that lot to calculate the cost basis; this method is commonly used for tax purposes to determine the amount of reportable capital gains or losses By default, this is set to `COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM`
type AccountCostBasisLotDisposalMethod string

const (
	AccountCostBasisLotDisposalMethodCostBasisLotDisposalMethodUnspecified AccountCostBasisLotDisposalMethod = "COST_BASIS_LOT_DISPOSAL_METHOD_UNSPECIFIED"
	AccountCostBasisLotDisposalMethodCostBasisLotDisposalFifo              AccountCostBasisLotDisposalMethod = "COST_BASIS_LOT_DISPOSAL_FIFO"
	AccountCostBasisLotDisposalMethodCostBasisLotDisposalLifo              AccountCostBasisLotDisposalMethod = "COST_BASIS_LOT_DISPOSAL_LIFO"
	AccountCostBasisLotDisposalMethodCostBasisLotDisposalHighCost          AccountCostBasisLotDisposalMethod = "COST_BASIS_LOT_DISPOSAL_HIGH_COST"
	AccountCostBasisLotDisposalMethodCostBasisLotDisposalHighCostLongTerm  AccountCostBasisLotDisposalMethod = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_LONG_TERM"
	AccountCostBasisLotDisposalMethodCostBasisLotDisposalHighCostShortTerm AccountCostBasisLotDisposalMethod = "COST_BASIS_LOT_DISPOSAL_HIGH_COST_SHORT_TERM"
	AccountCostBasisLotDisposalMethodCostBasisLotDisposalLowCost           AccountCostBasisLotDisposalMethod = "COST_BASIS_LOT_DISPOSAL_LOW_COST"
	AccountCostBasisLotDisposalMethodCostBasisLotDisposalLowCostLongTerm   AccountCostBasisLotDisposalMethod = "COST_BASIS_LOT_DISPOSAL_LOW_COST_LONG_TERM"
	AccountCostBasisLotDisposalMethodCostBasisLotDisposalLowCostShortTerm  AccountCostBasisLotDisposalMethod = "COST_BASIS_LOT_DISPOSAL_LOW_COST_SHORT_TERM"
	AccountCostBasisLotDisposalMethodCostBasisLotDisposalMinTaxTerm        AccountCostBasisLotDisposalMethod = "COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM"
)

func (e AccountCostBasisLotDisposalMethod) ToPointer() *AccountCostBasisLotDisposalMethod {
	return &e
}

// AccountTaxProfile - Tax-related attributes for the account; A tax profile with taxpayer attributes is located on the `legal_natural_person` or `legal_entity` objects elsewhere on the account record
type AccountTaxProfile struct {
	// A method of determining the cost basis of an asset that has been sold or disposed of, by identifying which specific lot of the asset was sold and using the cost of that lot to calculate the cost basis; this method is commonly used for tax purposes to determine the amount of reportable capital gains or losses By default, this is set to `COST_BASIS_LOT_DISPOSAL_MIN_TAX_TERM`
	CostBasisLotDisposalMethod *AccountCostBasisLotDisposalMethod `json:"cost_basis_lot_disposal_method,omitempty"`
	// Indicates if the account is eligible to mark-to-market their securities and commodities holdings; Named after the related section of the IRS tax code
	Section475Election *bool `json:"section_475_election,omitempty"`
}

func (o *AccountTaxProfile) GetCostBasisLotDisposalMethod() *AccountCostBasisLotDisposalMethod {
	if o == nil {
		return nil
	}
	return o.CostBasisLotDisposalMethod
}

func (o *AccountTaxProfile) GetSection475Election() *bool {
	if o == nil {
		return nil
	}
	return o.Section475Election
}

// An Account as represented in the account ecosystem.
type Account struct {
	// Indicates if the issuer of a security held by the account is permitted to communicate directly with the shareholder versus through the brokerage firm; This can include sending proxy statements, annual reports, and other important information directly to the shareholder's address on file with the brokerage firm
	AcceptsIssuerDirectCommunication *bool `json:"accepts_issuer_direct_communication,omitempty"`
	// An Account Group is a way of segmenting accounts within a Correspondent; It is up to the client to define what these groups are and AFS Operations is responsible for configuring them; If the client requests additional groups/codes, they can be added; Examples of Account Groups could hypothetically include HNW (High Net Worth), GOLD (Gold Status Customer), and NWC (Northwest Branch Customer)
	AccountGroupID *string `json:"account_group_id,omitempty"`
	// A globally unique identifier referencing a single account; This is the main identifier for an account used for machine-to-machine interactions
	AccountID *string `json:"account_id,omitempty"`
	// A "unique" identifier referencing this single account This should be the human readable identifier for the account used for display
	AccountNumber *string `json:"account_number,omitempty"`
	// The list of restrictions currently impacting a given account; Restrictions suspend one or more entitlements dependent on their mapping
	ActiveRestrictions []string `json:"active_restrictions,omitempty"`
	// A boolean to indicate if an account is advised
	Advised *bool `json:"advised,omitempty"`
	// The collection of legal agreements belonging to a given account
	Agreements []Agreement `json:"agreements,omitempty"`
	// The FINRA CAT classification for the Account Holder; Is set automatically based on attributes of the owners and account type
	CatAccountHolderType *AccountCatAccountHolderType `json:"cat_account_holder_type,omitempty"`
	// The time the account was closed; If the account is not closed, this is null
	CloseTime *time.Time `json:"close_time,omitempty"`
	// A unique identifier referencing a Correspondent; A Client may have several operating Correspondents within its purview.
	CorrespondentID *string `json:"correspondent_id,omitempty"`
	// The time the initial account record was created; May differ from the `open_time` timestamp which depends on when all required data was provided to the system
	CreateTime *time.Time `json:"create_time,omitempty"`
	// Indicates if the account is `DOMESTIC` or `FOREIGN`
	Domicile *Domicile `json:"domicile,omitempty"`
	// A list of enrollments (or "features") on an account; May consist of both active an inactive enrollments
	Enrollments []Enrollment `json:"enrollments,omitempty"`
	// Apex requires a Firm-Designated ID (FDID) for Consolidated Audit Trail (CAT) reporting and uses it as a unique identifier for each trading account; The identifier cannot be the same as the accountID; Apex automatically assigns this ID.
	Fdid *string `json:"fdid,omitempty"`
	// The FINRA COA code associated with the account
	FinraCoaCode *FinraCoaCode `json:"finra_coa_code,omitempty"`
	// Describes if the account is cash-only or has access to a form of margin
	FundingType *FundingType `json:"funding_type,omitempty"`
	// A list of identifiers associated with the account
	Identifiers []Identifier `json:"identifiers,omitempty"`
	// A list of natural persons indicated to receive selected account documents such as account statements
	InterestedParties []InterestedParty `json:"interested_parties,omitempty"`
	// The account's goals and customer's financial profile; Used to assess customer fitness and is required by FINRA
	InvestmentProfile *InvestmentProfile `json:"investment_profile,omitempty"`
	// A boolean to indicate if an account is managed
	Managed *bool `json:"managed,omitempty"`
	// An identifier generated for all non-cash accounts; Uses a combination of account type and owner information to tie accounts together in order to perform margin calculations
	MarginGroupID *string `json:"margin_group_id,omitempty"`
	// The name field Format: accounts/{account}
	Name *string `json:"name,omitempty"`
	// The time the account was activated; Differs from `create_time` which is when the initial account record was created
	OpenTime *time.Time `json:"open_time,omitempty"`
	// A roll-up account classification based on the `registration_type`; Indicates what owns the account and/or if it is a special type (e.g., Joint, Estate, Retirement, etc.); Used primarily for reporting and high-level type identification
	OwnershipType *OwnershipType `json:"ownership_type,omitempty"`
	// Parties associated with the account (e.g. custodian).
	Parties []Party `json:"parties,omitempty"`
	// Indicates if the customer is a PDT; This is set if the account executes four or more day trades (buy and sell the same security intraday) within a period of five business days
	PatternDayTrader *bool `json:"pattern_day_trader,omitempty"`
	// The primary registered representative for the account
	PrimaryRegisteredRepID *string `json:"primary_registered_rep_id,omitempty"`
	// The registration of the account (e.g. Individual, Joint, IRA, etc.)
	RegistrationType *RegistrationType `json:"registration_type,omitempty"`
	// The Reserve Class associated with the account
	ReserveClass *ReserveClass `json:"reserve_class,omitempty"`
	// Indicates if the account is `OPEN`, `PENDING`, or `CLOSED`
	State *AccountState `json:"state,omitempty"`
	// Tax-related attributes for the account; A tax profile with taxpayer attributes is located on the `legal_natural_person` or `legal_entity` objects elsewhere on the account record
	TaxProfile *AccountTaxProfile `json:"tax_profile,omitempty"`
	// The title of the account.
	Title *string `json:"title,omitempty"`
	// A list of persons designated to verify the well being of the account holder.
	TrustedContacts []TrustedContact `json:"trusted_contacts,omitempty"`
	// A boolean to indicate if an account is a wrap brokerage account
	WrapFeeBilled *bool `json:"wrap_fee_billed,omitempty"`
}

func (a Account) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Account) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Account) GetAcceptsIssuerDirectCommunication() *bool {
	if o == nil {
		return nil
	}
	return o.AcceptsIssuerDirectCommunication
}

func (o *Account) GetAccountGroupID() *string {
	if o == nil {
		return nil
	}
	return o.AccountGroupID
}

func (o *Account) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *Account) GetAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AccountNumber
}

func (o *Account) GetActiveRestrictions() []string {
	if o == nil {
		return nil
	}
	return o.ActiveRestrictions
}

func (o *Account) GetAdvised() *bool {
	if o == nil {
		return nil
	}
	return o.Advised
}

func (o *Account) GetAgreements() []Agreement {
	if o == nil {
		return nil
	}
	return o.Agreements
}

func (o *Account) GetCatAccountHolderType() *AccountCatAccountHolderType {
	if o == nil {
		return nil
	}
	return o.CatAccountHolderType
}

func (o *Account) GetCloseTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CloseTime
}

func (o *Account) GetCorrespondentID() *string {
	if o == nil {
		return nil
	}
	return o.CorrespondentID
}

func (o *Account) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *Account) GetDomicile() *Domicile {
	if o == nil {
		return nil
	}
	return o.Domicile
}

func (o *Account) GetEnrollments() []Enrollment {
	if o == nil {
		return nil
	}
	return o.Enrollments
}

func (o *Account) GetFdid() *string {
	if o == nil {
		return nil
	}
	return o.Fdid
}

func (o *Account) GetFinraCoaCode() *FinraCoaCode {
	if o == nil {
		return nil
	}
	return o.FinraCoaCode
}

func (o *Account) GetFundingType() *FundingType {
	if o == nil {
		return nil
	}
	return o.FundingType
}

func (o *Account) GetIdentifiers() []Identifier {
	if o == nil {
		return nil
	}
	return o.Identifiers
}

func (o *Account) GetInterestedParties() []InterestedParty {
	if o == nil {
		return nil
	}
	return o.InterestedParties
}

func (o *Account) GetInvestmentProfile() *InvestmentProfile {
	if o == nil {
		return nil
	}
	return o.InvestmentProfile
}

func (o *Account) GetManaged() *bool {
	if o == nil {
		return nil
	}
	return o.Managed
}

func (o *Account) GetMarginGroupID() *string {
	if o == nil {
		return nil
	}
	return o.MarginGroupID
}

func (o *Account) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Account) GetOpenTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.OpenTime
}

func (o *Account) GetOwnershipType() *OwnershipType {
	if o == nil {
		return nil
	}
	return o.OwnershipType
}

func (o *Account) GetParties() []Party {
	if o == nil {
		return nil
	}
	return o.Parties
}

func (o *Account) GetPatternDayTrader() *bool {
	if o == nil {
		return nil
	}
	return o.PatternDayTrader
}

func (o *Account) GetPrimaryRegisteredRepID() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryRegisteredRepID
}

func (o *Account) GetRegistrationType() *RegistrationType {
	if o == nil {
		return nil
	}
	return o.RegistrationType
}

func (o *Account) GetReserveClass() *ReserveClass {
	if o == nil {
		return nil
	}
	return o.ReserveClass
}

func (o *Account) GetState() *AccountState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *Account) GetTaxProfile() *AccountTaxProfile {
	if o == nil {
		return nil
	}
	return o.TaxProfile
}

func (o *Account) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Account) GetTrustedContacts() []TrustedContact {
	if o == nil {
		return nil
	}
	return o.TrustedContacts
}

func (o *Account) GetWrapFeeBilled() *bool {
	if o == nil {
		return nil
	}
	return o.WrapFeeBilled
}
