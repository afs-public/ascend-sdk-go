// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// ContributionLimit - The max retirement contribution that can be made for the tax year, inclusive of catch-up contributions. Value is dependent on the account's registration type and account holder's age
type ContributionLimit struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *ContributionLimit) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RegularAmount - Summed contribution amounts throughout the year
type RegularAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RegularAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RemainingContributionAllowed - The remaining regular contribution amount allowed for the tax year. Calculated as the difference between the contribution limit for the account and its regular contribution total to date. This will return zero if the account has no contribution limit.
type RemainingContributionAllowed struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RemainingContributionAllowed) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RolloverAmount - Rollover contribution amount
type RolloverAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RolloverAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ContributionSummary - Regular and rollover contribution amounts for one tax year
type ContributionSummary struct {
	// The max retirement contribution that can be made for the tax year, inclusive of catch-up contributions. Value is dependent on the account's registration type and account holder's age
	ContributionLimit *ContributionLimit `json:"contribution_limit,omitempty"`
	// The resource name of the contribution summary
	Name *string `json:"name,omitempty"`
	// Summed contribution amounts throughout the year
	RegularAmount *RegularAmount `json:"regular_amount,omitempty"`
	// The remaining regular contribution amount allowed for the tax year. Calculated as the difference between the contribution limit for the account and its regular contribution total to date. This will return zero if the account has no contribution limit.
	RemainingContributionAllowed *RemainingContributionAllowed `json:"remaining_contribution_allowed,omitempty"`
	// Rollover contribution amount
	RolloverAmount *RolloverAmount `json:"rollover_amount,omitempty"`
	// Tax year these contribution amounts are for
	TaxYear *int `json:"tax_year,omitempty"`
}

func (o *ContributionSummary) GetContributionLimit() *ContributionLimit {
	if o == nil {
		return nil
	}
	return o.ContributionLimit
}

func (o *ContributionSummary) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ContributionSummary) GetRegularAmount() *RegularAmount {
	if o == nil {
		return nil
	}
	return o.RegularAmount
}

func (o *ContributionSummary) GetRemainingContributionAllowed() *RemainingContributionAllowed {
	if o == nil {
		return nil
	}
	return o.RemainingContributionAllowed
}

func (o *ContributionSummary) GetRolloverAmount() *RolloverAmount {
	if o == nil {
		return nil
	}
	return o.RolloverAmount
}

func (o *ContributionSummary) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}
