// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// OperatingPurpose - The purpose of the operating account.
type OperatingPurpose string

const (
	OperatingPurposeOperatingPurposeUnspecified OperatingPurpose = "OPERATING_PURPOSE_UNSPECIFIED"
	OperatingPurposeCustody                     OperatingPurpose = "CUSTODY"
	OperatingPurposeSecFee                      OperatingPurpose = "SEC_FEE"
	OperatingPurposeTafFee                      OperatingPurpose = "TAF_FEE"
	OperatingPurposeTefraWithholding            OperatingPurpose = "TEFRA_WITHHOLDING"
	OperatingPurposeSuspense                    OperatingPurpose = "SUSPENSE"
	OperatingPurposeAllocation                  OperatingPurpose = "ALLOCATION"
	OperatingPurposeError                       OperatingPurpose = "ERROR"
	OperatingPurposeDeposit                     OperatingPurpose = "DEPOSIT"
	OperatingPurposeWriteOff                    OperatingPurpose = "WRITE_OFF"
	OperatingPurposeUnsecuredReserve            OperatingPurpose = "UNSECURED_RESERVE"
	OperatingPurposePayable                     OperatingPurpose = "PAYABLE"
	OperatingPurposeCommission                  OperatingPurpose = "COMMISSION"
	OperatingPurposeEscheatment                 OperatingPurpose = "ESCHEATMENT"
	OperatingPurposeInterestRevenue             OperatingPurpose = "INTEREST_REVENUE"
	OperatingPurposeStreetDepository            OperatingPurpose = "STREET_DEPOSITORY"
	OperatingPurposeInventory                   OperatingPurpose = "INVENTORY"
	OperatingPurposeTaxWithholding              OperatingPurpose = "TAX_WITHHOLDING"
	OperatingPurposeFee                         OperatingPurpose = "FEE"
	OperatingPurposePrincipalTrading            OperatingPurpose = "PRINCIPAL_TRADING"
)

func (e OperatingPurpose) ToPointer() *OperatingPurpose {
	return &e
}
func (e *OperatingPurpose) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OPERATING_PURPOSE_UNSPECIFIED":
		fallthrough
	case "CUSTODY":
		fallthrough
	case "SEC_FEE":
		fallthrough
	case "TAF_FEE":
		fallthrough
	case "TEFRA_WITHHOLDING":
		fallthrough
	case "SUSPENSE":
		fallthrough
	case "ALLOCATION":
		fallthrough
	case "ERROR":
		fallthrough
	case "DEPOSIT":
		fallthrough
	case "WRITE_OFF":
		fallthrough
	case "UNSECURED_RESERVE":
		fallthrough
	case "PAYABLE":
		fallthrough
	case "COMMISSION":
		fallthrough
	case "ESCHEATMENT":
		fallthrough
	case "INTEREST_REVENUE":
		fallthrough
	case "STREET_DEPOSITORY":
		fallthrough
	case "INVENTORY":
		fallthrough
	case "TAX_WITHHOLDING":
		fallthrough
	case "FEE":
		fallthrough
	case "PRINCIPAL_TRADING":
		*e = OperatingPurpose(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OperatingPurpose: %v", v)
	}
}

// OperatingEnrollmentMetadataCreate - Enrollment metadata for the REGISTRATION_OPERATING enrollment type.
type OperatingEnrollmentMetadataCreate struct {
	// The purpose of the operating account.
	OperatingPurpose OperatingPurpose `json:"operating_purpose"`
	// Optional subtitle for the operating purpose
	Subtitle *string `json:"subtitle,omitempty"`
	// Enrollment metadata for TAX_WITHHOLDING operating purpose
	TaxWithholdingMetadata *TaxWithholdingMetadataCreate `json:"tax_withholding_metadata,omitempty"`
}

func (o *OperatingEnrollmentMetadataCreate) GetOperatingPurpose() OperatingPurpose {
	if o == nil {
		return OperatingPurpose("")
	}
	return o.OperatingPurpose
}

func (o *OperatingEnrollmentMetadataCreate) GetSubtitle() *string {
	if o == nil {
		return nil
	}
	return o.Subtitle
}

func (o *OperatingEnrollmentMetadataCreate) GetTaxWithholdingMetadata() *TaxWithholdingMetadataCreate {
	if o == nil {
		return nil
	}
	return o.TaxWithholdingMetadata
}
