// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// CancelTradeAllocationResponseAccruedInterestAmount - The amount of interest that has been accrued in the issuing currency for a single instrument.
type CancelTradeAllocationResponseAccruedInterestAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelTradeAllocationResponseAccruedInterestAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelTradeAllocationResponseAssetType - Type of the asset being traded.
type CancelTradeAllocationResponseAssetType string

const (
	CancelTradeAllocationResponseAssetTypeAssetTypeUnspecified CancelTradeAllocationResponseAssetType = "ASSET_TYPE_UNSPECIFIED"
	CancelTradeAllocationResponseAssetTypeEquity               CancelTradeAllocationResponseAssetType = "EQUITY"
	CancelTradeAllocationResponseAssetTypeFixedIncome          CancelTradeAllocationResponseAssetType = "FIXED_INCOME"
)

func (e CancelTradeAllocationResponseAssetType) ToPointer() *CancelTradeAllocationResponseAssetType {
	return &e
}

// CancelTradeAllocationResponseBrokerCapacity - Broker capacity for the trade.
type CancelTradeAllocationResponseBrokerCapacity string

const (
	CancelTradeAllocationResponseBrokerCapacityCapacityUnspecified CancelTradeAllocationResponseBrokerCapacity = "CAPACITY_UNSPECIFIED"
	CancelTradeAllocationResponseBrokerCapacityAgency              CancelTradeAllocationResponseBrokerCapacity = "AGENCY"
	CancelTradeAllocationResponseBrokerCapacityPrincipal           CancelTradeAllocationResponseBrokerCapacity = "PRINCIPAL"
	CancelTradeAllocationResponseBrokerCapacityMixed               CancelTradeAllocationResponseBrokerCapacity = "MIXED"
)

func (e CancelTradeAllocationResponseBrokerCapacity) ToPointer() *CancelTradeAllocationResponseBrokerCapacity {
	return &e
}

// CancelTradeAllocationResponseCommissionAmount - Commission amount of the trade allocation that will only be applied to the to_account_id.
type CancelTradeAllocationResponseCommissionAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelTradeAllocationResponseCommissionAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelTradeAllocationResponseGrossAmount - Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
type CancelTradeAllocationResponseGrossAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelTradeAllocationResponseGrossAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelTradeAllocationResponseIdentifierType - Identifier type for the asset being traded.
type CancelTradeAllocationResponseIdentifierType string

const (
	CancelTradeAllocationResponseIdentifierTypeIdentifierTypeUnspecified CancelTradeAllocationResponseIdentifierType = "IDENTIFIER_TYPE_UNSPECIFIED"
	CancelTradeAllocationResponseIdentifierTypeAssetID                   CancelTradeAllocationResponseIdentifierType = "ASSET_ID"
	CancelTradeAllocationResponseIdentifierTypeSymbol                    CancelTradeAllocationResponseIdentifierType = "SYMBOL"
	CancelTradeAllocationResponseIdentifierTypeCusip                     CancelTradeAllocationResponseIdentifierType = "CUSIP"
	CancelTradeAllocationResponseIdentifierTypeIsin                      CancelTradeAllocationResponseIdentifierType = "ISIN"
)

func (e CancelTradeAllocationResponseIdentifierType) ToPointer() *CancelTradeAllocationResponseIdentifierType {
	return &e
}

// CancelTradeAllocationResponsePrevailingMarketPrice - The price for the instrument that is prevailing in the market. Required for FIXED_INCOME trade allocations when the broker_capacity is PRINCIPAL.
type CancelTradeAllocationResponsePrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelTradeAllocationResponsePrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelTradeAllocationResponsePrice - Price with requirement of 8 or less integral number and 8 or less fractional precision.
type CancelTradeAllocationResponsePrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelTradeAllocationResponsePrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelTradeAllocationResponsePriceAdjustmentAmount - Total monetary value of the price_adjustment
type CancelTradeAllocationResponsePriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelTradeAllocationResponsePriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelTradeAllocationResponsePriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security.
type CancelTradeAllocationResponsePriceAdjustmentType string

const (
	CancelTradeAllocationResponsePriceAdjustmentTypePriceAdjustmentTypeUnspecified CancelTradeAllocationResponsePriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	CancelTradeAllocationResponsePriceAdjustmentTypeMarkup                         CancelTradeAllocationResponsePriceAdjustmentType = "MARKUP"
	CancelTradeAllocationResponsePriceAdjustmentTypeMarkdown                       CancelTradeAllocationResponsePriceAdjustmentType = "MARKDOWN"
	CancelTradeAllocationResponsePriceAdjustmentTypeGrossCredit                    CancelTradeAllocationResponsePriceAdjustmentType = "GROSS_CREDIT"
)

func (e CancelTradeAllocationResponsePriceAdjustmentType) ToPointer() *CancelTradeAllocationResponsePriceAdjustmentType {
	return &e
}

// CancelTradeAllocationResponsePriceAdjustment - Price adjustment that will be applied to the net price of the security.
type CancelTradeAllocationResponsePriceAdjustment struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *CancelTradeAllocationResponsePriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security.
	PriceAdjustmentType *CancelTradeAllocationResponsePriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *CancelTradeAllocationResponsePriceAdjustment) GetPriceAdjustmentAmount() *CancelTradeAllocationResponsePriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *CancelTradeAllocationResponsePriceAdjustment) GetPriceAdjustmentType() *CancelTradeAllocationResponsePriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// CancelTradeAllocationResponseQuantity - Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
type CancelTradeAllocationResponseQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CancelTradeAllocationResponseQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CancelTradeAllocationResponseSettlementDate - Defaults to T+1 for equities if this is not provided. Calculated using the execution_time field in Eastern Time.
type CancelTradeAllocationResponseSettlementDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *CancelTradeAllocationResponseSettlementDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *CancelTradeAllocationResponseSettlementDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *CancelTradeAllocationResponseSettlementDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// CancelTradeAllocationResponseSideModifier - Side modifier for the trade allocation.
type CancelTradeAllocationResponseSideModifier string

const (
	CancelTradeAllocationResponseSideModifierSideModifierUnspecified CancelTradeAllocationResponseSideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	CancelTradeAllocationResponseSideModifierShort                   CancelTradeAllocationResponseSideModifier = "SHORT"
	CancelTradeAllocationResponseSideModifierShortExempt             CancelTradeAllocationResponseSideModifier = "SHORT_EXEMPT"
	CancelTradeAllocationResponseSideModifierShortCover              CancelTradeAllocationResponseSideModifier = "SHORT_COVER"
	CancelTradeAllocationResponseSideModifierOpen                    CancelTradeAllocationResponseSideModifier = "OPEN"
	CancelTradeAllocationResponseSideModifierClose                   CancelTradeAllocationResponseSideModifier = "CLOSE"
)

func (e CancelTradeAllocationResponseSideModifier) ToPointer() *CancelTradeAllocationResponseSideModifier {
	return &e
}

type CancelTradeAllocationResponseSpecialInstructions string

const (
	CancelTradeAllocationResponseSpecialInstructionsSpecialInstructionsUnspecified CancelTradeAllocationResponseSpecialInstructions = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
	CancelTradeAllocationResponseSpecialInstructionsRule144                        CancelTradeAllocationResponseSpecialInstructions = "RULE_144"
	CancelTradeAllocationResponseSpecialInstructionsWithDividend                   CancelTradeAllocationResponseSpecialInstructions = "WITH_DIVIDEND"
	CancelTradeAllocationResponseSpecialInstructionsWithRights                     CancelTradeAllocationResponseSpecialInstructions = "WITH_RIGHTS"
	CancelTradeAllocationResponseSpecialInstructionsCloseContract                  CancelTradeAllocationResponseSpecialInstructions = "CLOSE_CONTRACT"
	CancelTradeAllocationResponseSpecialInstructionsCoverShort                     CancelTradeAllocationResponseSpecialInstructions = "COVER_SHORT"
	CancelTradeAllocationResponseSpecialInstructionsCrossTrade                     CancelTradeAllocationResponseSpecialInstructions = "CROSS_TRADE"
	CancelTradeAllocationResponseSpecialInstructionsOpenContractCovered            CancelTradeAllocationResponseSpecialInstructions = "OPEN_CONTRACT_COVERED"
	CancelTradeAllocationResponseSpecialInstructionsDiscretionExercised            CancelTradeAllocationResponseSpecialInstructions = "DISCRETION_EXERCISED"
	CancelTradeAllocationResponseSpecialInstructionsDiscretionNotExercised         CancelTradeAllocationResponseSpecialInstructions = "DISCRETION_NOT_EXERCISED"
	CancelTradeAllocationResponseSpecialInstructionsOptionAssignment               CancelTradeAllocationResponseSpecialInstructions = "OPTION_ASSIGNMENT"
	CancelTradeAllocationResponseSpecialInstructionsEmployeeStockOption            CancelTradeAllocationResponseSpecialInstructions = "EMPLOYEE_STOCK_OPTION"
	CancelTradeAllocationResponseSpecialInstructionsInvestmentBanking              CancelTradeAllocationResponseSpecialInstructions = "INVESTMENT_BANKING"
	CancelTradeAllocationResponseSpecialInstructionsBrokerDealerOrder              CancelTradeAllocationResponseSpecialInstructions = "BROKER_DEALER_ORDER"
	CancelTradeAllocationResponseSpecialInstructionsMakeMarketInSecurity           CancelTradeAllocationResponseSpecialInstructions = "MAKE_MARKET_IN_SECURITY"
	CancelTradeAllocationResponseSpecialInstructionsMakeMarketSolicited            CancelTradeAllocationResponseSpecialInstructions = "MAKE_MARKET_SOLICITED"
	CancelTradeAllocationResponseSpecialInstructionsMakeMarketUnsolicited          CancelTradeAllocationResponseSpecialInstructions = "MAKE_MARKET_UNSOLICITED"
	CancelTradeAllocationResponseSpecialInstructionsCustomerDirected               CancelTradeAllocationResponseSpecialInstructions = "CUSTOMER_DIRECTED"
	CancelTradeAllocationResponseSpecialInstructionsFullyRegistered                CancelTradeAllocationResponseSpecialInstructions = "FULLY_REGISTERED"
	CancelTradeAllocationResponseSpecialInstructionsOpenContract                   CancelTradeAllocationResponseSpecialInstructions = "OPEN_CONTRACT"
	CancelTradeAllocationResponseSpecialInstructionsOddlotDiffOnRequest            CancelTradeAllocationResponseSpecialInstructions = "ODDLOT_DIFF_ON_REQUEST"
	CancelTradeAllocationResponseSpecialInstructionsProspectusEnclosed             CancelTradeAllocationResponseSpecialInstructions = "PROSPECTUS_ENCLOSED"
	CancelTradeAllocationResponseSpecialInstructionsProspectusSeparateMail         CancelTradeAllocationResponseSpecialInstructions = "PROSPECTUS_SEPARATE_MAIL"
	CancelTradeAllocationResponseSpecialInstructionsSolicited                      CancelTradeAllocationResponseSpecialInstructions = "SOLICITED"
	CancelTradeAllocationResponseSpecialInstructionsUnsolicited                    CancelTradeAllocationResponseSpecialInstructions = "UNSOLICITED"
	CancelTradeAllocationResponseSpecialInstructionsXDividend                      CancelTradeAllocationResponseSpecialInstructions = "X_DIVIDEND"
	CancelTradeAllocationResponseSpecialInstructionsActingAsPrincipal              CancelTradeAllocationResponseSpecialInstructions = "ACTING_AS_PRINCIPAL"
	CancelTradeAllocationResponseSpecialInstructionsAveragePrice                   CancelTradeAllocationResponseSpecialInstructions = "AVERAGE_PRICE"
	CancelTradeAllocationResponseSpecialInstructionsBrokerLiquidation              CancelTradeAllocationResponseSpecialInstructions = "BROKER_LIQUIDATION"
	CancelTradeAllocationResponseSpecialInstructionsCouponBooks                    CancelTradeAllocationResponseSpecialInstructions = "COUPON_BOOKS"
	CancelTradeAllocationResponseSpecialInstructionsHasPostageFee                  CancelTradeAllocationResponseSpecialInstructions = "HAS_POSTAGE_FEE"
	CancelTradeAllocationResponseSpecialInstructionsInternetOrder                  CancelTradeAllocationResponseSpecialInstructions = "INTERNET_ORDER"
	CancelTradeAllocationResponseSpecialInstructionsMarginSellout                  CancelTradeAllocationResponseSpecialInstructions = "MARGIN_SELLOUT"
	CancelTradeAllocationResponseSpecialInstructionsMarketMakersAsPrincipal        CancelTradeAllocationResponseSpecialInstructions = "MARKET_MAKERS_AS_PRINCIPAL"
	CancelTradeAllocationResponseSpecialInstructionsNegativeNetProceed             CancelTradeAllocationResponseSpecialInstructions = "NEGATIVE_NET_PROCEED"
	CancelTradeAllocationResponseSpecialInstructionsPreFigIndicator                CancelTradeAllocationResponseSpecialInstructions = "PRE_FIG_INDICATOR"
	CancelTradeAllocationResponseSpecialInstructionsRisklessPrincipalInstruction   CancelTradeAllocationResponseSpecialInstructions = "RISKLESS_PRINCIPAL_INSTRUCTION"
	CancelTradeAllocationResponseSpecialInstructionsShortInstruction               CancelTradeAllocationResponseSpecialInstructions = "SHORT_INSTRUCTION"
	CancelTradeAllocationResponseSpecialInstructionsThirdMarket                    CancelTradeAllocationResponseSpecialInstructions = "THIRD_MARKET"
	CancelTradeAllocationResponseSpecialInstructionsSuppressMsrbTransmission       CancelTradeAllocationResponseSpecialInstructions = "SUPPRESS_MSRB_TRANSMISSION"
	CancelTradeAllocationResponseSpecialInstructionsSuppressTraceReporting         CancelTradeAllocationResponseSpecialInstructions = "SUPPRESS_TRACE_REPORTING"
	CancelTradeAllocationResponseSpecialInstructionsSuppressEmailNotification      CancelTradeAllocationResponseSpecialInstructions = "SUPPRESS_EMAIL_NOTIFICATION"
	CancelTradeAllocationResponseSpecialInstructionsStockReward                    CancelTradeAllocationResponseSpecialInstructions = "STOCK_REWARD"
	CancelTradeAllocationResponseSpecialInstructionsSuppressRegFees                CancelTradeAllocationResponseSpecialInstructions = "SUPPRESS_REG_FEES"
	CancelTradeAllocationResponseSpecialInstructionsSuppressSecFee                 CancelTradeAllocationResponseSpecialInstructions = "SUPPRESS_SEC_FEE"
	CancelTradeAllocationResponseSpecialInstructionsSuppressTafFee                 CancelTradeAllocationResponseSpecialInstructions = "SUPPRESS_TAF_FEE"
	CancelTradeAllocationResponseSpecialInstructionsDividendReinvestment           CancelTradeAllocationResponseSpecialInstructions = "DIVIDEND_REINVESTMENT"
)

func (e CancelTradeAllocationResponseSpecialInstructions) ToPointer() *CancelTradeAllocationResponseSpecialInstructions {
	return &e
}

// CancelTradeAllocationResponseState - The state that the trade allocation is in.
type CancelTradeAllocationResponseState string

const (
	CancelTradeAllocationResponseStateStateUnspecified CancelTradeAllocationResponseState = "STATE_UNSPECIFIED"
	CancelTradeAllocationResponseStateCreating         CancelTradeAllocationResponseState = "CREATING"
	CancelTradeAllocationResponseStateRebooking        CancelTradeAllocationResponseState = "REBOOKING"
	CancelTradeAllocationResponseStateCanceling        CancelTradeAllocationResponseState = "CANCELING"
	CancelTradeAllocationResponseStateBooked           CancelTradeAllocationResponseState = "BOOKED"
	CancelTradeAllocationResponseStateRebooked         CancelTradeAllocationResponseState = "REBOOKED"
	CancelTradeAllocationResponseStateCanceled         CancelTradeAllocationResponseState = "CANCELED"
	CancelTradeAllocationResponseStateFailed           CancelTradeAllocationResponseState = "FAILED"
)

func (e CancelTradeAllocationResponseState) ToPointer() *CancelTradeAllocationResponseState {
	return &e
}

// CancelTradeAllocationResponseToSide - Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
type CancelTradeAllocationResponseToSide string

const (
	CancelTradeAllocationResponseToSideSideUnspecified CancelTradeAllocationResponseToSide = "SIDE_UNSPECIFIED"
	CancelTradeAllocationResponseToSideBuy             CancelTradeAllocationResponseToSide = "BUY"
	CancelTradeAllocationResponseToSideSell            CancelTradeAllocationResponseToSide = "SELL"
)

func (e CancelTradeAllocationResponseToSide) ToPointer() *CancelTradeAllocationResponseToSide {
	return &e
}

// CancelTradeAllocationResponseWhenIssued - Denotes that this trade allocation was either when_issued or when_distributed.
type CancelTradeAllocationResponseWhenIssued string

const (
	CancelTradeAllocationResponseWhenIssuedWhenIssuedTypeUnspecified CancelTradeAllocationResponseWhenIssued = "WHEN_ISSUED_TYPE_UNSPECIFIED"
	CancelTradeAllocationResponseWhenIssuedWhenIssued                CancelTradeAllocationResponseWhenIssued = "WHEN_ISSUED"
	CancelTradeAllocationResponseWhenIssuedWhenDistributed           CancelTradeAllocationResponseWhenIssued = "WHEN_DISTRIBUTED"
)

func (e CancelTradeAllocationResponseWhenIssued) ToPointer() *CancelTradeAllocationResponseWhenIssued {
	return &e
}

// CancelTradeAllocationResponseTradeAllocation - The trade allocation that was canceled.
type CancelTradeAllocationResponseTradeAllocation struct {
	// The amount of interest that has been accrued in the issuing currency for a single instrument.
	AccruedInterestAmount *CancelTradeAllocationResponseAccruedInterestAmount `json:"accrued_interest_amount,omitempty"`
	// Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Type of the asset being traded.
	AssetType *CancelTradeAllocationResponseAssetType `json:"asset_type,omitempty"`
	// The yield associated with an individual fill of a fixed income trade. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	BondYield []BondYield `json:"bond_yield,omitempty"`
	// Broker capacity for the trade.
	BrokerCapacity *CancelTradeAllocationResponseBrokerCapacity `json:"broker_capacity,omitempty"`
	// The unique identifier that is associated with an order. This is useful for associating the trade allocation with the original trade. This will be assigned a unique UUID if not provided.
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Commission amount of the trade allocation that will only be applied to the to_account_id.
	CommissionAmount *CancelTradeAllocationResponseCommissionAmount `json:"commission_amount,omitempty"`
	// Timestamp of when the trade allocation took place. If settlement_date is not provided, this field will be converted into Eastern Time and used to calculate settlement_date.
	ExecutionTime *time.Time `json:"execution_time,omitempty"`
	// Client calculated fees that will only be applied to the to_account_id. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed.
	Fees []BookingFee `json:"fees,omitempty"`
	// The ULID formatted account_id that the positions will be moved from.
	FromAccountID *string `json:"from_account_id,omitempty"`
	// The current activity_id of the trade allocation that positions will be moved from in the Ledger.
	FromActivityID *string `json:"from_activity_id,omitempty"`
	// Gross amount is calculated by the Booking service by multiplying price and quantity and fixing it to 2 fractional precision. Optionally specifiable. If present, will override the gross_amount calculated above.
	GrossAmount *CancelTradeAllocationResponseGrossAmount `json:"gross_amount,omitempty"`
	// Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Identifier type for the asset being traded.
	IdentifierType *CancelTradeAllocationResponseIdentifierType `json:"identifier_type,omitempty"`
	// Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP.
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// One or many lot matching instructions for the trade allocation.
	LotMatchingInstructions []BookingLot `json:"lot_matching_instructions,omitempty"`
	// Caller provided but can be used for booking-service to note original trade details when booking into the error account or using the error asset.
	Memo *string `json:"memo,omitempty"`
	// The resource name of the trade allocation.
	Name *string `json:"name,omitempty"`
	// The price for the instrument that is prevailing in the market. Required for FIXED_INCOME trade allocations when the broker_capacity is PRINCIPAL.
	PrevailingMarketPrice *CancelTradeAllocationResponsePrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Price with requirement of 8 or less integral number and 8 or less fractional precision.
	Price *CancelTradeAllocationResponsePrice `json:"price,omitempty"`
	// Price adjustment that will be applied to the net price of the security.
	PriceAdjustment *CancelTradeAllocationResponsePriceAdjustment `json:"price_adjustment,omitempty"`
	// Quantity with requirement of 12 or less integral number and 5 or less fractional precision.
	Quantity *CancelTradeAllocationResponseQuantity `json:"quantity,omitempty"`
	// Defaults to T+1 for equities if this is not provided. Calculated using the execution_time field in Eastern Time.
	SettlementDate *CancelTradeAllocationResponseSettlementDate `json:"settlement_date,omitempty"`
	// Side modifier for the trade allocation.
	SideModifier *CancelTradeAllocationResponseSideModifier `json:"side_modifier,omitempty"`
	// The source of the submission.
	SourceApplication *string `json:"source_application,omitempty"`
	// An enumerated list of values used to indicate certain attributes about a trade allocation (E.g. BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)
	SpecialInstructions []CancelTradeAllocationResponseSpecialInstructions `json:"special_instructions,omitempty"`
	// The state that the trade allocation is in.
	State *CancelTradeAllocationResponseState `json:"state,omitempty"`
	// The ULID formatted account_id that the positions will be moved to.
	ToAccountID *string `json:"to_account_id,omitempty"`
	// The current activity_id of the trade allocation that positions will be moved to in the Ledger.
	ToActivityID *string `json:"to_activity_id,omitempty"`
	// Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
	ToSide *CancelTradeAllocationResponseToSide `json:"to_side,omitempty"`
	// A ULID to uniquely identify the trade allocation globally.
	TradeAllocationID *string `json:"trade_allocation_id,omitempty"`
	// Denotes that this trade allocation was either when_issued or when_distributed.
	WhenIssued *CancelTradeAllocationResponseWhenIssued `json:"when_issued,omitempty"`
}

func (c CancelTradeAllocationResponseTradeAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CancelTradeAllocationResponseTradeAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetAccruedInterestAmount() *CancelTradeAllocationResponseAccruedInterestAmount {
	if o == nil {
		return nil
	}
	return o.AccruedInterestAmount
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetAssetType() *CancelTradeAllocationResponseAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetBondYield() []BondYield {
	if o == nil {
		return nil
	}
	return o.BondYield
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetBrokerCapacity() *CancelTradeAllocationResponseBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetCommissionAmount() *CancelTradeAllocationResponseCommissionAmount {
	if o == nil {
		return nil
	}
	return o.CommissionAmount
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetExecutionTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExecutionTime
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetFees() []BookingFee {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.FromAccountID
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetFromActivityID() *string {
	if o == nil {
		return nil
	}
	return o.FromActivityID
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetGrossAmount() *CancelTradeAllocationResponseGrossAmount {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetIdentifierType() *CancelTradeAllocationResponseIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetLotMatchingInstructions() []BookingLot {
	if o == nil {
		return nil
	}
	return o.LotMatchingInstructions
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetPrevailingMarketPrice() *CancelTradeAllocationResponsePrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetPrice() *CancelTradeAllocationResponsePrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetPriceAdjustment() *CancelTradeAllocationResponsePriceAdjustment {
	if o == nil {
		return nil
	}
	return o.PriceAdjustment
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetQuantity() *CancelTradeAllocationResponseQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetSettlementDate() *CancelTradeAllocationResponseSettlementDate {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetSideModifier() *CancelTradeAllocationResponseSideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetSourceApplication() *string {
	if o == nil {
		return nil
	}
	return o.SourceApplication
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetSpecialInstructions() []CancelTradeAllocationResponseSpecialInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetState() *CancelTradeAllocationResponseState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.ToAccountID
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetToActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ToActivityID
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetToSide() *CancelTradeAllocationResponseToSide {
	if o == nil {
		return nil
	}
	return o.ToSide
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetTradeAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.TradeAllocationID
}

func (o *CancelTradeAllocationResponseTradeAllocation) GetWhenIssued() *CancelTradeAllocationResponseWhenIssued {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

// CancelTradeAllocationResponse - A response for the cancel trade allocation method.
type CancelTradeAllocationResponse struct {
	// The trade allocation that was canceled.
	TradeAllocation *CancelTradeAllocationResponseTradeAllocation `json:"trade_allocation,omitempty"`
}

func (o *CancelTradeAllocationResponse) GetTradeAllocation() *CancelTradeAllocationResponseTradeAllocation {
	if o == nil {
		return nil
	}
	return o.TradeAllocation
}
