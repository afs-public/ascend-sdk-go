// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// AssetTradability - Indicators to determine what types of orders allowed to be traded
type AssetTradability struct {
	// Indicates whether fractional quantities are allowed to be closed
	CloseFractionalQuantityEnabled *bool `json:"close_fractional_quantity_enabled,omitempty"`
	// Indicates whether notional quantities are allowed to be closed
	CloseNotionalQuantityEnabled *bool `json:"close_notional_quantity_enabled,omitempty"`
	// Indicates whether whole quantities are allowed to be closed
	CloseWholeQuantityEnabled *bool `json:"close_whole_quantity_enabled,omitempty"`
	// Indicates whether fractional quantities are allowed to be opened
	OpenFractionalQuantityEnabled *bool `json:"open_fractional_quantity_enabled,omitempty"`
	// Indicates whether notional quantities are allowed to be opened
	OpenNotionalQuantityEnabled *bool `json:"open_notional_quantity_enabled,omitempty"`
	// Indicates whether whole quantities are allowed to be opened
	OpenWholeQuantityEnabled *bool `json:"open_whole_quantity_enabled,omitempty"`
}

func (o *AssetTradability) GetCloseFractionalQuantityEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CloseFractionalQuantityEnabled
}

func (o *AssetTradability) GetCloseNotionalQuantityEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CloseNotionalQuantityEnabled
}

func (o *AssetTradability) GetCloseWholeQuantityEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CloseWholeQuantityEnabled
}

func (o *AssetTradability) GetOpenFractionalQuantityEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.OpenFractionalQuantityEnabled
}

func (o *AssetTradability) GetOpenNotionalQuantityEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.OpenNotionalQuantityEnabled
}

func (o *AssetTradability) GetOpenWholeQuantityEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.OpenWholeQuantityEnabled
}

// AssetTradingConfigAssetType - Type of the asset
type AssetTradingConfigAssetType string

const (
	AssetTradingConfigAssetTypeAssetTypeUnspecified AssetTradingConfigAssetType = "ASSET_TYPE_UNSPECIFIED"
	AssetTradingConfigAssetTypeEquity               AssetTradingConfigAssetType = "EQUITY"
	AssetTradingConfigAssetTypeMutualFund           AssetTradingConfigAssetType = "MUTUAL_FUND"
	AssetTradingConfigAssetTypeOption               AssetTradingConfigAssetType = "OPTION"
	AssetTradingConfigAssetTypeIndex                AssetTradingConfigAssetType = "INDEX"
)

func (e AssetTradingConfigAssetType) ToPointer() *AssetTradingConfigAssetType {
	return &e
}

// OptionRootTradability - Indicators on an asset who has Options
type OptionRootTradability struct {
	// Indicates whether whole quantities are allowed to be closed for Options
	CloseOptionsWholeQuantityEnabled *bool `json:"close_options_whole_quantity_enabled,omitempty"`
	// Indicates whether whole quantities are allowed to be opened for nonstandard Options
	OpenNonstandardOptionsWholeQuantityEnabled *bool `json:"open_nonstandard_options_whole_quantity_enabled,omitempty"`
	// Indicates whether whole quantities are allowed to be opened for standard Options
	OpenStandardOptionsWholeQuantityEnabled *bool `json:"open_standard_options_whole_quantity_enabled,omitempty"`
}

func (o *OptionRootTradability) GetCloseOptionsWholeQuantityEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CloseOptionsWholeQuantityEnabled
}

func (o *OptionRootTradability) GetOpenNonstandardOptionsWholeQuantityEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.OpenNonstandardOptionsWholeQuantityEnabled
}

func (o *OptionRootTradability) GetOpenStandardOptionsWholeQuantityEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.OpenStandardOptionsWholeQuantityEnabled
}

// AssetTradingConfig - The message describing asset trading config
type AssetTradingConfig struct {
	// Unique identifier for the asset
	AssetID *string `json:"asset_id,omitempty"`
	// Indicators to determine what types of orders allowed to be traded
	AssetTradability *AssetTradability `json:"asset_tradability,omitempty"`
	// Type of the asset
	AssetType *AssetTradingConfigAssetType `json:"asset_type,omitempty"`
	// Unique identifier for the correspondent
	CorrespondentID *string `json:"correspondent_id,omitempty"`
	// Identifier assigned to a security by the CUSIP Service Bureau of Standard & Poor’s Corporation Population of this field is determined by whether the correspondent has access to the data
	Cusip *string `json:"cusip,omitempty"`
	// Stands for the International Securities Identification Number Population of this field is determined by whether the correspondent has access to the data
	Isin *string `json:"isin,omitempty"`
	// correspondents/{correspondent_id}/assets/{asset_id}/tradingConfig
	Name *string `json:"name,omitempty"`
	// Indicators on an asset who has Options
	OptionRootTradability *OptionRootTradability `json:"option_root_tradability,omitempty"`
	// An arrangement of characters—usually letters and or numbers — usually representing securities on an exchange. The format of the symbol is determined by the asset type.
	Symbol *string `json:"symbol,omitempty"`
}

func (o *AssetTradingConfig) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *AssetTradingConfig) GetAssetTradability() *AssetTradability {
	if o == nil {
		return nil
	}
	return o.AssetTradability
}

func (o *AssetTradingConfig) GetAssetType() *AssetTradingConfigAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *AssetTradingConfig) GetCorrespondentID() *string {
	if o == nil {
		return nil
	}
	return o.CorrespondentID
}

func (o *AssetTradingConfig) GetCusip() *string {
	if o == nil {
		return nil
	}
	return o.Cusip
}

func (o *AssetTradingConfig) GetIsin() *string {
	if o == nil {
		return nil
	}
	return o.Isin
}

func (o *AssetTradingConfig) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AssetTradingConfig) GetOptionRootTradability() *OptionRootTradability {
	if o == nil {
		return nil
	}
	return o.OptionRootTradability
}

func (o *AssetTradingConfig) GetSymbol() *string {
	if o == nil {
		return nil
	}
	return o.Symbol
}
