// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// TradeCreateAssetType - Type of the asset being traded.
type TradeCreateAssetType string

const (
	TradeCreateAssetTypeAssetTypeUnspecified TradeCreateAssetType = "ASSET_TYPE_UNSPECIFIED"
	TradeCreateAssetTypeEquity               TradeCreateAssetType = "EQUITY"
	TradeCreateAssetTypeFixedIncome          TradeCreateAssetType = "FIXED_INCOME"
)

func (e TradeCreateAssetType) ToPointer() *TradeCreateAssetType {
	return &e
}

// TradeCreateBrokerCapacity - Broker capacity for the trade.
type TradeCreateBrokerCapacity string

const (
	TradeCreateBrokerCapacityCapacityUnspecified TradeCreateBrokerCapacity = "CAPACITY_UNSPECIFIED"
	TradeCreateBrokerCapacityAgency              TradeCreateBrokerCapacity = "AGENCY"
	TradeCreateBrokerCapacityPrincipal           TradeCreateBrokerCapacity = "PRINCIPAL"
	TradeCreateBrokerCapacityMixed               TradeCreateBrokerCapacity = "MIXED"
)

func (e TradeCreateBrokerCapacity) ToPointer() *TradeCreateBrokerCapacity {
	return &e
}

// TradeCreateIdentifierType - Identifier type for the asset being traded.
type TradeCreateIdentifierType string

const (
	TradeCreateIdentifierTypeIdentifierTypeUnspecified TradeCreateIdentifierType = "IDENTIFIER_TYPE_UNSPECIFIED"
	TradeCreateIdentifierTypeAssetID                   TradeCreateIdentifierType = "ASSET_ID"
	TradeCreateIdentifierTypeSymbol                    TradeCreateIdentifierType = "SYMBOL"
	TradeCreateIdentifierTypeCusip                     TradeCreateIdentifierType = "CUSIP"
	TradeCreateIdentifierTypeIsin                      TradeCreateIdentifierType = "ISIN"
)

func (e TradeCreateIdentifierType) ToPointer() *TradeCreateIdentifierType {
	return &e
}

// RouteType - Route type for the trade.
type RouteType string

const (
	RouteTypeRouteTypeUnspecified RouteType = "ROUTE_TYPE_UNSPECIFIED"
	RouteTypeDma                  RouteType = "DMA"
	RouteTypeMngd                 RouteType = "MNGD"
	RouteTypeQuik                 RouteType = "QUIK"
	RouteTypeAlgo                 RouteType = "ALGO"
	RouteTypeAway                 RouteType = "AWAY"
	RouteTypeCorr                 RouteType = "CORR"
	RouteTypeBoats                RouteType = "BOATS"
)

func (e RouteType) ToPointer() *RouteType {
	return &e
}

// TradeCreateSide - Denotes if the trade is a SELL or a BUY.
type TradeCreateSide string

const (
	TradeCreateSideSideUnspecified TradeCreateSide = "SIDE_UNSPECIFIED"
	TradeCreateSideBuy             TradeCreateSide = "BUY"
	TradeCreateSideSell            TradeCreateSide = "SELL"
)

func (e TradeCreateSide) ToPointer() *TradeCreateSide {
	return &e
}

// SideModifier - Side modifier for the trade.
type SideModifier string

const (
	SideModifierSideModifierUnspecified SideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	SideModifierShort                   SideModifier = "SHORT"
	SideModifierShortExempt             SideModifier = "SHORT_EXEMPT"
	SideModifierShortCover              SideModifier = "SHORT_COVER"
	SideModifierOpen                    SideModifier = "OPEN"
	SideModifierClose                   SideModifier = "CLOSE"
)

func (e SideModifier) ToPointer() *SideModifier {
	return &e
}

type SpecialInstructions string

const (
	SpecialInstructionsSpecialInstructionsUnspecified SpecialInstructions = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
	SpecialInstructionsRule144                        SpecialInstructions = "RULE_144"
	SpecialInstructionsWithDividend                   SpecialInstructions = "WITH_DIVIDEND"
	SpecialInstructionsWithRights                     SpecialInstructions = "WITH_RIGHTS"
	SpecialInstructionsCloseContract                  SpecialInstructions = "CLOSE_CONTRACT"
	SpecialInstructionsCoverShort                     SpecialInstructions = "COVER_SHORT"
	SpecialInstructionsCrossTrade                     SpecialInstructions = "CROSS_TRADE"
	SpecialInstructionsOpenContractCovered            SpecialInstructions = "OPEN_CONTRACT_COVERED"
	SpecialInstructionsDiscretionExercised            SpecialInstructions = "DISCRETION_EXERCISED"
	SpecialInstructionsDiscretionNotExercised         SpecialInstructions = "DISCRETION_NOT_EXERCISED"
	SpecialInstructionsOptionAssignment               SpecialInstructions = "OPTION_ASSIGNMENT"
	SpecialInstructionsEmployeeStockOption            SpecialInstructions = "EMPLOYEE_STOCK_OPTION"
	SpecialInstructionsInvestmentBanking              SpecialInstructions = "INVESTMENT_BANKING"
	SpecialInstructionsBrokerDealerOrder              SpecialInstructions = "BROKER_DEALER_ORDER"
	SpecialInstructionsMakeMarketInSecurity           SpecialInstructions = "MAKE_MARKET_IN_SECURITY"
	SpecialInstructionsMakeMarketSolicited            SpecialInstructions = "MAKE_MARKET_SOLICITED"
	SpecialInstructionsMakeMarketUnsolicited          SpecialInstructions = "MAKE_MARKET_UNSOLICITED"
	SpecialInstructionsCustomerDirected               SpecialInstructions = "CUSTOMER_DIRECTED"
	SpecialInstructionsFullyRegistered                SpecialInstructions = "FULLY_REGISTERED"
	SpecialInstructionsOpenContract                   SpecialInstructions = "OPEN_CONTRACT"
	SpecialInstructionsOddlotDiffOnRequest            SpecialInstructions = "ODDLOT_DIFF_ON_REQUEST"
	SpecialInstructionsProspectusEnclosed             SpecialInstructions = "PROSPECTUS_ENCLOSED"
	SpecialInstructionsProspectusSeparateMail         SpecialInstructions = "PROSPECTUS_SEPARATE_MAIL"
	SpecialInstructionsSolicited                      SpecialInstructions = "SOLICITED"
	SpecialInstructionsUnsolicited                    SpecialInstructions = "UNSOLICITED"
	SpecialInstructionsXDividend                      SpecialInstructions = "X_DIVIDEND"
	SpecialInstructionsActingAsPrincipal              SpecialInstructions = "ACTING_AS_PRINCIPAL"
	SpecialInstructionsAveragePrice                   SpecialInstructions = "AVERAGE_PRICE"
	SpecialInstructionsBrokerLiquidation              SpecialInstructions = "BROKER_LIQUIDATION"
	SpecialInstructionsCouponBooks                    SpecialInstructions = "COUPON_BOOKS"
	SpecialInstructionsHasPostageFee                  SpecialInstructions = "HAS_POSTAGE_FEE"
	SpecialInstructionsInternetOrder                  SpecialInstructions = "INTERNET_ORDER"
	SpecialInstructionsMarginSellout                  SpecialInstructions = "MARGIN_SELLOUT"
	SpecialInstructionsMarketMakersAsPrincipal        SpecialInstructions = "MARKET_MAKERS_AS_PRINCIPAL"
	SpecialInstructionsNegativeNetProceed             SpecialInstructions = "NEGATIVE_NET_PROCEED"
	SpecialInstructionsPreFigIndicator                SpecialInstructions = "PRE_FIG_INDICATOR"
	SpecialInstructionsRisklessPrincipalInstruction   SpecialInstructions = "RISKLESS_PRINCIPAL_INSTRUCTION"
	SpecialInstructionsShortInstruction               SpecialInstructions = "SHORT_INSTRUCTION"
	SpecialInstructionsThirdMarket                    SpecialInstructions = "THIRD_MARKET"
	SpecialInstructionsSuppressMsrbTransmission       SpecialInstructions = "SUPPRESS_MSRB_TRANSMISSION"
	SpecialInstructionsSuppressTraceReporting         SpecialInstructions = "SUPPRESS_TRACE_REPORTING"
	SpecialInstructionsSuppressEmailNotification      SpecialInstructions = "SUPPRESS_EMAIL_NOTIFICATION"
	SpecialInstructionsStockReward                    SpecialInstructions = "STOCK_REWARD"
	SpecialInstructionsSuppressRegFees                SpecialInstructions = "SUPPRESS_REG_FEES"
	SpecialInstructionsSuppressSecFee                 SpecialInstructions = "SUPPRESS_SEC_FEE"
	SpecialInstructionsSuppressTafFee                 SpecialInstructions = "SUPPRESS_TAF_FEE"
	SpecialInstructionsDividendReinvestment           SpecialInstructions = "DIVIDEND_REINVESTMENT"
)

func (e SpecialInstructions) ToPointer() *SpecialInstructions {
	return &e
}

// Venue - Exchange venue
type Venue string

const (
	VenueExchangeVenueUnspecified Venue = "EXCHANGE_VENUE_UNSPECIFIED"
	VenueAmex                     Venue = "AMEX"
	VenueArca                     Venue = "ARCA"
	VenueBats                     Venue = "BATS"
	VenueBatsByx                  Venue = "BATS_BYX"
	VenueBoston                   Venue = "BOSTON"
	VenueBox                      Venue = "BOX"
	VenueBzx                      Venue = "BZX"
	VenueC2                       Venue = "C2"
	VenueCboe                     Venue = "CBOE"
	VenueChicago                  Venue = "CHICAGO"
	VenueCincinnati               Venue = "CINCINNATI"
	VenueEdga                     Venue = "EDGA"
	VenueEdgx                     Venue = "EDGX"
	VenueExclearing               Venue = "EXCLEARING"
	VenueIex                      Venue = "IEX"
	VenueIse                      Venue = "ISE"
	VenueIseGemini                Venue = "ISE_GEMINI"
	VenueMiax                     Venue = "MIAX"
	VenueNasdaq                   Venue = "NASDAQ"
	VenueNasdaqOmxBx              Venue = "NASDAQ_OMX_BX"
	VenueNyse                     Venue = "NYSE"
	VenuePhlx                     Venue = "PHLX"
	VenueOtc                      Venue = "OTC"
	VenueQsr                      Venue = "QSR"
)

func (e Venue) ToPointer() *Venue {
	return &e
}

// WhenIssued - Denotes that this trade was either when_issued or when_distributed.
type WhenIssued string

const (
	WhenIssuedWhenIssuedTypeUnspecified WhenIssued = "WHEN_ISSUED_TYPE_UNSPECIFIED"
	WhenIssuedWhenIssued                WhenIssued = "WHEN_ISSUED"
	WhenIssuedWhenDistributed           WhenIssued = "WHEN_DISTRIBUTED"
)

func (e WhenIssued) ToPointer() *WhenIssued {
	return &e
}

// TradeCreate - A Trade represents an entire order made by a client. Trades can hold one or many executions representing partial fills that aggregate into a whole order.
type TradeCreate struct {
	// A globally unique identifier referencing a single account.
	AccountID string `json:"account_id"`
	// Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Fractional support for market-makers' internal order ids.
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// Type of the asset being traded.
	AssetType TradeCreateAssetType `json:"asset_type"`
	// Broker capacity for the trade.
	BrokerCapacity TradeCreateBrokerCapacity `json:"broker_capacity"`
	// The unique identifier that is associated with an order. Must be unique by date per trade per client.
	ClientOrderID string `json:"client_order_id"`
	// Executing broker of the trade.
	ExecutingBroker *string `json:"executing_broker,omitempty"`
	// The executions (sometimes referred to as partial-fills) that comprise the trade.
	Executions []ExecutionCreate `json:"executions"`
	// Any client calculated fees associated with the trade. Only allowed if trade.open = false. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed.
	Fees []BookingFeeCreate `json:"fees,omitempty"`
	// Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier.
	Identifier string `json:"identifier"`
	// Identifier type for the asset being traded.
	IdentifierType TradeCreateIdentifierType `json:"identifier_type"`
	// Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP.
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	LocalMarketTradeDate *DateCreate `json:"local_market_trade_date,omitempty"`
	// One or many lot matching instructions for the trade.
	LotMatchingInstructions []LotCreate `json:"lot_matching_instructions,omitempty"`
	// Market Identifier Code
	MicCode *string `json:"mic_code,omitempty"`
	// State of this trade's completeness in filling. True: trade is not done filling and can append more executions onto the trade False: trade is done filling and cannot append more executions onto the trade By default, trades are closed when they are created. An open trade can later be closed by calling the CompleteTrade endpoint. Additional executions can be appended to an open trade by calling the CreateExecution endpoint. Trades that are left open will be automatically closed nightly before Ledger's EOD.
	Open *bool `json:"open,omitempty"`
	// Street-level order id, unique by day per broker.
	OrderID *string `json:"order_id,omitempty"`
	// Route type for the trade.
	RouteType RouteType `json:"route_type"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	SettlementDate *DateCreate `json:"settlement_date,omitempty"`
	// Denotes if the trade is a SELL or a BUY.
	Side TradeCreateSide `json:"side"`
	// Side modifier for the trade.
	SideModifier *SideModifier `json:"side_modifier,omitempty"`
	// The source of the submission.
	SourceApplication string `json:"source_application"`
	// An enumerated list of values used to indicate certain attributes about a trade (E.g. DISCRETION_EXERCISED, BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)
	SpecialInstructions []SpecialInstructions `json:"special_instructions,omitempty"`
	// Exchange venue
	Venue *Venue `json:"venue,omitempty"`
	// Denotes that this trade was either when_issued or when_distributed.
	WhenIssued *WhenIssued `json:"when_issued,omitempty"`
}

func (o *TradeCreate) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *TradeCreate) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *TradeCreate) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *TradeCreate) GetAssetType() TradeCreateAssetType {
	if o == nil {
		return TradeCreateAssetType("")
	}
	return o.AssetType
}

func (o *TradeCreate) GetBrokerCapacity() TradeCreateBrokerCapacity {
	if o == nil {
		return TradeCreateBrokerCapacity("")
	}
	return o.BrokerCapacity
}

func (o *TradeCreate) GetClientOrderID() string {
	if o == nil {
		return ""
	}
	return o.ClientOrderID
}

func (o *TradeCreate) GetExecutingBroker() *string {
	if o == nil {
		return nil
	}
	return o.ExecutingBroker
}

func (o *TradeCreate) GetExecutions() []ExecutionCreate {
	if o == nil {
		return []ExecutionCreate{}
	}
	return o.Executions
}

func (o *TradeCreate) GetFees() []BookingFeeCreate {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *TradeCreate) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *TradeCreate) GetIdentifierType() TradeCreateIdentifierType {
	if o == nil {
		return TradeCreateIdentifierType("")
	}
	return o.IdentifierType
}

func (o *TradeCreate) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *TradeCreate) GetLocalMarketTradeDate() *DateCreate {
	if o == nil {
		return nil
	}
	return o.LocalMarketTradeDate
}

func (o *TradeCreate) GetLotMatchingInstructions() []LotCreate {
	if o == nil {
		return nil
	}
	return o.LotMatchingInstructions
}

func (o *TradeCreate) GetMicCode() *string {
	if o == nil {
		return nil
	}
	return o.MicCode
}

func (o *TradeCreate) GetOpen() *bool {
	if o == nil {
		return nil
	}
	return o.Open
}

func (o *TradeCreate) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *TradeCreate) GetRouteType() RouteType {
	if o == nil {
		return RouteType("")
	}
	return o.RouteType
}

func (o *TradeCreate) GetSettlementDate() *DateCreate {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *TradeCreate) GetSide() TradeCreateSide {
	if o == nil {
		return TradeCreateSide("")
	}
	return o.Side
}

func (o *TradeCreate) GetSideModifier() *SideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *TradeCreate) GetSourceApplication() string {
	if o == nil {
		return ""
	}
	return o.SourceApplication
}

func (o *TradeCreate) GetSpecialInstructions() []SpecialInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *TradeCreate) GetVenue() *Venue {
	if o == nil {
		return nil
	}
	return o.Venue
}

func (o *TradeCreate) GetWhenIssued() *WhenIssued {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}
