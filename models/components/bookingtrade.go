// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// BookingTradeAssetType - Type of the asset being traded. Required for SYMBOL and CUSIP.
type BookingTradeAssetType string

const (
	BookingTradeAssetTypeAssetTypeUnspecified BookingTradeAssetType = "ASSET_TYPE_UNSPECIFIED"
	BookingTradeAssetTypeEquity               BookingTradeAssetType = "EQUITY"
	BookingTradeAssetTypeFixedIncome          BookingTradeAssetType = "FIXED_INCOME"
)

func (e BookingTradeAssetType) ToPointer() *BookingTradeAssetType {
	return &e
}

// BookingTradeBrokerCapacity - Broker capacity for the trade.
type BookingTradeBrokerCapacity string

const (
	BookingTradeBrokerCapacityCapacityUnspecified BookingTradeBrokerCapacity = "CAPACITY_UNSPECIFIED"
	BookingTradeBrokerCapacityAgency              BookingTradeBrokerCapacity = "AGENCY"
	BookingTradeBrokerCapacityPrincipal           BookingTradeBrokerCapacity = "PRINCIPAL"
	BookingTradeBrokerCapacityMixed               BookingTradeBrokerCapacity = "MIXED"
)

func (e BookingTradeBrokerCapacity) ToPointer() *BookingTradeBrokerCapacity {
	return &e
}

// BookingTradeIdentifierType - Identifier type for the asset being traded.
type BookingTradeIdentifierType string

const (
	BookingTradeIdentifierTypeIdentifierTypeUnspecified BookingTradeIdentifierType = "IDENTIFIER_TYPE_UNSPECIFIED"
	BookingTradeIdentifierTypeAssetID                   BookingTradeIdentifierType = "ASSET_ID"
	BookingTradeIdentifierTypeSymbol                    BookingTradeIdentifierType = "SYMBOL"
	BookingTradeIdentifierTypeCusip                     BookingTradeIdentifierType = "CUSIP"
	BookingTradeIdentifierTypeIsin                      BookingTradeIdentifierType = "ISIN"
)

func (e BookingTradeIdentifierType) ToPointer() *BookingTradeIdentifierType {
	return &e
}

// LocalMarketTradeDate - Date field to support extended trading hours.
type LocalMarketTradeDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *LocalMarketTradeDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *LocalMarketTradeDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *LocalMarketTradeDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// BookingTradeRouteType - Route type for the trade.
type BookingTradeRouteType string

const (
	BookingTradeRouteTypeRouteTypeUnspecified BookingTradeRouteType = "ROUTE_TYPE_UNSPECIFIED"
	BookingTradeRouteTypeDma                  BookingTradeRouteType = "DMA"
	BookingTradeRouteTypeMngd                 BookingTradeRouteType = "MNGD"
	BookingTradeRouteTypeQuik                 BookingTradeRouteType = "QUIK"
	BookingTradeRouteTypeAlgo                 BookingTradeRouteType = "ALGO"
	BookingTradeRouteTypeAway                 BookingTradeRouteType = "AWAY"
	BookingTradeRouteTypeCorr                 BookingTradeRouteType = "CORR"
	BookingTradeRouteTypeBoats                BookingTradeRouteType = "BOATS"
)

func (e BookingTradeRouteType) ToPointer() *BookingTradeRouteType {
	return &e
}

// SettlementDate - Defaults to T+1 for equities if this is not provided. Calculated by the execution's execution_time field in Eastern Time.
type SettlementDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *SettlementDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *SettlementDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *SettlementDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// BookingTradeSide - Denotes if the trade is a SELL or a BUY.
type BookingTradeSide string

const (
	BookingTradeSideSideUnspecified BookingTradeSide = "SIDE_UNSPECIFIED"
	BookingTradeSideBuy             BookingTradeSide = "BUY"
	BookingTradeSideSell            BookingTradeSide = "SELL"
)

func (e BookingTradeSide) ToPointer() *BookingTradeSide {
	return &e
}

// BookingTradeSideModifier - Side modifier for the trade.
type BookingTradeSideModifier string

const (
	BookingTradeSideModifierSideModifierUnspecified BookingTradeSideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	BookingTradeSideModifierShort                   BookingTradeSideModifier = "SHORT"
	BookingTradeSideModifierShortExempt             BookingTradeSideModifier = "SHORT_EXEMPT"
	BookingTradeSideModifierShortCover              BookingTradeSideModifier = "SHORT_COVER"
	BookingTradeSideModifierOpen                    BookingTradeSideModifier = "OPEN"
	BookingTradeSideModifierClose                   BookingTradeSideModifier = "CLOSE"
)

func (e BookingTradeSideModifier) ToPointer() *BookingTradeSideModifier {
	return &e
}

type BookingTradeSpecialInstructions string

const (
	BookingTradeSpecialInstructionsSpecialInstructionsUnspecified BookingTradeSpecialInstructions = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
	BookingTradeSpecialInstructionsRule144                        BookingTradeSpecialInstructions = "RULE_144"
	BookingTradeSpecialInstructionsWithDividend                   BookingTradeSpecialInstructions = "WITH_DIVIDEND"
	BookingTradeSpecialInstructionsWithRights                     BookingTradeSpecialInstructions = "WITH_RIGHTS"
	BookingTradeSpecialInstructionsCloseContract                  BookingTradeSpecialInstructions = "CLOSE_CONTRACT"
	BookingTradeSpecialInstructionsCoverShort                     BookingTradeSpecialInstructions = "COVER_SHORT"
	BookingTradeSpecialInstructionsCrossTrade                     BookingTradeSpecialInstructions = "CROSS_TRADE"
	BookingTradeSpecialInstructionsOpenContractCovered            BookingTradeSpecialInstructions = "OPEN_CONTRACT_COVERED"
	BookingTradeSpecialInstructionsDiscretionExercised            BookingTradeSpecialInstructions = "DISCRETION_EXERCISED"
	BookingTradeSpecialInstructionsDiscretionNotExercised         BookingTradeSpecialInstructions = "DISCRETION_NOT_EXERCISED"
	BookingTradeSpecialInstructionsOptionAssignment               BookingTradeSpecialInstructions = "OPTION_ASSIGNMENT"
	BookingTradeSpecialInstructionsEmployeeStockOption            BookingTradeSpecialInstructions = "EMPLOYEE_STOCK_OPTION"
	BookingTradeSpecialInstructionsInvestmentBanking              BookingTradeSpecialInstructions = "INVESTMENT_BANKING"
	BookingTradeSpecialInstructionsBrokerDealerOrder              BookingTradeSpecialInstructions = "BROKER_DEALER_ORDER"
	BookingTradeSpecialInstructionsMakeMarketInSecurity           BookingTradeSpecialInstructions = "MAKE_MARKET_IN_SECURITY"
	BookingTradeSpecialInstructionsMakeMarketSolicited            BookingTradeSpecialInstructions = "MAKE_MARKET_SOLICITED"
	BookingTradeSpecialInstructionsMakeMarketUnsolicited          BookingTradeSpecialInstructions = "MAKE_MARKET_UNSOLICITED"
	BookingTradeSpecialInstructionsCustomerDirected               BookingTradeSpecialInstructions = "CUSTOMER_DIRECTED"
	BookingTradeSpecialInstructionsFullyRegistered                BookingTradeSpecialInstructions = "FULLY_REGISTERED"
	BookingTradeSpecialInstructionsOpenContract                   BookingTradeSpecialInstructions = "OPEN_CONTRACT"
	BookingTradeSpecialInstructionsOddlotDiffOnRequest            BookingTradeSpecialInstructions = "ODDLOT_DIFF_ON_REQUEST"
	BookingTradeSpecialInstructionsProspectusEnclosed             BookingTradeSpecialInstructions = "PROSPECTUS_ENCLOSED"
	BookingTradeSpecialInstructionsProspectusSeparateMail         BookingTradeSpecialInstructions = "PROSPECTUS_SEPARATE_MAIL"
	BookingTradeSpecialInstructionsSolicited                      BookingTradeSpecialInstructions = "SOLICITED"
	BookingTradeSpecialInstructionsUnsolicited                    BookingTradeSpecialInstructions = "UNSOLICITED"
	BookingTradeSpecialInstructionsXDividend                      BookingTradeSpecialInstructions = "X_DIVIDEND"
	BookingTradeSpecialInstructionsActingAsPrincipal              BookingTradeSpecialInstructions = "ACTING_AS_PRINCIPAL"
	BookingTradeSpecialInstructionsAveragePrice                   BookingTradeSpecialInstructions = "AVERAGE_PRICE"
	BookingTradeSpecialInstructionsBrokerLiquidation              BookingTradeSpecialInstructions = "BROKER_LIQUIDATION"
	BookingTradeSpecialInstructionsCouponBooks                    BookingTradeSpecialInstructions = "COUPON_BOOKS"
	BookingTradeSpecialInstructionsHasPostageFee                  BookingTradeSpecialInstructions = "HAS_POSTAGE_FEE"
	BookingTradeSpecialInstructionsInternetOrder                  BookingTradeSpecialInstructions = "INTERNET_ORDER"
	BookingTradeSpecialInstructionsMarginSellout                  BookingTradeSpecialInstructions = "MARGIN_SELLOUT"
	BookingTradeSpecialInstructionsMarketMakersAsPrincipal        BookingTradeSpecialInstructions = "MARKET_MAKERS_AS_PRINCIPAL"
	BookingTradeSpecialInstructionsNegativeNetProceed             BookingTradeSpecialInstructions = "NEGATIVE_NET_PROCEED"
	BookingTradeSpecialInstructionsPreFigIndicator                BookingTradeSpecialInstructions = "PRE_FIG_INDICATOR"
	BookingTradeSpecialInstructionsRisklessPrincipalInstruction   BookingTradeSpecialInstructions = "RISKLESS_PRINCIPAL_INSTRUCTION"
	BookingTradeSpecialInstructionsShortInstruction               BookingTradeSpecialInstructions = "SHORT_INSTRUCTION"
	BookingTradeSpecialInstructionsThirdMarket                    BookingTradeSpecialInstructions = "THIRD_MARKET"
	BookingTradeSpecialInstructionsSuppressMsrbTransmission       BookingTradeSpecialInstructions = "SUPPRESS_MSRB_TRANSMISSION"
	BookingTradeSpecialInstructionsSuppressTraceReporting         BookingTradeSpecialInstructions = "SUPPRESS_TRACE_REPORTING"
	BookingTradeSpecialInstructionsSuppressEmailNotification      BookingTradeSpecialInstructions = "SUPPRESS_EMAIL_NOTIFICATION"
	BookingTradeSpecialInstructionsStockReward                    BookingTradeSpecialInstructions = "STOCK_REWARD"
	BookingTradeSpecialInstructionsSuppressRegFees                BookingTradeSpecialInstructions = "SUPPRESS_REG_FEES"
	BookingTradeSpecialInstructionsSuppressSecFee                 BookingTradeSpecialInstructions = "SUPPRESS_SEC_FEE"
	BookingTradeSpecialInstructionsSuppressTafFee                 BookingTradeSpecialInstructions = "SUPPRESS_TAF_FEE"
	BookingTradeSpecialInstructionsDividendReinvestment           BookingTradeSpecialInstructions = "DIVIDEND_REINVESTMENT"
)

func (e BookingTradeSpecialInstructions) ToPointer() *BookingTradeSpecialInstructions {
	return &e
}

// BookingTradeVenue - Exchange venue
type BookingTradeVenue string

const (
	BookingTradeVenueExchangeVenueUnspecified BookingTradeVenue = "EXCHANGE_VENUE_UNSPECIFIED"
	BookingTradeVenueAmex                     BookingTradeVenue = "AMEX"
	BookingTradeVenueArca                     BookingTradeVenue = "ARCA"
	BookingTradeVenueBats                     BookingTradeVenue = "BATS"
	BookingTradeVenueBatsByx                  BookingTradeVenue = "BATS_BYX"
	BookingTradeVenueBoston                   BookingTradeVenue = "BOSTON"
	BookingTradeVenueBox                      BookingTradeVenue = "BOX"
	BookingTradeVenueBzx                      BookingTradeVenue = "BZX"
	BookingTradeVenueC2                       BookingTradeVenue = "C2"
	BookingTradeVenueCboe                     BookingTradeVenue = "CBOE"
	BookingTradeVenueChicago                  BookingTradeVenue = "CHICAGO"
	BookingTradeVenueCincinnati               BookingTradeVenue = "CINCINNATI"
	BookingTradeVenueEdga                     BookingTradeVenue = "EDGA"
	BookingTradeVenueEdgx                     BookingTradeVenue = "EDGX"
	BookingTradeVenueExclearing               BookingTradeVenue = "EXCLEARING"
	BookingTradeVenueIex                      BookingTradeVenue = "IEX"
	BookingTradeVenueIse                      BookingTradeVenue = "ISE"
	BookingTradeVenueIseGemini                BookingTradeVenue = "ISE_GEMINI"
	BookingTradeVenueMiax                     BookingTradeVenue = "MIAX"
	BookingTradeVenueNasdaq                   BookingTradeVenue = "NASDAQ"
	BookingTradeVenueNasdaqOmxBx              BookingTradeVenue = "NASDAQ_OMX_BX"
	BookingTradeVenueNyse                     BookingTradeVenue = "NYSE"
	BookingTradeVenuePhlx                     BookingTradeVenue = "PHLX"
	BookingTradeVenueOtc                      BookingTradeVenue = "OTC"
	BookingTradeVenueQsr                      BookingTradeVenue = "QSR"
)

func (e BookingTradeVenue) ToPointer() *BookingTradeVenue {
	return &e
}

// BookingTradeWhenIssued - Denotes that this trade was either when_issued or when_distributed.
type BookingTradeWhenIssued string

const (
	BookingTradeWhenIssuedWhenIssuedTypeUnspecified BookingTradeWhenIssued = "WHEN_ISSUED_TYPE_UNSPECIFIED"
	BookingTradeWhenIssuedWhenIssued                BookingTradeWhenIssued = "WHEN_ISSUED"
	BookingTradeWhenIssuedWhenDistributed           BookingTradeWhenIssued = "WHEN_DISTRIBUTED"
)

func (e BookingTradeWhenIssued) ToPointer() *BookingTradeWhenIssued {
	return &e
}

// BookingTrade - A Trade represents an entire order made by a client. Trades can hold one or many executions representing partial fills that aggregate into a whole order.
type BookingTrade struct {
	// A globally unique identifier referencing a single account.
	AccountID *string `json:"account_id,omitempty"`
	// The current activity_id of this trade in the Ledger.
	ActivityID *string `json:"activity_id,omitempty"`
	// Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Fractional support for market-makers' internal order ids.
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// Type of the asset being traded. Required for SYMBOL and CUSIP.
	AssetType *BookingTradeAssetType `json:"asset_type,omitempty"`
	// Broker capacity for the trade.
	BrokerCapacity *BookingTradeBrokerCapacity `json:"broker_capacity,omitempty"`
	// The unique identifier that is associated with an order. Must be unique by date per trade per client.
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Executing broker of the trade.
	ExecutingBroker *string `json:"executing_broker,omitempty"`
	// The executions (sometimes referred to as partial-fills) that comprise the trade.
	Executions []Execution `json:"executions,omitempty"`
	// Any client calculated fees associated with the trade. Only allowed if trade.open = false. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed.
	Fees []BookingFee `json:"fees,omitempty"`
	// Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier.
	Identifier *string `json:"identifier,omitempty"`
	// Identifier type for the asset being traded.
	IdentifierType *BookingTradeIdentifierType `json:"identifier_type,omitempty"`
	// Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP.
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// Date field to support extended trading hours.
	LocalMarketTradeDate *LocalMarketTradeDate `json:"local_market_trade_date,omitempty"`
	// One or many lot matching instructions for the trade.
	LotMatchingInstructions []BookingLot `json:"lot_matching_instructions,omitempty"`
	// Market Identifier Code
	MicCode *string `json:"mic_code,omitempty"`
	// The resource name of the trade.
	Name *string `json:"name,omitempty"`
	// State of this trade's completeness in filling. True: trade is not done filling and can append more executions onto the trade False: trade is done filling and cannot append more executions onto the trade By default, trades are closed when they are created. An open trade can later be closed by calling the CompleteTrade endpoint. Additional executions can be appended to an open trade by calling the CreateExecution endpoint. Trades that are left open will be automatically closed nightly before Ledger's EOD.
	Open *bool `json:"open,omitempty"`
	// Street-level order id, unique by day per broker.
	OrderID *string `json:"order_id,omitempty"`
	// Route type for the trade.
	RouteType *BookingTradeRouteType `json:"route_type,omitempty"`
	// Defaults to T+1 for equities if this is not provided. Calculated by the execution's execution_time field in Eastern Time.
	SettlementDate *SettlementDate `json:"settlement_date,omitempty"`
	// Denotes if the trade is a SELL or a BUY.
	Side *BookingTradeSide `json:"side,omitempty"`
	// Side modifier for the trade.
	SideModifier *BookingTradeSideModifier `json:"side_modifier,omitempty"`
	// The source of the submission.
	SourceApplication *string `json:"source_application,omitempty"`
	// An enumerated list of values used to indicate certain attributes about a trade (E.g. DISCRETION_EXERCISED, BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)
	SpecialInstructions []BookingTradeSpecialInstructions `json:"special_instructions,omitempty"`
	// A ULID to uniquely identify the trade globally.
	TradeID *string `json:"trade_id,omitempty"`
	// Exchange venue
	Venue *BookingTradeVenue `json:"venue,omitempty"`
	// Denotes that this trade was either when_issued or when_distributed.
	WhenIssued *BookingTradeWhenIssued `json:"when_issued,omitempty"`
}

func (o *BookingTrade) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *BookingTrade) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *BookingTrade) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *BookingTrade) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *BookingTrade) GetAssetType() *BookingTradeAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *BookingTrade) GetBrokerCapacity() *BookingTradeBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *BookingTrade) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *BookingTrade) GetExecutingBroker() *string {
	if o == nil {
		return nil
	}
	return o.ExecutingBroker
}

func (o *BookingTrade) GetExecutions() []Execution {
	if o == nil {
		return nil
	}
	return o.Executions
}

func (o *BookingTrade) GetFees() []BookingFee {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *BookingTrade) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *BookingTrade) GetIdentifierType() *BookingTradeIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *BookingTrade) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *BookingTrade) GetLocalMarketTradeDate() *LocalMarketTradeDate {
	if o == nil {
		return nil
	}
	return o.LocalMarketTradeDate
}

func (o *BookingTrade) GetLotMatchingInstructions() []BookingLot {
	if o == nil {
		return nil
	}
	return o.LotMatchingInstructions
}

func (o *BookingTrade) GetMicCode() *string {
	if o == nil {
		return nil
	}
	return o.MicCode
}

func (o *BookingTrade) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *BookingTrade) GetOpen() *bool {
	if o == nil {
		return nil
	}
	return o.Open
}

func (o *BookingTrade) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *BookingTrade) GetRouteType() *BookingTradeRouteType {
	if o == nil {
		return nil
	}
	return o.RouteType
}

func (o *BookingTrade) GetSettlementDate() *SettlementDate {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *BookingTrade) GetSide() *BookingTradeSide {
	if o == nil {
		return nil
	}
	return o.Side
}

func (o *BookingTrade) GetSideModifier() *BookingTradeSideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *BookingTrade) GetSourceApplication() *string {
	if o == nil {
		return nil
	}
	return o.SourceApplication
}

func (o *BookingTrade) GetSpecialInstructions() []BookingTradeSpecialInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *BookingTrade) GetTradeID() *string {
	if o == nil {
		return nil
	}
	return o.TradeID
}

func (o *BookingTrade) GetVenue() *BookingTradeVenue {
	if o == nil {
		return nil
	}
	return o.Venue
}

func (o *BookingTrade) GetWhenIssued() *BookingTradeWhenIssued {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}
