// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// AcceptTransferResponseExternalAccount - The external account information
type AcceptTransferResponseExternalAccount struct {
	// The account identifier The account number for external communications
	AccountNumber *string `json:"account_number,omitempty"`
	// Account owner title
	AccountTitle *string `json:"account_title,omitempty"`
	// The NSCC brokerage / clearing house identifier
	ParticipantNumber *string `json:"participant_number,omitempty"`
}

func (o *AcceptTransferResponseExternalAccount) GetAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AccountNumber
}

func (o *AcceptTransferResponseExternalAccount) GetAccountTitle() *string {
	if o == nil {
		return nil
	}
	return o.AccountTitle
}

func (o *AcceptTransferResponseExternalAccount) GetParticipantNumber() *string {
	if o == nil {
		return nil
	}
	return o.ParticipantNumber
}

// AcceptTransferResponseDeliverer - The delivering party information
type AcceptTransferResponseDeliverer struct {
	// The internal apex account id
	ApexAccountID *string `json:"apex_account_id,omitempty"`
	// The external account information
	ExternalAccount *AcceptTransferResponseExternalAccount `json:"external_account,omitempty"`
}

func (o *AcceptTransferResponseDeliverer) GetApexAccountID() *string {
	if o == nil {
		return nil
	}
	return o.ApexAccountID
}

func (o *AcceptTransferResponseDeliverer) GetExternalAccount() *AcceptTransferResponseExternalAccount {
	if o == nil {
		return nil
	}
	return o.ExternalAccount
}

// AcceptTransferResponseDirection - The direction of the transfer
type AcceptTransferResponseDirection string

const (
	AcceptTransferResponseDirectionDirectionUnspecified AcceptTransferResponseDirection = "DIRECTION_UNSPECIFIED"
	AcceptTransferResponseDirectionOutgoing             AcceptTransferResponseDirection = "OUTGOING"
	AcceptTransferResponseDirectionIncoming             AcceptTransferResponseDirection = "INCOMING"
)

func (e AcceptTransferResponseDirection) ToPointer() *AcceptTransferResponseDirection {
	return &e
}

// AcceptTransferResponseNsccStatus - The NSCC transfer status
type AcceptTransferResponseNsccStatus string

const (
	AcceptTransferResponseNsccStatusNsccStatusUnspecified                   AcceptTransferResponseNsccStatus = "NSCC_STATUS_UNSPECIFIED"
	AcceptTransferResponseNsccStatusRequest                                 AcceptTransferResponseNsccStatus = "REQUEST"
	AcceptTransferResponseNsccStatusRequestAdjust                           AcceptTransferResponseNsccStatus = "REQUEST_ADJUST"
	AcceptTransferResponseNsccStatusRequestAdjustPast                       AcceptTransferResponseNsccStatus = "REQUEST_ADJUST_PAST"
	AcceptTransferResponseNsccStatusRequestPast                             AcceptTransferResponseNsccStatus = "REQUEST_PAST"
	AcceptTransferResponseNsccStatusRequestReject                           AcceptTransferResponseNsccStatus = "REQUEST_REJECT"
	AcceptTransferResponseNsccStatusReview                                  AcceptTransferResponseNsccStatus = "REVIEW"
	AcceptTransferResponseNsccStatusReviewAdjustDeliverer                   AcceptTransferResponseNsccStatus = "REVIEW_ADJUST_DELIVERER"
	AcceptTransferResponseNsccStatusReviewError                             AcceptTransferResponseNsccStatus = "REVIEW_ERROR"
	AcceptTransferResponseNsccStatusReviewAccelerate                        AcceptTransferResponseNsccStatus = "REVIEW_ACCELERATE"
	AcceptTransferResponseNsccStatusReviewAdjustReceiverAccelerate          AcceptTransferResponseNsccStatus = "REVIEW_ADJUST_RECEIVER_ACCELERATE"
	AcceptTransferResponseNsccStatusSettlePrep                              AcceptTransferResponseNsccStatus = "SETTLE_PREP"
	AcceptTransferResponseNsccStatusSettleClose                             AcceptTransferResponseNsccStatus = "SETTLE_CLOSE"
	AcceptTransferResponseNsccStatusClosePurge                              AcceptTransferResponseNsccStatus = "CLOSE_PURGE"
	AcceptTransferResponseNsccStatusPartialRequest                          AcceptTransferResponseNsccStatus = "PARTIAL_REQUEST"
	AcceptTransferResponseNsccStatusMemoPurgePartialTransferRequestReceiver AcceptTransferResponseNsccStatus = "MEMO_PURGE_PARTIAL_TRANSFER_REQUEST_RECEIVER"
	AcceptTransferResponseNsccStatusReject                                  AcceptTransferResponseNsccStatus = "REJECT"
	AcceptTransferResponseNsccStatusSystemPurge                             AcceptTransferResponseNsccStatus = "SYSTEM_PURGE"
)

func (e AcceptTransferResponseNsccStatus) ToPointer() *AcceptTransferResponseNsccStatus {
	return &e
}

// AcceptTransferResponseTransferExternalAccount - The external account information
type AcceptTransferResponseTransferExternalAccount struct {
	// The account identifier The account number for external communications
	AccountNumber *string `json:"account_number,omitempty"`
	// Account owner title
	AccountTitle *string `json:"account_title,omitempty"`
	// The NSCC brokerage / clearing house identifier
	ParticipantNumber *string `json:"participant_number,omitempty"`
}

func (o *AcceptTransferResponseTransferExternalAccount) GetAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AccountNumber
}

func (o *AcceptTransferResponseTransferExternalAccount) GetAccountTitle() *string {
	if o == nil {
		return nil
	}
	return o.AccountTitle
}

func (o *AcceptTransferResponseTransferExternalAccount) GetParticipantNumber() *string {
	if o == nil {
		return nil
	}
	return o.ParticipantNumber
}

// AcceptTransferResponseReceiver - The receiving party information
type AcceptTransferResponseReceiver struct {
	// The internal apex account id
	ApexAccountID *string `json:"apex_account_id,omitempty"`
	// The external account information
	ExternalAccount *AcceptTransferResponseTransferExternalAccount `json:"external_account,omitempty"`
}

func (o *AcceptTransferResponseReceiver) GetApexAccountID() *string {
	if o == nil {
		return nil
	}
	return o.ApexAccountID
}

func (o *AcceptTransferResponseReceiver) GetExternalAccount() *AcceptTransferResponseTransferExternalAccount {
	if o == nil {
		return nil
	}
	return o.ExternalAccount
}

// AcceptTransferResponseRejectCode - The reject code
type AcceptTransferResponseRejectCode string

const (
	AcceptTransferResponseRejectCodeRejectCodeUnspecified                                AcceptTransferResponseRejectCode = "REJECT_CODE_UNSPECIFIED"
	AcceptTransferResponseRejectCodeRejectCodeSsnTaxIDMismatch                           AcceptTransferResponseRejectCode = "REJECT_CODE_SSN_TAX_ID_MISMATCH"
	AcceptTransferResponseRejectCodeRejectCodeAccountTitleMismatch                       AcceptTransferResponseRejectCode = "REJECT_CODE_ACCOUNT_TITLE_MISMATCH"
	AcceptTransferResponseRejectCodeRejectCodeDocumentationNeeded                        AcceptTransferResponseRejectCode = "REJECT_CODE_DOCUMENTATION_NEEDED"
	AcceptTransferResponseRejectCodeRejectCodeAccountFlat                                AcceptTransferResponseRejectCode = "REJECT_CODE_ACCOUNT_FLAT"
	AcceptTransferResponseRejectCodeRejectCodeInvalidAccountNumber                       AcceptTransferResponseRejectCode = "REJECT_CODE_INVALID_ACCOUNT_NUMBER"
	AcceptTransferResponseRejectCodeRejectCodeDuplicate                                  AcceptTransferResponseRejectCode = "REJECT_CODE_DUPLICATE"
	AcceptTransferResponseRejectCodeRejectCodeAccountInDistributionOrTransfer            AcceptTransferResponseRejectCode = "REJECT_CODE_ACCOUNT_IN_DISTRIBUTION_OR_TRANSFER"
	AcceptTransferResponseRejectCodeRejectCodeClientRescinded                            AcceptTransferResponseRejectCode = "REJECT_CODE_CLIENT_RESCINDED"
	AcceptTransferResponseRejectCodeRejectCodeMissingAuthorizationSignature              AcceptTransferResponseRejectCode = "REJECT_CODE_MISSING_AUTHORIZATION_SIGNATURE"
	AcceptTransferResponseRejectCodeRejectCodeAccountViolatesCreditPolicyOfReceivingFirm AcceptTransferResponseRejectCode = "REJECT_CODE_ACCOUNT_VIOLATES_CREDIT_POLICY_OF_RECEIVING_FIRM"
	AcceptTransferResponseRejectCodeRejectCodeUnrecognizedForResidualCreditBalance       AcceptTransferResponseRejectCode = "REJECT_CODE_UNRECOGNIZED_FOR_RESIDUAL_CREDIT_BALANCE"
	AcceptTransferResponseRejectCodeRejectCodePartialTransferDeliverer                   AcceptTransferResponseRejectCode = "REJECT_CODE_PARTIAL_TRANSFER_DELIVERER"
	AcceptTransferResponseRejectCodeRejectCodeFailReversal                               AcceptTransferResponseRejectCode = "REJECT_CODE_FAIL_REVERSAL"
	AcceptTransferResponseRejectCodeRejectCodeReclaim                                    AcceptTransferResponseRejectCode = "REJECT_CODE_RECLAIM"
	AcceptTransferResponseRejectCodeRejectCodeMutualFundCleanup                          AcceptTransferResponseRejectCode = "REJECT_CODE_MUTUAL_FUND_CLEANUP"
)

func (e AcceptTransferResponseRejectCode) ToPointer() *AcceptTransferResponseRejectCode {
	return &e
}

// AcceptTransferResponseState - The transfer state
type AcceptTransferResponseState string

const (
	AcceptTransferResponseStateStateUnspecified      AcceptTransferResponseState = "STATE_UNSPECIFIED"
	AcceptTransferResponseStateReceived              AcceptTransferResponseState = "RECEIVED"
	AcceptTransferResponseStateSubmitted             AcceptTransferResponseState = "SUBMITTED"
	AcceptTransferResponseStateRejected              AcceptTransferResponseState = "REJECTED"
	AcceptTransferResponseStatePendingContraResponse AcceptTransferResponseState = "PENDING_CONTRA_RESPONSE"
	AcceptTransferResponseStateError                 AcceptTransferResponseState = "ERROR"
	AcceptTransferResponseStateAccepted              AcceptTransferResponseState = "ACCEPTED"
	AcceptTransferResponseStatePendingReview         AcceptTransferResponseState = "PENDING_REVIEW"
	AcceptTransferResponseStatePendingRejection      AcceptTransferResponseState = "PENDING_REJECTION"
	AcceptTransferResponseStatePendingSettlement     AcceptTransferResponseState = "PENDING_SETTLEMENT"
	AcceptTransferResponseStatePendingBookkeeping    AcceptTransferResponseState = "PENDING_BOOKKEEPING"
	AcceptTransferResponseStateCompleted             AcceptTransferResponseState = "COMPLETED"
	AcceptTransferResponseStatePurged                AcceptTransferResponseState = "PURGED"
)

func (e AcceptTransferResponseState) ToPointer() *AcceptTransferResponseState {
	return &e
}

// AcceptTransferResponseTransferType - The type of transfer
type AcceptTransferResponseTransferType string

const (
	AcceptTransferResponseTransferTypeTransferTypeUnspecified                         AcceptTransferResponseTransferType = "TRANSFER_TYPE_UNSPECIFIED"
	AcceptTransferResponseTransferTypeFailReversalBrokerToBrokerOnly                  AcceptTransferResponseTransferType = "FAIL_REVERSAL_BROKER_TO_BROKER_ONLY"
	AcceptTransferResponseTransferTypeFullTransfer                                    AcceptTransferResponseTransferType = "FULL_TRANSFER"
	AcceptTransferResponseTransferTypeMutualFundCleanup                               AcceptTransferResponseTransferType = "MUTUAL_FUND_CLEANUP"
	AcceptTransferResponseTransferTypePartialTransferDeliverer                        AcceptTransferResponseTransferType = "PARTIAL_TRANSFER_DELIVERER"
	AcceptTransferResponseTransferTypePartialTransferReceiver                         AcceptTransferResponseTransferType = "PARTIAL_TRANSFER_RECEIVER"
	AcceptTransferResponseTransferTypePositionTransferFundFirmToMutualFundCompanyOnly AcceptTransferResponseTransferType = "POSITION_TRANSFER_FUND_FIRM_TO_MUTUAL_FUND_COMPANY_ONLY"
	AcceptTransferResponseTransferTypeReclaim                                         AcceptTransferResponseTransferType = "RECLAIM"
	AcceptTransferResponseTransferTypeResidualCredit                                  AcceptTransferResponseTransferType = "RESIDUAL_CREDIT"
)

func (e AcceptTransferResponseTransferType) ToPointer() *AcceptTransferResponseTransferType {
	return &e
}

// Transfer - The accepted transfer's resource
type Transfer struct {
	// The NSCC transfer identifier
	AcatControlNumber *string `json:"acat_control_number,omitempty"`
	// The assets being transferred (Cash, Equities, etc.)
	Assets []AcatsAsset `json:"assets,omitempty"`
	// User supplied comment
	Comment *string `json:"comment,omitempty"`
	// The transfer creation timestamp
	CreateTime *time.Time `json:"create_time,omitempty"`
	// The delivering party information
	Deliverer *AcceptTransferResponseDeliverer `json:"deliverer,omitempty"`
	// The direction of the transfer
	Direction *AcceptTransferResponseDirection `json:"direction,omitempty"`
	// The service generated name of the transfer. Format: correspondents/{correspondent_id}/accounts/{account_id}/transfers/{transfer_id}
	Name *string `json:"name,omitempty"`
	// The NSCC transfer status
	NsccStatus *AcceptTransferResponseNsccStatus `json:"nscc_status,omitempty"`
	// An associated NSCC transfer identifier, if applicable
	OriginalControlNumber *string `json:"original_control_number,omitempty"`
	// The receiving party information
	Receiver *AcceptTransferResponseReceiver `json:"receiver,omitempty"`
	// The reject code
	RejectCode *AcceptTransferResponseRejectCode `json:"reject_code,omitempty"`
	// The transfer state
	State *AcceptTransferResponseState `json:"state,omitempty"`
	// A reason for the state if applicable
	StateReason *string `json:"state_reason,omitempty"`
	// The type of transfer
	TransferType *AcceptTransferResponseTransferType `json:"transfer_type,omitempty"`
}

func (t Transfer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Transfer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Transfer) GetAcatControlNumber() *string {
	if o == nil {
		return nil
	}
	return o.AcatControlNumber
}

func (o *Transfer) GetAssets() []AcatsAsset {
	if o == nil {
		return nil
	}
	return o.Assets
}

func (o *Transfer) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Transfer) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *Transfer) GetDeliverer() *AcceptTransferResponseDeliverer {
	if o == nil {
		return nil
	}
	return o.Deliverer
}

func (o *Transfer) GetDirection() *AcceptTransferResponseDirection {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *Transfer) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Transfer) GetNsccStatus() *AcceptTransferResponseNsccStatus {
	if o == nil {
		return nil
	}
	return o.NsccStatus
}

func (o *Transfer) GetOriginalControlNumber() *string {
	if o == nil {
		return nil
	}
	return o.OriginalControlNumber
}

func (o *Transfer) GetReceiver() *AcceptTransferResponseReceiver {
	if o == nil {
		return nil
	}
	return o.Receiver
}

func (o *Transfer) GetRejectCode() *AcceptTransferResponseRejectCode {
	if o == nil {
		return nil
	}
	return o.RejectCode
}

func (o *Transfer) GetState() *AcceptTransferResponseState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *Transfer) GetStateReason() *string {
	if o == nil {
		return nil
	}
	return o.StateReason
}

func (o *Transfer) GetTransferType() *AcceptTransferResponseTransferType {
	if o == nil {
		return nil
	}
	return o.TransferType
}

// AcceptTransferResponse - Response from accepting internal Ascend transfers. If this is the second side (delivering/receiving) of an internal transfer that is being accepted, bookkeeping is performed immediately and both sides of the internal transfer would be complete barring any errors.
type AcceptTransferResponse struct {
	// The accepted transfer's resource
	Transfer *Transfer `json:"transfer,omitempty"`
}

func (o *AcceptTransferResponse) GetTransfer() *Transfer {
	if o == nil {
		return nil
	}
	return o.Transfer
}
