// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// ProcessDate - The process date of the batch associated with the report.
type ProcessDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ProcessDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ProcessDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ProcessDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// LocateIctReportResponseProgram - The ICT program associated with the report.
type LocateIctReportResponseProgram string

const (
	LocateIctReportResponseProgramIctProgramUnspecified LocateIctReportResponseProgram = "ICT_PROGRAM_UNSPECIFIED"
	LocateIctReportResponseProgramBrokerPartner         LocateIctReportResponseProgram = "BROKER_PARTNER"
	LocateIctReportResponseProgramDepositOnly           LocateIctReportResponseProgram = "DEPOSIT_ONLY"
	LocateIctReportResponseProgramBankingPartner        LocateIctReportResponseProgram = "BANKING_PARTNER"
	LocateIctReportResponseProgramWithdrawalOnly        LocateIctReportResponseProgram = "WITHDRAWAL_ONLY"
	LocateIctReportResponseProgramDigitalPartner        LocateIctReportResponseProgram = "DIGITAL_PARTNER"
)

func (e LocateIctReportResponseProgram) ToPointer() *LocateIctReportResponseProgram {
	return &e
}

// LocateIctReportResponse - A response containing recon report descriptors and a file download link for the report.
type LocateIctReportResponse struct {
	// The id of the batch associated with the report.
	BatchID *string `json:"batch_id,omitempty"`
	// The timestamp when the report was created.
	CreateTime *time.Time `json:"create_time,omitempty"`
	// The signed file download uri. The link will expire after a set period of time.
	DownloadURI *string `json:"download_uri,omitempty"`
	// The process date of the batch associated with the report.
	ProcessDate *ProcessDate `json:"process_date,omitempty"`
	// The ICT program associated with the report.
	Program *LocateIctReportResponseProgram `json:"program,omitempty"`
}

func (l LocateIctReportResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LocateIctReportResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *LocateIctReportResponse) GetBatchID() *string {
	if o == nil {
		return nil
	}
	return o.BatchID
}

func (o *LocateIctReportResponse) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *LocateIctReportResponse) GetDownloadURI() *string {
	if o == nil {
		return nil
	}
	return o.DownloadURI
}

func (o *LocateIctReportResponse) GetProcessDate() *ProcessDate {
	if o == nil {
		return nil
	}
	return o.ProcessDate
}

func (o *LocateIctReportResponse) GetProgram() *LocateIctReportResponseProgram {
	if o == nil {
		return nil
	}
	return o.Program
}
