// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// AvailableCashToWithdrawAmount - The account's available cash to withdraw in USD. It is calculated based on the `open_balance_amount` and account activity. This value is always non-negative. If `unadjusted_available_cash_to_withdraw_amount` is negative, this value will be `0`.
type AvailableCashToWithdrawAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AvailableCashToWithdrawAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// AvailableLiquidityAmount - The account's available liquidity in USD including the value of cash and equity positions. It is calculated based on the `open_liquidity_amount` and account activity. This value can be negative.
type AvailableLiquidityAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *AvailableLiquidityAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// FullyPaidUnsettledFundsAmount - The account's fully paid unsettled funds in USD. Fully paid unsettled funds are proceeds from sales of assets paid for with cash and not bought on margin. If `include_fully_paid_unsettled_funds` is `false`, this value is **subtracted** from `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. This value is always non-negative.
type FullyPaidUnsettledFundsAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *FullyPaidUnsettledFundsAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// OpenBalanceAmount - The account's starting cash balance for the day in USD as calculated by the margin system. It is used as the base to calculate `available_cash_to_withdraw_amount`. This value is always non-negative.
type OpenBalanceAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *OpenBalanceAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// OpenLiquidityAmount - The account's starting liquidity for the day in USD as calculated by the margin system. It includes the value of all asset positions (e.g. cash, equities, fixed income, etc). It is used as the base to calculate `available_liquidity_amount`. This value can be negative.
type OpenLiquidityAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *OpenLiquidityAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PendingDebitDividendsAmount - The account's pending debit dividends in USD. The value is **subtracted** from `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. This value is always non-negative.
type PendingDebitDividendsAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *PendingDebitDividendsAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PendingDebitInterestAmount - The account's pending debit interest in USD. The value is **subtracted** from `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. This value is always non-negative.
type PendingDebitInterestAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *PendingDebitInterestAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// UnadjustedAvailableCashToWithdrawAmount - The account's unadjusted available cash to withdraw in USD. It is calculated based on the `open_balance_amount` and account activity. This value can be negative.
type UnadjustedAvailableCashToWithdrawAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *UnadjustedAvailableCashToWithdrawAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// WithheldDepositThresholdAmount - The account's withheld deposit threshold. Amounts in `withheld_deposits` up to this threshold will be not be subtracted to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. This value is always non-negative.
type WithheldDepositThresholdAmount struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *WithheldDepositThresholdAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// CalculateCashBalanceResponse - The cash balance of an account.
type CalculateCashBalanceResponse struct {
	// The account.
	Account *string `json:"account,omitempty"`
	// The account's available cash to withdraw in USD. It is calculated based on the `open_balance_amount` and account activity. This value is always non-negative. If `unadjusted_available_cash_to_withdraw_amount` is negative, this value will be `0`.
	AvailableCashToWithdrawAmount *AvailableCashToWithdrawAmount `json:"available_cash_to_withdraw_amount,omitempty"`
	// The account's available liquidity in USD including the value of cash and equity positions. It is calculated based on the `open_liquidity_amount` and account activity. This value can be negative.
	AvailableLiquidityAmount *AvailableLiquidityAmount `json:"available_liquidity_amount,omitempty"`
	// The account's fully paid unsettled funds in USD. Fully paid unsettled funds are proceeds from sales of assets paid for with cash and not bought on margin. If `include_fully_paid_unsettled_funds` is `false`, this value is **subtracted** from `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. This value is always non-negative.
	FullyPaidUnsettledFundsAmount *FullyPaidUnsettledFundsAmount `json:"fully_paid_unsettled_funds_amount,omitempty"`
	// Whether fully paid unsettled funds are included in balances.
	IncludeFullyPaidUnsettledFunds *bool `json:"include_fully_paid_unsettled_funds,omitempty"`
	// The account's intraday buy trades. The net amounts are **subtracted** from `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. Since trades have positive amounts, the calculated values will **decrease**.
	IntradayBuyTrades []CalculateCashBalanceResponseTradeSummary `json:"intraday_buy_trades,omitempty"`
	// The account's eligible intraday deposits that have posted to the ledger. Intraday deposits may be eligible based on mechanism (e.g. intraday ICT deposits are eligible for ICT withdrawals, but not ACH withdrawals). The amounts are **added** to `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. Since deposits have positive amounts, the calculated values will **increase**.
	IntradayDeposits []CalculateCashBalanceResponseTransferSummary `json:"intraday_deposits,omitempty"`
	// The account's intraday returns. The amounts are **subtracted** from `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. Returned deposits will **decrease** calculated values because they have positive amounts and returned withdrawals will **increase** calculated values because they have negative amounts.
	IntradayReturns []CalculateCashBalanceResponseTransferSummary `json:"intraday_returns,omitempty"`
	// The account's intraday withdrawals that have posted to the ledger. The amounts are **added** to `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. Since withdrawals have negative amounts, the calculated values will **decrease**.
	IntradayWithdrawals []CalculateCashBalanceResponseTransferSummary `json:"intraday_withdrawals,omitempty"`
	// The account's starting cash balance for the day in USD as calculated by the margin system. It is used as the base to calculate `available_cash_to_withdraw_amount`. This value is always non-negative.
	OpenBalanceAmount *OpenBalanceAmount `json:"open_balance_amount,omitempty"`
	// The account's open buy orders. The expected notional ceilings are **subtracted** from `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. Since open orders have positive expected notional ceilings, the calculated values will **decrease**.
	OpenBuyOrders []CalculateCashBalanceResponseOpenOrderSummary `json:"open_buy_orders,omitempty"`
	// The account's starting liquidity for the day in USD as calculated by the margin system. It includes the value of all asset positions (e.g. cash, equities, fixed income, etc). It is used as the base to calculate `available_liquidity_amount`. This value can be negative.
	OpenLiquidityAmount *OpenLiquidityAmount `json:"open_liquidity_amount,omitempty"`
	// The account's pending debit dividends in USD. The value is **subtracted** from `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. This value is always non-negative.
	PendingDebitDividendsAmount *PendingDebitDividendsAmount `json:"pending_debit_dividends_amount,omitempty"`
	// The account's pending debit interest in USD. The value is **subtracted** from `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. This value is always non-negative.
	PendingDebitInterestAmount *PendingDebitInterestAmount `json:"pending_debit_interest_amount,omitempty"`
	// The account's pending withdrawals. Pending withdrawals may need review and have yet to post to the ledger. The amounts are **added** to `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. Since withdrawals have negative amounts, the calculated values will **decrease**.
	PendingWithdrawals []CalculateCashBalanceResponseTransferSummary `json:"pending_withdrawals,omitempty"`
	// The account's unadjusted available cash to withdraw in USD. It is calculated based on the `open_balance_amount` and account activity. This value can be negative.
	UnadjustedAvailableCashToWithdrawAmount *UnadjustedAvailableCashToWithdrawAmount `json:"unadjusted_available_cash_to_withdraw_amount,omitempty"`
	// The account's withheld deposit threshold. Amounts in `withheld_deposits` up to this threshold will be not be subtracted to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. This value is always non-negative.
	WithheldDepositThresholdAmount *WithheldDepositThresholdAmount `json:"withheld_deposit_threshold_amount,omitempty"`
	// The account's withheld deposits. Deposits are withheld if there is a risk of a return (e.g. ACH deposits). Typically, they are withheld for 5 business days after completing. The amounts are **subtracted** from `open_balance_amount` and `open_liquidity_amount` to calculate `available_cash_to_withdraw_amount` and `available_liquidity_amount`. Since deposits have positive amounts, the calculated values will **decrease**. However, withheld deposits will not be subtracted up to the `withheld_deposit_threshold_amount`.
	WithheldDeposits []CalculateCashBalanceResponseTransferSummary `json:"withheld_deposits,omitempty"`
}

func (o *CalculateCashBalanceResponse) GetAccount() *string {
	if o == nil {
		return nil
	}
	return o.Account
}

func (o *CalculateCashBalanceResponse) GetAvailableCashToWithdrawAmount() *AvailableCashToWithdrawAmount {
	if o == nil {
		return nil
	}
	return o.AvailableCashToWithdrawAmount
}

func (o *CalculateCashBalanceResponse) GetAvailableLiquidityAmount() *AvailableLiquidityAmount {
	if o == nil {
		return nil
	}
	return o.AvailableLiquidityAmount
}

func (o *CalculateCashBalanceResponse) GetFullyPaidUnsettledFundsAmount() *FullyPaidUnsettledFundsAmount {
	if o == nil {
		return nil
	}
	return o.FullyPaidUnsettledFundsAmount
}

func (o *CalculateCashBalanceResponse) GetIncludeFullyPaidUnsettledFunds() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeFullyPaidUnsettledFunds
}

func (o *CalculateCashBalanceResponse) GetIntradayBuyTrades() []CalculateCashBalanceResponseTradeSummary {
	if o == nil {
		return nil
	}
	return o.IntradayBuyTrades
}

func (o *CalculateCashBalanceResponse) GetIntradayDeposits() []CalculateCashBalanceResponseTransferSummary {
	if o == nil {
		return nil
	}
	return o.IntradayDeposits
}

func (o *CalculateCashBalanceResponse) GetIntradayReturns() []CalculateCashBalanceResponseTransferSummary {
	if o == nil {
		return nil
	}
	return o.IntradayReturns
}

func (o *CalculateCashBalanceResponse) GetIntradayWithdrawals() []CalculateCashBalanceResponseTransferSummary {
	if o == nil {
		return nil
	}
	return o.IntradayWithdrawals
}

func (o *CalculateCashBalanceResponse) GetOpenBalanceAmount() *OpenBalanceAmount {
	if o == nil {
		return nil
	}
	return o.OpenBalanceAmount
}

func (o *CalculateCashBalanceResponse) GetOpenBuyOrders() []CalculateCashBalanceResponseOpenOrderSummary {
	if o == nil {
		return nil
	}
	return o.OpenBuyOrders
}

func (o *CalculateCashBalanceResponse) GetOpenLiquidityAmount() *OpenLiquidityAmount {
	if o == nil {
		return nil
	}
	return o.OpenLiquidityAmount
}

func (o *CalculateCashBalanceResponse) GetPendingDebitDividendsAmount() *PendingDebitDividendsAmount {
	if o == nil {
		return nil
	}
	return o.PendingDebitDividendsAmount
}

func (o *CalculateCashBalanceResponse) GetPendingDebitInterestAmount() *PendingDebitInterestAmount {
	if o == nil {
		return nil
	}
	return o.PendingDebitInterestAmount
}

func (o *CalculateCashBalanceResponse) GetPendingWithdrawals() []CalculateCashBalanceResponseTransferSummary {
	if o == nil {
		return nil
	}
	return o.PendingWithdrawals
}

func (o *CalculateCashBalanceResponse) GetUnadjustedAvailableCashToWithdrawAmount() *UnadjustedAvailableCashToWithdrawAmount {
	if o == nil {
		return nil
	}
	return o.UnadjustedAvailableCashToWithdrawAmount
}

func (o *CalculateCashBalanceResponse) GetWithheldDepositThresholdAmount() *WithheldDepositThresholdAmount {
	if o == nil {
		return nil
	}
	return o.WithheldDepositThresholdAmount
}

func (o *CalculateCashBalanceResponse) GetWithheldDeposits() []CalculateCashBalanceResponseTransferSummary {
	if o == nil {
		return nil
	}
	return o.WithheldDeposits
}
