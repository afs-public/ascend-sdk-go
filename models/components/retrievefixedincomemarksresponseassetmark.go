// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"ascend-sdk/internal/utils"
	"encoding/json"
	"fmt"
	"time"
)

// RetrieveFixedIncomeMarksResponseAssetMarkAccruedInterestAmount - The amount of accrued interest estimated to be exchanged given the requested quantity. Measured in a USD value with 2-decimal places of precision.
type RetrieveFixedIncomeMarksResponseAssetMarkAccruedInterestAmount struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *RetrieveFixedIncomeMarksResponseAssetMarkAccruedInterestAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType - The identifier type of the asset being sought. This will be the same value as what was sent on the request.
type RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType string

const (
	RetrieveFixedIncomeMarksResponseAssetMarkIdentifierTypeAssetID RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType = "ASSET_ID"
	RetrieveFixedIncomeMarksResponseAssetMarkIdentifierTypeCusip   RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType = "CUSIP"
	RetrieveFixedIncomeMarksResponseAssetMarkIdentifierTypeIsin    RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType = "ISIN"
)

func (e RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType) ToPointer() *RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType {
	return &e
}
func (e *RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASSET_ID":
		fallthrough
	case "CUSIP":
		fallthrough
	case "ISIN":
		*e = RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType: %v", v)
	}
}

// MarkAbsenceReason - When marks are found and returned, this will be unspecified. If the asset was found, but no pricing data is returned, then: this will denote the reason, the marks[] list will be empty, and the accrued_interest_amount will not be present.
type MarkAbsenceReason string

const (
	MarkAbsenceReasonMarkAbsenceReasonUnspecified MarkAbsenceReason = "MARK_ABSENCE_REASON_UNSPECIFIED"
	MarkAbsenceReasonNotPriced                    MarkAbsenceReason = "NOT_PRICED"
	MarkAbsenceReasonNotTradable                  MarkAbsenceReason = "NOT_TRADABLE"
)

func (e MarkAbsenceReason) ToPointer() *MarkAbsenceReason {
	return &e
}
func (e *MarkAbsenceReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MARK_ABSENCE_REASON_UNSPECIFIED":
		fallthrough
	case "NOT_PRICED":
		fallthrough
	case "NOT_TRADABLE":
		*e = MarkAbsenceReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MarkAbsenceReason: %v", v)
	}
}

// RetrieveFixedIncomeMarksResponseAssetMark - Mark data for a specific asset
type RetrieveFixedIncomeMarksResponseAssetMark struct {
	// The amount of accrued interest estimated to be exchanged given the requested quantity. Measured in a USD value with 2-decimal places of precision.
	AccruedInterestAmount *RetrieveFixedIncomeMarksResponseAssetMarkAccruedInterestAmount `json:"accrued_interest_amount,omitempty"`
	// Apex Asset ID for this asset.
	AssetID *string `json:"asset_id,omitempty"`
	// Identifier of the asset (of the type specified in `identifier_type`).
	Identifier *string `json:"identifier,omitempty"`
	// The identifier type of the asset being sought. This will be the same value as what was sent on the request.
	IdentifierType *RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType `json:"identifier_type,omitempty"`
	// When marks are found and returned, this will be unspecified. If the asset was found, but no pricing data is returned, then: this will denote the reason, the marks[] list will be empty, and the accrued_interest_amount will not be present.
	MarkAbsenceReason *MarkAbsenceReason `json:"mark_absence_reason,omitempty"`
	// The time this mark data was generated
	MarkGenerationTime *time.Time `json:"mark_generation_time,omitempty"`
	// The set of marks available for this asset. If this is non-empty, then it will always contain a PERCENTAGE_OF_PAR typed price in it. Yield prices may not always be available, but never be present without a percentage of par value also returned.
	Marks []MarkPrice `json:"marks,omitempty"`
}

func (r RetrieveFixedIncomeMarksResponseAssetMark) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RetrieveFixedIncomeMarksResponseAssetMark) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RetrieveFixedIncomeMarksResponseAssetMark) GetAccruedInterestAmount() *RetrieveFixedIncomeMarksResponseAssetMarkAccruedInterestAmount {
	if o == nil {
		return nil
	}
	return o.AccruedInterestAmount
}

func (o *RetrieveFixedIncomeMarksResponseAssetMark) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *RetrieveFixedIncomeMarksResponseAssetMark) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *RetrieveFixedIncomeMarksResponseAssetMark) GetIdentifierType() *RetrieveFixedIncomeMarksResponseAssetMarkIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *RetrieveFixedIncomeMarksResponseAssetMark) GetMarkAbsenceReason() *MarkAbsenceReason {
	if o == nil {
		return nil
	}
	return o.MarkAbsenceReason
}

func (o *RetrieveFixedIncomeMarksResponseAssetMark) GetMarkGenerationTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.MarkGenerationTime
}

func (o *RetrieveFixedIncomeMarksResponseAssetMark) GetMarks() []MarkPrice {
	if o == nil {
		return nil
	}
	return o.Marks
}
