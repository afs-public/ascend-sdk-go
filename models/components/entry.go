// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// AcatsPendingOut - Object containing metadata for pending outgoing acats
type AcatsPendingOut struct {
	// the unique transfer Identifier assigned by NSCC
	AcatsControlNumber *string `json:"acats_control_number,omitempty"`
	// Free form text field
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
}

func (o *AcatsPendingOut) GetAcatsControlNumber() *string {
	if o == nil {
		return nil
	}
	return o.AcatsControlNumber
}

func (o *AcatsPendingOut) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

// AccountMemo - Indicates the memo location impacted by an entry
type AccountMemo string

const (
	AccountMemoMemoTypeUnspecified AccountMemo = "MEMO_TYPE_UNSPECIFIED"
	AccountMemoFullyPaidStockLoan  AccountMemo = "FULLY_PAID_STOCK_LOAN"
	AccountMemoFree                AccountMemo = "FREE"
	AccountMemoPendingOutgoingAcat AccountMemo = "PENDING_OUTGOING_ACAT"
	AccountMemoPendingDrip         AccountMemo = "PENDING_DRIP"
	AccountMemoPendingWithdrawal   AccountMemo = "PENDING_WITHDRAWAL"
)

func (e AccountMemo) ToPointer() *AccountMemo {
	return &e
}

// Action - Indicates whether the account transfer is incoming or outgoing
type Action string

const (
	ActionActionUnspecified Action = "ACTION_UNSPECIFIED"
	ActionIncoming          Action = "INCOMING"
	ActionOutgoing          Action = "OUTGOING"
	ActionCashInLieu        Action = "CASH_IN_LIEU"
)

func (e Action) ToPointer() *Action {
	return &e
}

// Method - the method used for the account transfer
type Method string

const (
	MethodAccountTransferMethodUnspecified Method = "ACCOUNT_TRANSFER_METHOD_UNSPECIFIED"
	MethodAcats                            Method = "ACATS"
	MethodInternal                         Method = "INTERNAL"
	MethodManual                           Method = "MANUAL"
)

func (e Method) ToPointer() *Method {
	return &e
}

// AccountTransfer - Object containing metadata for account transfers
type AccountTransfer struct {
	// sequence number assigned by the DTCC ACATS transfer system for each asset transferred
	AcatsAssetSequenceNumber *string `json:"acats_asset_sequence_number,omitempty"`
	// the unique transfer Identifier assigned by NSCC
	AcatsControlNumber *string `json:"acats_control_number,omitempty"`
	// Indicates whether the account transfer is incoming or outgoing
	Action *Action `json:"action,omitempty"`
	// Free form text field
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// account number at the contra firm
	ContraPartyAccountNumber *string `json:"contra_party_account_number,omitempty"`
	// contra party identifier
	ContraPartyID *string `json:"contra_party_id,omitempty"`
	// Contra party institution for the account transfer
	Institution *string `json:"institution,omitempty"`
	// the method used for the account transfer
	Method *Method `json:"method,omitempty"`
}

func (o *AccountTransfer) GetAcatsAssetSequenceNumber() *string {
	if o == nil {
		return nil
	}
	return o.AcatsAssetSequenceNumber
}

func (o *AccountTransfer) GetAcatsControlNumber() *string {
	if o == nil {
		return nil
	}
	return o.AcatsControlNumber
}

func (o *AccountTransfer) GetAction() *Action {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *AccountTransfer) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *AccountTransfer) GetContraPartyAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.ContraPartyAccountNumber
}

func (o *AccountTransfer) GetContraPartyID() *string {
	if o == nil {
		return nil
	}
	return o.ContraPartyID
}

func (o *AccountTransfer) GetInstitution() *string {
	if o == nil {
		return nil
	}
	return o.Institution
}

func (o *AccountTransfer) GetMethod() *Method {
	if o == nil {
		return nil
	}
	return o.Method
}

// EntryAccruedInterest - Indicates that the entry references accrued interest that has been earned but not yet paid between the last interest payment and the date of the trade
type EntryAccruedInterest struct {
}

// CorporateActionGeneralInformation - Common fields for corporate actions
type CorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *CorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *CorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *CorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *CorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *CorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *CorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *CorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// Acquisition - Object containing metadata for acquisition events
type Acquisition struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *CorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
}

func (o *Acquisition) GetCorporateActionGeneralInformation() *CorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

// ActivityDate - The calendar date an activity took place For Trade entries, the activity date reflects the trade date of the market in which the trade was executed For Cash entries, this reflects the banking day the cash will be moved
type ActivityDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *ActivityDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *ActivityDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *ActivityDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// CashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type CashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *CashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryCorporateActionGeneralInformation - Common fields for corporate actions
type EntryCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// PaymentDate - The anticipated payment date at the depository.
type PaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *PaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *PaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *PaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryCapitalGainsQuantity - Corresponds to the position's trade quantity
type EntryCapitalGainsQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryCapitalGainsQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RecordDate - The date on which positions are recorded in order to calculate entitlement
type RecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *RecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *RecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *RecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// CapitalGains - Object containing metadata for capital gains
type CapitalGains struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *CashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Corresponds to corporateactions.announcement.capital_gains
	LongTermGain *bool `json:"long_term_gain,omitempty"`
	// The anticipated payment date at the depository.
	PaymentDate *PaymentDate `json:"payment_date,omitempty"`
	// Identifies whether dividend income is potentially qualified for the lower maximum individual federal tax rate under the Jobs and Growth Tax Relief Reconciliation Act of 2003.
	Qualified *bool `json:"qualified,omitempty"`
	// Corresponds to the position's trade quantity
	Quantity *EntryCapitalGainsQuantity `json:"quantity,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *RecordDate `json:"record_date,omitempty"`
	// Indicates whether the cash dividend was reinvested
	Reinvested *bool `json:"reinvested,omitempty"`
}

func (o *CapitalGains) GetCashRate() *CashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *CapitalGains) GetCorporateActionGeneralInformation() *EntryCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *CapitalGains) GetLongTermGain() *bool {
	if o == nil {
		return nil
	}
	return o.LongTermGain
}

func (o *CapitalGains) GetPaymentDate() *PaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *CapitalGains) GetQualified() *bool {
	if o == nil {
		return nil
	}
	return o.Qualified
}

func (o *CapitalGains) GetQuantity() *EntryCapitalGainsQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *CapitalGains) GetRecordDate() *RecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *CapitalGains) GetReinvested() *bool {
	if o == nil {
		return nil
	}
	return o.Reinvested
}

// EntryCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type EntryCashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryCashDividendCorporateActionGeneralInformation - Common fields for corporate actions
type EntryCashDividendCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryCashDividendCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryCashDividendCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryCashDividendCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryCashDividendCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryCashDividendCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryCashDividendCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryCashDividendCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryFpsl - Corresponds to the raw bucket value that denotes a position is allocated to the "fpsl" memo location
type EntryFpsl struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryFpsl) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryFree - Corresponds to the raw bucket value that denotes a position is allocated to the "free" memo location
type EntryFree struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryFree) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryPaymentDate - The anticipated payment date at the depository.
type EntryPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryCashDividendQuantity - When ex-date occurs before the record date, quantity will equal the settled date position balance on the position date of the event When ex-date occurs after the record date, quantity will equal the trade date position balance on the position date of the event
type EntryCashDividendQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryCashDividendQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryRecordDate - The date on which positions are recorded in order to calculate entitlement
type EntryRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryCashDividendSettled - Corresponds to the position's settled quantity
type EntryCashDividendSettled struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryCashDividendSettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// Subtype - Corresponds to the subtype of corporaction type
type Subtype string

const (
	SubtypeCorporateactionsubtypeUnspecified  Subtype = "CORPORATEACTIONSUBTYPE_UNSPECIFIED"
	SubtypeAdditionalDividend                 Subtype = "ADDITIONAL_DIVIDEND"
	SubtypeApproximateRate                    Subtype = "APPROXIMATE_RATE"
	SubtypeDividendArrears                    Subtype = "DIVIDEND_ARREARS"
	SubtypeDividendCancelled                  Subtype = "DIVIDEND_CANCELLED"
	SubtypeDividendPaymentTaxClassifications  Subtype = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS"
	SubtypeDividendRescinded                  Subtype = "DIVIDEND_RESCINDED"
	SubtypeEstimatedReturnOfCapital           Subtype = "ESTIMATED_RETURN_OF_CAPITAL"
	SubtypeEstimatedReturnOfCapitalPlusIncome Subtype = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME"
	SubtypeExtraDividend                      Subtype = "EXTRA_DIVIDEND"
	SubtypeExtraDividendPlusIncome            Subtype = "EXTRA_DIVIDEND_PLUS_INCOME"
	SubtypeFinalPaymentTransferBooksAreClosed Subtype = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED"
	SubtypeGrossRate                          Subtype = "GROSS_RATE"
	SubtypeInitialDividend                    Subtype = "INITIAL_DIVIDEND"
	SubtypeInitialDividendLongPeriod          Subtype = "INITIAL_DIVIDEND_LONG_PERIOD"
	SubtypeInitialDividendShortPeriod         Subtype = "INITIAL_DIVIDEND_SHORT_PERIOD"
	SubtypeLimitedPartnershipDistribution     Subtype = "LIMITED_PARTNERSHIP_DISTRIBUTION"
	SubtypeLiquidation                        Subtype = "LIQUIDATION"
	SubtypeNetRate                            Subtype = "NET_RATE"
	SubtypeOther                              Subtype = "OTHER"
	SubtypeProceedsFromSaleOfRights           Subtype = "PROCEEDS_FROM_SALE_OF_RIGHTS"
	SubtypeRegularDividend                    Subtype = "REGULAR_DIVIDEND"
	SubtypeReturnOfCapital                    Subtype = "RETURN_OF_CAPITAL"
	SubtypeReturnOfCapitalPlusIncome          Subtype = "RETURN_OF_CAPITAL_PLUS_INCOME"
	SubtypeSpecialDividend                    Subtype = "SPECIAL_DIVIDEND"
	SubtypeSpecialDividendPlusIncome          Subtype = "SPECIAL_DIVIDEND_PLUS_INCOME"
	SubtypeYearEndDividend                    Subtype = "YEAR_END_DIVIDEND"
	SubtypeYearEndDividendPlusIncome          Subtype = "YEAR_END_DIVIDEND_PLUS_INCOME"
	SubtypePartial                            Subtype = "PARTIAL"
	SubtypeFull                               Subtype = "FULL"
	SubtypeMaturity                           Subtype = "MATURITY"
	SubtypeTermination                        Subtype = "TERMINATION"
	SubtypeRedemptionOfWarrants               Subtype = "REDEMPTION_OF_WARRANTS"
)

func (e Subtype) ToPointer() *Subtype {
	return &e
}

// CashDividend - Object containing for cash dividends
type CashDividend struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *EntryCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryCashDividendCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Corresponds to the raw bucket value that denotes a position is allocated to the "fpsl" memo location
	Fpsl *EntryFpsl `json:"fpsl,omitempty"`
	// Corresponds to the raw bucket value that denotes a position is allocated to the "free" memo location
	Free *EntryFree `json:"free,omitempty"`
	// Corresponds to corporateactions.announcement.capital_gains
	LongTermGain *bool `json:"long_term_gain,omitempty"`
	// The anticipated payment date at the depository.
	PaymentDate *EntryPaymentDate `json:"payment_date,omitempty"`
	// Identifies whether dividend income is potentially qualified for the lower maximum individual federal tax rate under the Jobs and Growth Tax Relief Reconciliation Act of 2003.
	Qualified *bool `json:"qualified,omitempty"`
	// When ex-date occurs before the record date, quantity will equal the settled date position balance on the position date of the event When ex-date occurs after the record date, quantity will equal the trade date position balance on the position date of the event
	Quantity *EntryCashDividendQuantity `json:"quantity,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *EntryRecordDate `json:"record_date,omitempty"`
	// Indicates whether the cash dividend was reinvested
	Reinvested *bool `json:"reinvested,omitempty"`
	// Corresponds to the position's settled quantity
	Settled *EntryCashDividendSettled `json:"settled,omitempty"`
	// Indicates whether the corporate action event is a substitute payment
	SubstitutePayment *bool `json:"substitute_payment,omitempty"`
	// Corresponds to the subtype of corporaction type
	Subtype *Subtype `json:"subtype,omitempty"`
}

func (o *CashDividend) GetCashRate() *EntryCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *CashDividend) GetCorporateActionGeneralInformation() *EntryCashDividendCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *CashDividend) GetFpsl() *EntryFpsl {
	if o == nil {
		return nil
	}
	return o.Fpsl
}

func (o *CashDividend) GetFree() *EntryFree {
	if o == nil {
		return nil
	}
	return o.Free
}

func (o *CashDividend) GetLongTermGain() *bool {
	if o == nil {
		return nil
	}
	return o.LongTermGain
}

func (o *CashDividend) GetPaymentDate() *EntryPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *CashDividend) GetQualified() *bool {
	if o == nil {
		return nil
	}
	return o.Qualified
}

func (o *CashDividend) GetQuantity() *EntryCashDividendQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *CashDividend) GetRecordDate() *EntryRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *CashDividend) GetReinvested() *bool {
	if o == nil {
		return nil
	}
	return o.Reinvested
}

func (o *CashDividend) GetSettled() *EntryCashDividendSettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

func (o *CashDividend) GetSubstitutePayment() *bool {
	if o == nil {
		return nil
	}
	return o.SubstitutePayment
}

func (o *CashDividend) GetSubtype() *Subtype {
	if o == nil {
		return nil
	}
	return o.Subtype
}

// EntryCommission - Indicates that the entry references commission charged by brokers or financial intermediaries for executing financial transactions on behalf of clients
type EntryCommission struct {
}

// EntryConversionCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type EntryConversionCashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryConversionCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryConversionCorporateActionGeneralInformation - Common fields for corporate actions
type EntryConversionCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryConversionCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryConversionCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryConversionCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryConversionCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryConversionCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryConversionCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryConversionCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// StockRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type StockRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *StockRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryConversionType - Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
type EntryConversionType string

const (
	EntryConversionTypeEventTypeUnspecified EntryConversionType = "EVENT_TYPE_UNSPECIFIED"
	EntryConversionTypeCash                 EntryConversionType = "CASH"
	EntryConversionTypeStock                EntryConversionType = "STOCK"
	EntryConversionTypeCashAndStock         EntryConversionType = "CASH_AND_STOCK"
)

func (e EntryConversionType) ToPointer() *EntryConversionType {
	return &e
}

// Conversion - Object containing metadata for conversions (Conversion of securities into another form of securities)
type Conversion struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *EntryConversionCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryConversionCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	StockRate *StockRate `json:"stock_rate,omitempty"`
	// Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
	Type *EntryConversionType `json:"type,omitempty"`
}

func (o *Conversion) GetCashRate() *EntryConversionCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *Conversion) GetCorporateActionGeneralInformation() *EntryConversionCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *Conversion) GetStockRate() *StockRate {
	if o == nil {
		return nil
	}
	return o.StockRate
}

func (o *Conversion) GetType() *EntryConversionType {
	if o == nil {
		return nil
	}
	return o.Type
}

// CorporateActionMemoAdjustment - Object containing metadata for memo locations that have been adjusted due to a corporate action
type CorporateActionMemoAdjustment struct {
	// This field serves as a unique identifier for the specific corporate action linked to the memo adjustment
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Used to capture the specific type of corporate action related to the memo adjustment
	CorporateActionType *string `json:"corporate_action_type,omitempty"`
}

func (o *CorporateActionMemoAdjustment) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *CorporateActionMemoAdjustment) GetCorporateActionType() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionType
}

// CreditType - Provides more details on the type of credit
type CreditType string

const (
	CreditTypeCreditTypeUnspecified     CreditType = "CREDIT_TYPE_UNSPECIFIED"
	CreditTypeFullyPaidStockLoan        CreditType = "FULLY_PAID_STOCK_LOAN"
	CreditTypeWriteOff                  CreditType = "WRITE_OFF"
	CreditTypeReimbursement             CreditType = "REIMBURSEMENT"
	CreditTypePromotional               CreditType = "PROMOTIONAL"
	CreditTypeFdicInsuredDepositProgram CreditType = "FDIC_INSURED_DEPOSIT_PROGRAM"
	CreditTypeAccountTransferAdjustment CreditType = "ACCOUNT_TRANSFER_ADJUSTMENT"
)

func (e CreditType) ToPointer() *CreditType {
	return &e
}

// Credit - Object containing more information about the credit being paid
type Credit struct {
	// Free form text field providing additional information about a transaction
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Provides more details on the type of credit
	CreditType *CreditType `json:"credit_type,omitempty"`
	// Indicates whether the credit is taxable
	Taxable *bool `json:"taxable,omitempty"`
}

func (o *Credit) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *Credit) GetCreditType() *CreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *Credit) GetTaxable() *bool {
	if o == nil {
		return nil
	}
	return o.Taxable
}

// EntryDeliveryCorporateActionGeneralInformation - Common fields for corporate actions
type EntryDeliveryCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryDeliveryCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryDeliveryCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryDeliveryCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryDeliveryCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryDeliveryCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryDeliveryCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryDeliveryCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// Delivery - Object containing metadata for delivery events
type Delivery struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryDeliveryCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
}

func (o *Delivery) GetCorporateActionGeneralInformation() *EntryDeliveryCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

// ContributionType - Provides detail on the contribution reason if the deposit is made to a retirement account
type ContributionType string

const (
	ContributionTypeContributionTypeUnspecified ContributionType = "CONTRIBUTION_TYPE_UNSPECIFIED"
	ContributionTypeRegular                     ContributionType = "REGULAR"
	ContributionTypeEmployee                    ContributionType = "EMPLOYEE"
	ContributionTypeEmployer                    ContributionType = "EMPLOYER"
	ContributionTypeRecharacterization          ContributionType = "RECHARACTERIZATION"
	ContributionTypeRollover60Day               ContributionType = "ROLLOVER_60_DAY"
	ContributionTypeRolloverDirect              ContributionType = "ROLLOVER_DIRECT"
	ContributionTypeTransfer                    ContributionType = "TRANSFER"
	ContributionTypeTrusteeFee                  ContributionType = "TRUSTEE_FEE"
	ContributionTypeConversion                  ContributionType = "CONVERSION"
	ContributionTypeRepayment                   ContributionType = "REPAYMENT"
	ContributionTypeContributionNonReportable   ContributionType = "CONTRIBUTION_NON_REPORTABLE"
)

func (e ContributionType) ToPointer() *ContributionType {
	return &e
}

// EntryDepositType - The mechanism by which funds were deposited
type EntryDepositType string

const (
	EntryDepositTypeExternalMovementTypeUnspecified EntryDepositType = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED"
	EntryDepositTypeAch                             EntryDepositType = "ACH"
	EntryDepositTypeCheck                           EntryDepositType = "CHECK"
	EntryDepositTypeWire                            EntryDepositType = "WIRE"
	EntryDepositTypePaypal                          EntryDepositType = "PAYPAL"
	EntryDepositTypeRtp                             EntryDepositType = "RTP"
	EntryDepositTypeIct                             EntryDepositType = "ICT"
	EntryDepositTypeJournal                         EntryDepositType = "JOURNAL"
)

func (e EntryDepositType) ToPointer() *EntryDepositType {
	return &e
}

// Deposit - Object containing more information about a deposit
type Deposit struct {
	// Free form text field providing additional information about a transaction
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Provides detail on the contribution reason if the deposit is made to a retirement account
	ContributionType *ContributionType `json:"contribution_type,omitempty"`
	// Integer representing the tax year the contribution should be applied to
	ContributionYear *int `json:"contribution_year,omitempty"`
	// Unique tracking number provided to allow tracking a wire transfer from the initiating bank to the receiving bank
	FedReferenceNumber *string `json:"fed_reference_number,omitempty"`
	// Human readable account identifier for the account the assets were journaled from. To be populated when the Deposit type is Journal
	OriginatingAccountNumber *string `json:"originating_account_number,omitempty"`
	// The mechanism by which funds were deposited
	Type *EntryDepositType `json:"type,omitempty"`
}

func (o *Deposit) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *Deposit) GetContributionType() *ContributionType {
	if o == nil {
		return nil
	}
	return o.ContributionType
}

func (o *Deposit) GetContributionYear() *int {
	if o == nil {
		return nil
	}
	return o.ContributionYear
}

func (o *Deposit) GetFedReferenceNumber() *string {
	if o == nil {
		return nil
	}
	return o.FedReferenceNumber
}

func (o *Deposit) GetOriginatingAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.OriginatingAccountNumber
}

func (o *Deposit) GetType() *EntryDepositType {
	if o == nil {
		return nil
	}
	return o.Type
}

// EntryAction - Indicates whether the drip memo activity is reserving cash (DRIP_PENDING) or removing the reservation after a successful reinvestment trade
type EntryAction string

const (
	EntryActionDripActionUnspecified EntryAction = "DRIP_ACTION_UNSPECIFIED"
	EntryActionDripPending           EntryAction = "DRIP_PENDING"
	EntryActionDripComplete          EntryAction = "DRIP_COMPLETE"
)

func (e EntryAction) ToPointer() *EntryAction {
	return &e
}

// Drip - Object containing metadata for reserving cash until the DRIP trades are executed
type Drip struct {
	// Indicates whether the drip memo activity is reserving cash (DRIP_PENDING) or removing the reservation after a successful reinvestment trade
	Action *EntryAction `json:"action,omitempty"`
}

func (o *Drip) GetAction() *EntryAction {
	if o == nil {
		return nil
	}
	return o.Action
}

// EntryExchangeCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type EntryExchangeCashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryExchangeCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryExchangeCorporateActionGeneralInformation - Common fields for corporate actions
type EntryExchangeCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryExchangeCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryExchangeCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryExchangeCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryExchangeCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryExchangeCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryExchangeCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryExchangeCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryStockRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type EntryStockRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryStockRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryExchangeType - Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
type EntryExchangeType string

const (
	EntryExchangeTypeEventTypeUnspecified EntryExchangeType = "EVENT_TYPE_UNSPECIFIED"
	EntryExchangeTypeCash                 EntryExchangeType = "CASH"
	EntryExchangeTypeStock                EntryExchangeType = "STOCK"
	EntryExchangeTypeCashAndStock         EntryExchangeType = "CASH_AND_STOCK"
)

func (e EntryExchangeType) ToPointer() *EntryExchangeType {
	return &e
}

// Exchange - Object containing metadata for exchanges
type Exchange struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *EntryExchangeCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryExchangeCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	StockRate *EntryStockRate `json:"stock_rate,omitempty"`
	// Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
	Type *EntryExchangeType `json:"type,omitempty"`
}

func (o *Exchange) GetCashRate() *EntryExchangeCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *Exchange) GetCorporateActionGeneralInformation() *EntryExchangeCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *Exchange) GetStockRate() *EntryStockRate {
	if o == nil {
		return nil
	}
	return o.StockRate
}

func (o *Exchange) GetType() *EntryExchangeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// EntryFeeType - Enum providing additional information about the type of fee being charged
type EntryFeeType string

const (
	EntryFeeTypeFeeTypeUnspecified             EntryFeeType = "FEE_TYPE_UNSPECIFIED"
	EntryFeeTypeClientClearing                 EntryFeeType = "CLIENT_CLEARING"
	EntryFeeTypeLiquidity                      EntryFeeType = "LIQUIDITY"
	EntryFeeTypeGeneralPurpose                 EntryFeeType = "GENERAL_PURPOSE"
	EntryFeeTypeCommission                     EntryFeeType = "COMMISSION"
	EntryFeeTypeOrf                            EntryFeeType = "ORF"
	EntryFeeTypeTaf                            EntryFeeType = "TAF"
	EntryFeeTypeSec                            EntryFeeType = "SEC"
	EntryFeeTypeAccountClosing                 EntryFeeType = "ACCOUNT_CLOSING"
	EntryFeeTypeAccountIra                     EntryFeeType = "ACCOUNT_IRA"
	EntryFeeTypeAchReturn                      EntryFeeType = "ACH_RETURN"
	EntryFeeTypeAdvisory                       EntryFeeType = "ADVISORY"
	EntryFeeTypeCheckFee                       EntryFeeType = "CHECK_FEE"
	EntryFeeTypeExchange                       EntryFeeType = "EXCHANGE"
	EntryFeeTypeManagement                     EntryFeeType = "MANAGEMENT"
	EntryFeeTypeOvernight                      EntryFeeType = "OVERNIGHT"
	EntryFeeTypePlatform                       EntryFeeType = "PLATFORM"
	EntryFeeTypeStatement                      EntryFeeType = "STATEMENT"
	EntryFeeTypeStopPayment                    EntryFeeType = "STOP_PAYMENT"
	EntryFeeTypeWireFee                        EntryFeeType = "WIRE_FEE"
	EntryFeeTypeInactivity                     EntryFeeType = "INACTIVITY"
	EntryFeeTypeAmaService                     EntryFeeType = "AMA_SERVICE"
	EntryFeeTypeNoticeOfChange                 EntryFeeType = "NOTICE_OF_CHANGE"
	EntryFeeTypeAccountTransfer                EntryFeeType = "ACCOUNT_TRANSFER"
	EntryFeeTypeAgencyProcessing               EntryFeeType = "AGENCY_PROCESSING"
	EntryFeeTypeRtpFee                         EntryFeeType = "RTP_FEE"
	EntryFeeTypeDomesticWireDepositFee         EntryFeeType = "DOMESTIC_WIRE_DEPOSIT_FEE"
	EntryFeeTypeDomesticWireWithdrawalFee      EntryFeeType = "DOMESTIC_WIRE_WITHDRAWAL_FEE"
	EntryFeeTypeInternationalWireDepositFee    EntryFeeType = "INTERNATIONAL_WIRE_DEPOSIT_FEE"
	EntryFeeTypeInternationalWireWithdrawalFee EntryFeeType = "INTERNATIONAL_WIRE_WITHDRAWAL_FEE"
)

func (e EntryFeeType) ToPointer() *EntryFeeType {
	return &e
}

// EntryFee - Object containing more information about the fee being charged
type EntryFee struct {
	// Free form text field providing additional information about a transaction
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Enum providing additional information about the type of fee being charged
	Type *EntryFeeType `json:"type,omitempty"`
}

func (o *EntryFee) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *EntryFee) GetType() *EntryFeeType {
	if o == nil {
		return nil
	}
	return o.Type
}

// EntryFlipBrokerCapacity - Used to calculate broadridge blotter code
type EntryFlipBrokerCapacity string

const (
	EntryFlipBrokerCapacityCapacityUnspecified EntryFlipBrokerCapacity = "CAPACITY_UNSPECIFIED"
	EntryFlipBrokerCapacityAgency              EntryFlipBrokerCapacity = "AGENCY"
	EntryFlipBrokerCapacityPrincipal           EntryFlipBrokerCapacity = "PRINCIPAL"
	EntryFlipBrokerCapacityMixed               EntryFlipBrokerCapacity = "MIXED"
)

func (e EntryFlipBrokerCapacity) ToPointer() *EntryFlipBrokerCapacity {
	return &e
}

// EntryFlipPrevailingMarketPrice - The price for the instrument that is prevailing in the market.
type EntryFlipPrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryFlipPrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryPriceAdjustmentAmount - Total monetary value of the price_adjustment
type EntryPriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryPriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryPriceAdjustmentPercent - The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
type EntryPriceAdjustmentPercent struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryPriceAdjustmentPercent) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryPriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security.
type EntryPriceAdjustmentType string

const (
	EntryPriceAdjustmentTypePriceAdjustmentTypeUnspecified EntryPriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	EntryPriceAdjustmentTypeMarkup                         EntryPriceAdjustmentType = "MARKUP"
	EntryPriceAdjustmentTypeMarkdown                       EntryPriceAdjustmentType = "MARKDOWN"
	EntryPriceAdjustmentTypeSalesLoad                      EntryPriceAdjustmentType = "SALES_LOAD"
)

func (e EntryPriceAdjustmentType) ToPointer() *EntryPriceAdjustmentType {
	return &e
}

// EntryPriceAdjustmentRecord - Information about any price adjustments applied to the security
type EntryPriceAdjustmentRecord struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *EntryPriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
	PriceAdjustmentPercent *EntryPriceAdjustmentPercent `json:"price_adjustment_percent,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security.
	PriceAdjustmentType *EntryPriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *EntryPriceAdjustmentRecord) GetPriceAdjustmentAmount() *EntryPriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *EntryPriceAdjustmentRecord) GetPriceAdjustmentPercent() *EntryPriceAdjustmentPercent {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentPercent
}

func (o *EntryPriceAdjustmentRecord) GetPriceAdjustmentType() *EntryPriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// Detail - Provides additional details for trades
type Detail struct {
	// To be populated by the submitter of the trade detail
	AdditionalInstructions []string `json:"additional_instructions,omitempty"`
	// Max Length 50 characters. Alternate order id from the street used for FRAC trades
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// base64 encoded value assigned by the Booking API to all executions
	BookingAPIBookingExecutionID *string `json:"booking_api_booking_execution_id,omitempty"`
	// base64 encoded value assigned by the Booking API if a trade belongs to an allocation
	BookingAPITradeAllocationID *string `json:"booking_api_trade_allocation_id,omitempty"`
	// base64 encoded value assigned by the Booking API to all trades
	BookingAPITradeID *string `json:"booking_api_trade_id,omitempty"`
	// Executing broker of the trade
	Broker *string `json:"broker,omitempty"`
	// Used to calculate broadridge blotter code
	BrokerCapacity *EntryFlipBrokerCapacity `json:"broker_capacity,omitempty"`
	// client usage area (intact). len 20
	ClientMemo *string `json:"client_memo,omitempty"`
	// Max Length 50 characters. Client provided order id present in exec reports
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// MIC code for the exchange
	Exchange *string `json:"exchange,omitempty"`
	// Max Length 50 characters. Execution id from the street
	ExecutionID *string `json:"execution_id,omitempty"`
	// Indicates whether Apex is the clearing broker for this trade
	ExecutionOnly *bool `json:"execution_only,omitempty"`
	// Max Length 50 characters. External system id provided by a client
	ExternalID *string `json:"external_id,omitempty"`
	// The confirmation number associated with a mutual fund trade
	FundConfirmationNumber *string `json:"fund_confirmation_number,omitempty"`
	// Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system Used as the client_order_id on new order singles sent downstream of the trading-gateway
	GatewayClientOrderID *string `json:"gateway_client_order_id,omitempty"`
	// If set to true, indicates the trade should be omitted from client billing
	InternalError *bool `json:"internal_error,omitempty"`
	// set on penny-for-the-lot trades
	IsWriteoff *bool `json:"is_writeoff,omitempty"`
	// Trade lots
	Lots []Lot `json:"lots,omitempty"`
	// "MMAP" for multi market average price, "UNKN" for unknown
	Market *string `json:"market,omitempty"`
	// Max Length 50 characters. Internally generated order id that is returned to client on exec reports
	OrderID *string `json:"order_id,omitempty"`
	// The price for the instrument that is prevailing in the market.
	PrevailingMarketPrice *EntryFlipPrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Information about any price adjustments applied to the security
	PriceAdjustmentRecord *EntryPriceAdjustmentRecord `json:"price_adjustment_record,omitempty"`
	// The execution route Apex used for this trade
	Route *string `json:"route,omitempty"`
	// Special instructions for the trade
	SpecialInstructions []string `json:"special_instructions,omitempty"`
	// Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
	WhenIssued *bool `json:"when_issued,omitempty"`
	// The yields associated with a fixed income trade. Only valid if the SecurityType is FIXED_INCOME
	YieldRecords []YieldRecord `json:"yield_records,omitempty"`
}

func (o *Detail) GetAdditionalInstructions() []string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *Detail) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *Detail) GetBookingAPIBookingExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPIBookingExecutionID
}

func (o *Detail) GetBookingAPITradeAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeAllocationID
}

func (o *Detail) GetBookingAPITradeID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeID
}

func (o *Detail) GetBroker() *string {
	if o == nil {
		return nil
	}
	return o.Broker
}

func (o *Detail) GetBrokerCapacity() *EntryFlipBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *Detail) GetClientMemo() *string {
	if o == nil {
		return nil
	}
	return o.ClientMemo
}

func (o *Detail) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *Detail) GetExchange() *string {
	if o == nil {
		return nil
	}
	return o.Exchange
}

func (o *Detail) GetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionID
}

func (o *Detail) GetExecutionOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ExecutionOnly
}

func (o *Detail) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *Detail) GetFundConfirmationNumber() *string {
	if o == nil {
		return nil
	}
	return o.FundConfirmationNumber
}

func (o *Detail) GetGatewayClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.GatewayClientOrderID
}

func (o *Detail) GetInternalError() *bool {
	if o == nil {
		return nil
	}
	return o.InternalError
}

func (o *Detail) GetIsWriteoff() *bool {
	if o == nil {
		return nil
	}
	return o.IsWriteoff
}

func (o *Detail) GetLots() []Lot {
	if o == nil {
		return nil
	}
	return o.Lots
}

func (o *Detail) GetMarket() *string {
	if o == nil {
		return nil
	}
	return o.Market
}

func (o *Detail) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *Detail) GetPrevailingMarketPrice() *EntryFlipPrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *Detail) GetPriceAdjustmentRecord() *EntryPriceAdjustmentRecord {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentRecord
}

func (o *Detail) GetRoute() *string {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *Detail) GetSpecialInstructions() []string {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *Detail) GetWhenIssued() *bool {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

func (o *Detail) GetYieldRecords() []YieldRecord {
	if o == nil {
		return nil
	}
	return o.YieldRecords
}

// Flip - Object containing metadata for a Flip
type Flip struct {
	// Provides additional details for trades
	Detail *Detail `json:"detail,omitempty"`
}

func (o *Flip) GetDetail() *Detail {
	if o == nil {
		return nil
	}
	return o.Detail
}

// EntryFpslAction - Indicates whether shares are being allocated or deallocated
type EntryFpslAction string

const (
	EntryFpslActionFpslActionUnspecified EntryFpslAction = "FPSL_ACTION_UNSPECIFIED"
	EntryFpslActionAllocate              EntryFpslAction = "ALLOCATE"
	EntryFpslActionDeallocate            EntryFpslAction = "DEALLOCATE"
)

func (e EntryFpslAction) ToPointer() *EntryFpslAction {
	return &e
}

// Fpsl - Object containing metadata for fully paid stock lending entries
type Fpsl struct {
	// Indicates whether shares are being allocated or deallocated
	Action *EntryFpslAction `json:"action,omitempty"`
}

func (o *Fpsl) GetAction() *EntryFpslAction {
	if o == nil {
		return nil
	}
	return o.Action
}

// GrossAmount - The monetary value of an activity, exclusive of any fees (First money)
type GrossAmount struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *GrossAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// InterestAccrualEndDate - Date on which interest accrues before the calculation is made for payment or charge
type InterestAccrualEndDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *InterestAccrualEndDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *InterestAccrualEndDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *InterestAccrualEndDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// InterestAccrualStartDate - Date on which interest begins to accrue on a cash balance or borrowed funds
type InterestAccrualStartDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *InterestAccrualStartDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *InterestAccrualStartDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *InterestAccrualStartDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

type InterestType string

const (
	InterestTypeInterestTypeUnspecified InterestType = "INTEREST_TYPE_UNSPECIFIED"
	InterestTypeCredit                  InterestType = "CREDIT"
	InterestTypeDebit                   InterestType = "DEBIT"
)

func (e InterestType) ToPointer() *InterestType {
	return &e
}

// Interest - Object containing metadata for Margin interest
type Interest struct {
	// Date on which interest accrues before the calculation is made for payment or charge
	InterestAccrualEndDate *InterestAccrualEndDate `json:"interest_accrual_end_date,omitempty"`
	// Date on which interest begins to accrue on a cash balance or borrowed funds
	InterestAccrualStartDate *InterestAccrualStartDate `json:"interest_accrual_start_date,omitempty"`
	InterestType             *InterestType             `json:"interest_type,omitempty"`
}

func (o *Interest) GetInterestAccrualEndDate() *InterestAccrualEndDate {
	if o == nil {
		return nil
	}
	return o.InterestAccrualEndDate
}

func (o *Interest) GetInterestAccrualStartDate() *InterestAccrualStartDate {
	if o == nil {
		return nil
	}
	return o.InterestAccrualStartDate
}

func (o *Interest) GetInterestType() *InterestType {
	if o == nil {
		return nil
	}
	return o.InterestType
}

// EntryInterestPaymentCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type EntryInterestPaymentCashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryInterestPaymentCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryInterestPaymentCorporateActionGeneralInformation - Common fields for corporate actions
type EntryInterestPaymentCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryInterestPaymentCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryInterestPaymentCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryInterestPaymentCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryInterestPaymentCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryInterestPaymentCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryInterestPaymentCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryInterestPaymentCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryInterestPaymentPaymentDate - The anticipated payment date at the depository
type EntryInterestPaymentPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryInterestPaymentPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryInterestPaymentPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryInterestPaymentPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryInterestPaymentRecordDate - The date on which positions are recorded in order to calculate entitlement
type EntryInterestPaymentRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryInterestPaymentRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryInterestPaymentRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryInterestPaymentRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntrySettled - Corresponds to the position's settled quantity
type EntrySettled struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntrySettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// InterestPayment - Object containing metadata for interest payments
type InterestPayment struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *EntryInterestPaymentCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryInterestPaymentCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *EntryInterestPaymentPaymentDate `json:"payment_date,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *EntryInterestPaymentRecordDate `json:"record_date,omitempty"`
	// Corresponds to the position's settled quantity
	Settled *EntrySettled `json:"settled,omitempty"`
}

func (o *InterestPayment) GetCashRate() *EntryInterestPaymentCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *InterestPayment) GetCorporateActionGeneralInformation() *EntryInterestPaymentCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *InterestPayment) GetPaymentDate() *EntryInterestPaymentPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *InterestPayment) GetRecordDate() *EntryInterestPaymentRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *InterestPayment) GetSettled() *EntrySettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

// EntryLiquidationAction - Corresponds to whether the entry is incoming outgoing
type EntryLiquidationAction string

const (
	EntryLiquidationActionActionUnspecified EntryLiquidationAction = "ACTION_UNSPECIFIED"
	EntryLiquidationActionIncoming          EntryLiquidationAction = "INCOMING"
	EntryLiquidationActionOutgoing          EntryLiquidationAction = "OUTGOING"
	EntryLiquidationActionCashInLieu        EntryLiquidationAction = "CASH_IN_LIEU"
)

func (e EntryLiquidationAction) ToPointer() *EntryLiquidationAction {
	return &e
}

// EntryLiquidationCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type EntryLiquidationCashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryLiquidationCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryLiquidationCorporateActionGeneralInformation - Common fields for corporate actions
type EntryLiquidationCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryLiquidationCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryLiquidationCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryLiquidationCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryLiquidationCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryLiquidationCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryLiquidationCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryLiquidationCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryEffectiveDate - Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
type EntryEffectiveDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryEffectiveDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryEffectiveDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryEffectiveDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryLiquidationPaymentDate - The anticipated payment date at the depository.
type EntryLiquidationPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryLiquidationPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryLiquidationPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryLiquidationPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryLiquidationQuantity - Corresponds to the position's trade quantity
type EntryLiquidationQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryLiquidationQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryLiquidationRecordDate - The date on which positions are recorded in order to calculate entitlement
type EntryLiquidationRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryLiquidationRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryLiquidationRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryLiquidationRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryLiquidationSettled - Corresponds to the position's settled quantity
type EntryLiquidationSettled struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryLiquidationSettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntrySubtype - Corresponds to the subtype of corporaction type
type EntrySubtype string

const (
	EntrySubtypeCorporateactionsubtypeUnspecified  EntrySubtype = "CORPORATEACTIONSUBTYPE_UNSPECIFIED"
	EntrySubtypeAdditionalDividend                 EntrySubtype = "ADDITIONAL_DIVIDEND"
	EntrySubtypeApproximateRate                    EntrySubtype = "APPROXIMATE_RATE"
	EntrySubtypeDividendArrears                    EntrySubtype = "DIVIDEND_ARREARS"
	EntrySubtypeDividendCancelled                  EntrySubtype = "DIVIDEND_CANCELLED"
	EntrySubtypeDividendPaymentTaxClassifications  EntrySubtype = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS"
	EntrySubtypeDividendRescinded                  EntrySubtype = "DIVIDEND_RESCINDED"
	EntrySubtypeEstimatedReturnOfCapital           EntrySubtype = "ESTIMATED_RETURN_OF_CAPITAL"
	EntrySubtypeEstimatedReturnOfCapitalPlusIncome EntrySubtype = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME"
	EntrySubtypeExtraDividend                      EntrySubtype = "EXTRA_DIVIDEND"
	EntrySubtypeExtraDividendPlusIncome            EntrySubtype = "EXTRA_DIVIDEND_PLUS_INCOME"
	EntrySubtypeFinalPaymentTransferBooksAreClosed EntrySubtype = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED"
	EntrySubtypeGrossRate                          EntrySubtype = "GROSS_RATE"
	EntrySubtypeInitialDividend                    EntrySubtype = "INITIAL_DIVIDEND"
	EntrySubtypeInitialDividendLongPeriod          EntrySubtype = "INITIAL_DIVIDEND_LONG_PERIOD"
	EntrySubtypeInitialDividendShortPeriod         EntrySubtype = "INITIAL_DIVIDEND_SHORT_PERIOD"
	EntrySubtypeLimitedPartnershipDistribution     EntrySubtype = "LIMITED_PARTNERSHIP_DISTRIBUTION"
	EntrySubtypeLiquidation                        EntrySubtype = "LIQUIDATION"
	EntrySubtypeNetRate                            EntrySubtype = "NET_RATE"
	EntrySubtypeOther                              EntrySubtype = "OTHER"
	EntrySubtypeProceedsFromSaleOfRights           EntrySubtype = "PROCEEDS_FROM_SALE_OF_RIGHTS"
	EntrySubtypeRegularDividend                    EntrySubtype = "REGULAR_DIVIDEND"
	EntrySubtypeReturnOfCapital                    EntrySubtype = "RETURN_OF_CAPITAL"
	EntrySubtypeReturnOfCapitalPlusIncome          EntrySubtype = "RETURN_OF_CAPITAL_PLUS_INCOME"
	EntrySubtypeSpecialDividend                    EntrySubtype = "SPECIAL_DIVIDEND"
	EntrySubtypeSpecialDividendPlusIncome          EntrySubtype = "SPECIAL_DIVIDEND_PLUS_INCOME"
	EntrySubtypeYearEndDividend                    EntrySubtype = "YEAR_END_DIVIDEND"
	EntrySubtypeYearEndDividendPlusIncome          EntrySubtype = "YEAR_END_DIVIDEND_PLUS_INCOME"
	EntrySubtypePartial                            EntrySubtype = "PARTIAL"
	EntrySubtypeFull                               EntrySubtype = "FULL"
	EntrySubtypeMaturity                           EntrySubtype = "MATURITY"
	EntrySubtypeTermination                        EntrySubtype = "TERMINATION"
	EntrySubtypeRedemptionOfWarrants               EntrySubtype = "REDEMPTION_OF_WARRANTS"
)

func (e EntrySubtype) ToPointer() *EntrySubtype {
	return &e
}

// Liquidation - Object containing metadata for liquidations
type Liquidation struct {
	// Corresponds to whether the entry is incoming outgoing
	Action *EntryLiquidationAction `json:"action,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *EntryLiquidationCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryLiquidationCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
	EffectiveDate *EntryEffectiveDate `json:"effective_date,omitempty"`
	// The anticipated payment date at the depository.
	PaymentDate *EntryLiquidationPaymentDate `json:"payment_date,omitempty"`
	// Corresponds to the position's trade quantity
	Quantity *EntryLiquidationQuantity `json:"quantity,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *EntryLiquidationRecordDate `json:"record_date,omitempty"`
	// Corresponds to the position's settled quantity
	Settled *EntryLiquidationSettled `json:"settled,omitempty"`
	// Corresponds to the subtype of corporaction type
	Subtype *EntrySubtype `json:"subtype,omitempty"`
}

func (o *Liquidation) GetAction() *EntryLiquidationAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *Liquidation) GetCashRate() *EntryLiquidationCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *Liquidation) GetCorporateActionGeneralInformation() *EntryLiquidationCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *Liquidation) GetEffectiveDate() *EntryEffectiveDate {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *Liquidation) GetPaymentDate() *EntryLiquidationPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *Liquidation) GetQuantity() *EntryLiquidationQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *Liquidation) GetRecordDate() *EntryLiquidationRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *Liquidation) GetSettled() *EntryLiquidationSettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

func (o *Liquidation) GetSubtype() *EntrySubtype {
	if o == nil {
		return nil
	}
	return o.Subtype
}

// EntryMaturityCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type EntryMaturityCashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryMaturityCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryMaturityCorporateActionGeneralInformation - Common fields for corporate actions
type EntryMaturityCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryMaturityCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryMaturityCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryMaturityCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryMaturityCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryMaturityCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryMaturityCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryMaturityCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryMaturityPaymentDate - The anticipated payment date at the depository.
type EntryMaturityPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryMaturityPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryMaturityPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryMaturityPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryMaturityQuantity - The trade position quantity used to calculate the disbursed amount
type EntryMaturityQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryMaturityQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// Maturity - Object containing metadata for maturity events
type Maturity struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *EntryMaturityCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryMaturityCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository.
	PaymentDate *EntryMaturityPaymentDate `json:"payment_date,omitempty"`
	// The trade position quantity used to calculate the disbursed amount
	Quantity *EntryMaturityQuantity `json:"quantity,omitempty"`
}

func (o *Maturity) GetCashRate() *EntryMaturityCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *Maturity) GetCorporateActionGeneralInformation() *EntryMaturityCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *Maturity) GetPaymentDate() *EntryMaturityPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *Maturity) GetQuantity() *EntryMaturityQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

// EntryMergerAction - Corresponds to whether the entry is incoming outgoing
type EntryMergerAction string

const (
	EntryMergerActionActionUnspecified EntryMergerAction = "ACTION_UNSPECIFIED"
	EntryMergerActionIncoming          EntryMergerAction = "INCOMING"
	EntryMergerActionOutgoing          EntryMergerAction = "OUTGOING"
	EntryMergerActionCashInLieu        EntryMergerAction = "CASH_IN_LIEU"
)

func (e EntryMergerAction) ToPointer() *EntryMergerAction {
	return &e
}

// EntryMergerCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type EntryMergerCashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryMergerCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryMergerCorporateActionGeneralInformation - Common fields for corporate actions
type EntryMergerCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryMergerCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryMergerCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryMergerCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryMergerCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryMergerCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryMergerCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryMergerCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryMergerEffectiveDate - Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
type EntryMergerEffectiveDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryMergerEffectiveDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryMergerEffectiveDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryMergerEffectiveDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryMergerQuantity - Corresponds to the position's trade quantity
type EntryMergerQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryMergerQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryMergerStockRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type EntryMergerStockRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryMergerStockRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryMergerType - Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
type EntryMergerType string

const (
	EntryMergerTypeEventTypeUnspecified EntryMergerType = "EVENT_TYPE_UNSPECIFIED"
	EntryMergerTypeCash                 EntryMergerType = "CASH"
	EntryMergerTypeStock                EntryMergerType = "STOCK"
	EntryMergerTypeCashAndStock         EntryMergerType = "CASH_AND_STOCK"
)

func (e EntryMergerType) ToPointer() *EntryMergerType {
	return &e
}

// Merger - Object containing metadata for merger events
type Merger struct {
	// Corresponds to whether the entry is incoming outgoing
	Action *EntryMergerAction `json:"action,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *EntryMergerCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryMergerCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
	EffectiveDate *EntryMergerEffectiveDate `json:"effective_date,omitempty"`
	// Corresponds to the position's trade quantity
	Quantity *EntryMergerQuantity `json:"quantity,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	StockRate *EntryMergerStockRate `json:"stock_rate,omitempty"`
	// Corresponds to whether the event is CASH | STOCK | CASH_AND_STOCK
	Type *EntryMergerType `json:"type,omitempty"`
}

func (o *Merger) GetAction() *EntryMergerAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *Merger) GetCashRate() *EntryMergerCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *Merger) GetCorporateActionGeneralInformation() *EntryMergerCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *Merger) GetEffectiveDate() *EntryMergerEffectiveDate {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *Merger) GetQuantity() *EntryMergerQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *Merger) GetStockRate() *EntryMergerStockRate {
	if o == nil {
		return nil
	}
	return o.StockRate
}

func (o *Merger) GetType() *EntryMergerType {
	if o == nil {
		return nil
	}
	return o.Type
}

// EntryNameChangeAction - Corresponds to whether the entry is incoming outgoing
type EntryNameChangeAction string

const (
	EntryNameChangeActionActionUnspecified EntryNameChangeAction = "ACTION_UNSPECIFIED"
	EntryNameChangeActionIncoming          EntryNameChangeAction = "INCOMING"
	EntryNameChangeActionOutgoing          EntryNameChangeAction = "OUTGOING"
	EntryNameChangeActionCashInLieu        EntryNameChangeAction = "CASH_IN_LIEU"
)

func (e EntryNameChangeAction) ToPointer() *EntryNameChangeAction {
	return &e
}

// EntryNameChangeCorporateActionGeneralInformation - Common fields for corporate actions
type EntryNameChangeCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryNameChangeCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryNameChangeCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryNameChangeCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryNameChangeCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryNameChangeCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryNameChangeCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryNameChangeCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryNameChangeEffectiveDate - Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
type EntryNameChangeEffectiveDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryNameChangeEffectiveDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryNameChangeEffectiveDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryNameChangeEffectiveDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryNameChangeQuantity - Corresponds to the position's settled quantity
type EntryNameChangeQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryNameChangeQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// NameChange - Object containing metadata for name changes
type NameChange struct {
	// Corresponds to whether the entry is incoming outgoing
	Action *EntryNameChangeAction `json:"action,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryNameChangeCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
	EffectiveDate *EntryNameChangeEffectiveDate `json:"effective_date,omitempty"`
	// Corresponds to the position's settled quantity
	Quantity *EntryNameChangeQuantity `json:"quantity,omitempty"`
}

func (o *NameChange) GetAction() *EntryNameChangeAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *NameChange) GetCorporateActionGeneralInformation() *EntryNameChangeCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *NameChange) GetEffectiveDate() *EntryNameChangeEffectiveDate {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *NameChange) GetQuantity() *EntryNameChangeQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

// OriginalProcessDate - The original entry process date; stable across reversals and corrections; use for maintaining lineage of entries through multiple corrections/reversals
type OriginalProcessDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *OriginalProcessDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *OriginalProcessDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *OriginalProcessDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryPaymentInKindCorporateActionGeneralInformation - Common fields for corporate actions
type EntryPaymentInKindCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryPaymentInKindCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryPaymentInKindCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryPaymentInKindCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryPaymentInKindCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryPaymentInKindCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryPaymentInKindCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryPaymentInKindCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryPaymentInKindPaymentDate - The anticipated payment date at the depository
type EntryPaymentInKindPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryPaymentInKindPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryPaymentInKindPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryPaymentInKindPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryPaymentInKindRecordDate - The date on which positions are recorded in order to calculate entitlement
type EntryPaymentInKindRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryPaymentInKindRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryPaymentInKindRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryPaymentInKindRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryPaymentInKindSettled - Corresponds to the position's settled quantity
type EntryPaymentInKindSettled struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryPaymentInKindSettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryPaymentInKindStockRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type EntryPaymentInKindStockRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryPaymentInKindStockRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PaymentInKind - Object containing metadata for PaymentInKind
type PaymentInKind struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryPaymentInKindCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *EntryPaymentInKindPaymentDate `json:"payment_date,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *EntryPaymentInKindRecordDate `json:"record_date,omitempty"`
	// Corresponds to the position's settled quantity
	Settled *EntryPaymentInKindSettled `json:"settled,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	StockRate *EntryPaymentInKindStockRate `json:"stock_rate,omitempty"`
}

func (o *PaymentInKind) GetCorporateActionGeneralInformation() *EntryPaymentInKindCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *PaymentInKind) GetPaymentDate() *EntryPaymentInKindPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *PaymentInKind) GetRecordDate() *EntryPaymentInKindRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *PaymentInKind) GetSettled() *EntryPaymentInKindSettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

func (o *PaymentInKind) GetStockRate() *EntryPaymentInKindStockRate {
	if o == nil {
		return nil
	}
	return o.StockRate
}

// EntryPrice - The monetary value paid for a given security in a trade Required, except for currency movements
type EntryPrice struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryProcessDate - The date that the entry was booked on
type EntryProcessDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryProcessDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryProcessDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryProcessDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryQuantity - The quantity of shares bought, sold, or moved. For entries/ activities involving Fixed Income assets, quantity is expressed as par value Required for trades and memos, optional for movements.
type EntryQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// Receive - Object containing metadata for receive events
type Receive struct {
}

// EntryRedemptionFullAction - Corresponds to whether the entry is incoming outgoing
type EntryRedemptionFullAction string

const (
	EntryRedemptionFullActionActionUnspecified EntryRedemptionFullAction = "ACTION_UNSPECIFIED"
	EntryRedemptionFullActionIncoming          EntryRedemptionFullAction = "INCOMING"
	EntryRedemptionFullActionOutgoing          EntryRedemptionFullAction = "OUTGOING"
	EntryRedemptionFullActionCashInLieu        EntryRedemptionFullAction = "CASH_IN_LIEU"
)

func (e EntryRedemptionFullAction) ToPointer() *EntryRedemptionFullAction {
	return &e
}

// EntryRedemptionFullCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type EntryRedemptionFullCashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryRedemptionFullCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryRedemptionFullCorporateActionGeneralInformation - Common fields for corporate actions
type EntryRedemptionFullCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryRedemptionFullCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryRedemptionFullCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryRedemptionFullCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryRedemptionFullCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryRedemptionFullCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryRedemptionFullCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryRedemptionFullCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryRedemptionFullPaymentDate - The anticipated payment date at the depository.
type EntryRedemptionFullPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryRedemptionFullPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryRedemptionFullPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryRedemptionFullPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryRedemptionFullQuantity - Corresponds to the position's trade quantity
type EntryRedemptionFullQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryRedemptionFullQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryRedemptionFullSubtype - Corresponds to the subtype of corporaction type
type EntryRedemptionFullSubtype string

const (
	EntryRedemptionFullSubtypeCorporateactionsubtypeUnspecified  EntryRedemptionFullSubtype = "CORPORATEACTIONSUBTYPE_UNSPECIFIED"
	EntryRedemptionFullSubtypeAdditionalDividend                 EntryRedemptionFullSubtype = "ADDITIONAL_DIVIDEND"
	EntryRedemptionFullSubtypeApproximateRate                    EntryRedemptionFullSubtype = "APPROXIMATE_RATE"
	EntryRedemptionFullSubtypeDividendArrears                    EntryRedemptionFullSubtype = "DIVIDEND_ARREARS"
	EntryRedemptionFullSubtypeDividendCancelled                  EntryRedemptionFullSubtype = "DIVIDEND_CANCELLED"
	EntryRedemptionFullSubtypeDividendPaymentTaxClassifications  EntryRedemptionFullSubtype = "DIVIDEND_PAYMENT_TAX_CLASSIFICATIONS"
	EntryRedemptionFullSubtypeDividendRescinded                  EntryRedemptionFullSubtype = "DIVIDEND_RESCINDED"
	EntryRedemptionFullSubtypeEstimatedReturnOfCapital           EntryRedemptionFullSubtype = "ESTIMATED_RETURN_OF_CAPITAL"
	EntryRedemptionFullSubtypeEstimatedReturnOfCapitalPlusIncome EntryRedemptionFullSubtype = "ESTIMATED_RETURN_OF_CAPITAL_PLUS_INCOME"
	EntryRedemptionFullSubtypeExtraDividend                      EntryRedemptionFullSubtype = "EXTRA_DIVIDEND"
	EntryRedemptionFullSubtypeExtraDividendPlusIncome            EntryRedemptionFullSubtype = "EXTRA_DIVIDEND_PLUS_INCOME"
	EntryRedemptionFullSubtypeFinalPaymentTransferBooksAreClosed EntryRedemptionFullSubtype = "FINAL_PAYMENT_TRANSFER_BOOKS_ARE_CLOSED"
	EntryRedemptionFullSubtypeGrossRate                          EntryRedemptionFullSubtype = "GROSS_RATE"
	EntryRedemptionFullSubtypeInitialDividend                    EntryRedemptionFullSubtype = "INITIAL_DIVIDEND"
	EntryRedemptionFullSubtypeInitialDividendLongPeriod          EntryRedemptionFullSubtype = "INITIAL_DIVIDEND_LONG_PERIOD"
	EntryRedemptionFullSubtypeInitialDividendShortPeriod         EntryRedemptionFullSubtype = "INITIAL_DIVIDEND_SHORT_PERIOD"
	EntryRedemptionFullSubtypeLimitedPartnershipDistribution     EntryRedemptionFullSubtype = "LIMITED_PARTNERSHIP_DISTRIBUTION"
	EntryRedemptionFullSubtypeLiquidation                        EntryRedemptionFullSubtype = "LIQUIDATION"
	EntryRedemptionFullSubtypeNetRate                            EntryRedemptionFullSubtype = "NET_RATE"
	EntryRedemptionFullSubtypeOther                              EntryRedemptionFullSubtype = "OTHER"
	EntryRedemptionFullSubtypeProceedsFromSaleOfRights           EntryRedemptionFullSubtype = "PROCEEDS_FROM_SALE_OF_RIGHTS"
	EntryRedemptionFullSubtypeRegularDividend                    EntryRedemptionFullSubtype = "REGULAR_DIVIDEND"
	EntryRedemptionFullSubtypeReturnOfCapital                    EntryRedemptionFullSubtype = "RETURN_OF_CAPITAL"
	EntryRedemptionFullSubtypeReturnOfCapitalPlusIncome          EntryRedemptionFullSubtype = "RETURN_OF_CAPITAL_PLUS_INCOME"
	EntryRedemptionFullSubtypeSpecialDividend                    EntryRedemptionFullSubtype = "SPECIAL_DIVIDEND"
	EntryRedemptionFullSubtypeSpecialDividendPlusIncome          EntryRedemptionFullSubtype = "SPECIAL_DIVIDEND_PLUS_INCOME"
	EntryRedemptionFullSubtypeYearEndDividend                    EntryRedemptionFullSubtype = "YEAR_END_DIVIDEND"
	EntryRedemptionFullSubtypeYearEndDividendPlusIncome          EntryRedemptionFullSubtype = "YEAR_END_DIVIDEND_PLUS_INCOME"
	EntryRedemptionFullSubtypePartial                            EntryRedemptionFullSubtype = "PARTIAL"
	EntryRedemptionFullSubtypeFull                               EntryRedemptionFullSubtype = "FULL"
	EntryRedemptionFullSubtypeMaturity                           EntryRedemptionFullSubtype = "MATURITY"
	EntryRedemptionFullSubtypeTermination                        EntryRedemptionFullSubtype = "TERMINATION"
	EntryRedemptionFullSubtypeRedemptionOfWarrants               EntryRedemptionFullSubtype = "REDEMPTION_OF_WARRANTS"
)

func (e EntryRedemptionFullSubtype) ToPointer() *EntryRedemptionFullSubtype {
	return &e
}

// RedemptionFull - Object containing more information about a redemption
type RedemptionFull struct {
	// Corresponds to whether the entry is incoming outgoing
	Action *EntryRedemptionFullAction `json:"action,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *EntryRedemptionFullCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryRedemptionFullCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository.
	PaymentDate *EntryRedemptionFullPaymentDate `json:"payment_date,omitempty"`
	// Corresponds to the position's trade quantity
	Quantity *EntryRedemptionFullQuantity `json:"quantity,omitempty"`
	// Corresponds to the subtype of corporaction type
	Subtype *EntryRedemptionFullSubtype `json:"subtype,omitempty"`
}

func (o *RedemptionFull) GetAction() *EntryRedemptionFullAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *RedemptionFull) GetCashRate() *EntryRedemptionFullCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *RedemptionFull) GetCorporateActionGeneralInformation() *EntryRedemptionFullCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *RedemptionFull) GetPaymentDate() *EntryRedemptionFullPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *RedemptionFull) GetQuantity() *EntryRedemptionFullQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *RedemptionFull) GetSubtype() *EntryRedemptionFullSubtype {
	if o == nil {
		return nil
	}
	return o.Subtype
}

// EntryRedemptionPartialAction - Corresponds to whether the entry is incoming or outgoing
type EntryRedemptionPartialAction string

const (
	EntryRedemptionPartialActionActionUnspecified EntryRedemptionPartialAction = "ACTION_UNSPECIFIED"
	EntryRedemptionPartialActionIncoming          EntryRedemptionPartialAction = "INCOMING"
	EntryRedemptionPartialActionOutgoing          EntryRedemptionPartialAction = "OUTGOING"
	EntryRedemptionPartialActionCashInLieu        EntryRedemptionPartialAction = "CASH_IN_LIEU"
)

func (e EntryRedemptionPartialAction) ToPointer() *EntryRedemptionPartialAction {
	return &e
}

// EntryRedemptionPartialCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type EntryRedemptionPartialCashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryRedemptionPartialCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryRedemptionPartialCorporateActionGeneralInformation - Common fields for corporate actions
type EntryRedemptionPartialCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryRedemptionPartialCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryRedemptionPartialCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryRedemptionPartialCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryRedemptionPartialCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryRedemptionPartialCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryRedemptionPartialCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryRedemptionPartialCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryRedemptionPartialPaymentDate - The anticipated payment date at the depository
type EntryRedemptionPartialPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryRedemptionPartialPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryRedemptionPartialPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryRedemptionPartialPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryRedemptionPartialQuantity - Corresponds to the position's trade quantity
type EntryRedemptionPartialQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryRedemptionPartialQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RedemptionPartial - Object containing metadata for partial redemption
type RedemptionPartial struct {
	// Corresponds to whether the entry is incoming or outgoing
	Action *EntryRedemptionPartialAction `json:"action,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *EntryRedemptionPartialCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryRedemptionPartialCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *EntryRedemptionPartialPaymentDate `json:"payment_date,omitempty"`
	// Corresponds to the position's trade quantity
	Quantity *EntryRedemptionPartialQuantity `json:"quantity,omitempty"`
}

func (o *RedemptionPartial) GetAction() *EntryRedemptionPartialAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *RedemptionPartial) GetCashRate() *EntryRedemptionPartialCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *RedemptionPartial) GetCorporateActionGeneralInformation() *EntryRedemptionPartialCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *RedemptionPartial) GetPaymentDate() *EntryRedemptionPartialPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *RedemptionPartial) GetQuantity() *EntryRedemptionPartialQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

// EntryReverseStockSplitAction - Corresponds to whether the entry is incoming or outgoing
type EntryReverseStockSplitAction string

const (
	EntryReverseStockSplitActionActionUnspecified EntryReverseStockSplitAction = "ACTION_UNSPECIFIED"
	EntryReverseStockSplitActionIncoming          EntryReverseStockSplitAction = "INCOMING"
	EntryReverseStockSplitActionOutgoing          EntryReverseStockSplitAction = "OUTGOING"
	EntryReverseStockSplitActionCashInLieu        EntryReverseStockSplitAction = "CASH_IN_LIEU"
)

func (e EntryReverseStockSplitAction) ToPointer() *EntryReverseStockSplitAction {
	return &e
}

// EntryReverseStockSplitCorporateActionGeneralInformation - Common fields for corporate actions
type EntryReverseStockSplitCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryReverseStockSplitCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryReverseStockSplitCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryReverseStockSplitCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryReverseStockSplitCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryReverseStockSplitCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryReverseStockSplitCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryReverseStockSplitCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryReverseStockSplitEffectiveDate - Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
type EntryReverseStockSplitEffectiveDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryReverseStockSplitEffectiveDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryReverseStockSplitEffectiveDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryReverseStockSplitEffectiveDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// FactorDenominator - The previous rate of the security before the distribution
type FactorDenominator struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *FactorDenominator) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// FactorNumerator - The rate of the security distribution
type FactorNumerator struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *FactorNumerator) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryReverseStockSplitQuantity - Corresponds to the position's trade quantity
type EntryReverseStockSplitQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryReverseStockSplitQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryReverseStockSplitStockRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type EntryReverseStockSplitStockRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryReverseStockSplitStockRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// ReverseStockSplit - Object containing metadata for a reverse_stock_split
type ReverseStockSplit struct {
	// Corresponds to whether the entry is incoming or outgoing
	Action *EntryReverseStockSplitAction `json:"action,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryReverseStockSplitCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
	EffectiveDate *EntryReverseStockSplitEffectiveDate `json:"effective_date,omitempty"`
	// The previous rate of the security before the distribution
	FactorDenominator *FactorDenominator `json:"factor_denominator,omitempty"`
	// The rate of the security distribution
	FactorNumerator *FactorNumerator `json:"factor_numerator,omitempty"`
	// Corresponds to the position's trade quantity
	Quantity *EntryReverseStockSplitQuantity `json:"quantity,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	StockRate *EntryReverseStockSplitStockRate `json:"stock_rate,omitempty"`
}

func (o *ReverseStockSplit) GetAction() *EntryReverseStockSplitAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *ReverseStockSplit) GetCorporateActionGeneralInformation() *EntryReverseStockSplitCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *ReverseStockSplit) GetEffectiveDate() *EntryReverseStockSplitEffectiveDate {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *ReverseStockSplit) GetFactorDenominator() *FactorDenominator {
	if o == nil {
		return nil
	}
	return o.FactorDenominator
}

func (o *ReverseStockSplit) GetFactorNumerator() *FactorNumerator {
	if o == nil {
		return nil
	}
	return o.FactorNumerator
}

func (o *ReverseStockSplit) GetQuantity() *EntryReverseStockSplitQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ReverseStockSplit) GetStockRate() *EntryReverseStockSplitStockRate {
	if o == nil {
		return nil
	}
	return o.StockRate
}

// EntryRightsDistributionCorporateActionGeneralInformation - Common fields for corporate actions
type EntryRightsDistributionCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryRightsDistributionCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryRightsDistributionCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryRightsDistributionCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryRightsDistributionCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryRightsDistributionCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryRightsDistributionCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryRightsDistributionCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryRightsDistributionPaymentDate - The anticipated payment date at the depository.
type EntryRightsDistributionPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryRightsDistributionPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryRightsDistributionPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryRightsDistributionPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryRightsDistributionRecordDate - The date on which positions are recorded in order to calculate entitlement
type EntryRightsDistributionRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryRightsDistributionRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryRightsDistributionRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryRightsDistributionRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryRightsDistributionSettled - Corresponds to the position's settled quantity
type EntryRightsDistributionSettled struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryRightsDistributionSettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// RightsDistribution - Object containing more information about a rights distribution
type RightsDistribution struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryRightsDistributionCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository.
	PaymentDate *EntryRightsDistributionPaymentDate `json:"payment_date,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *EntryRightsDistributionRecordDate `json:"record_date,omitempty"`
	// Corresponds to the position's settled quantity
	Settled *EntryRightsDistributionSettled `json:"settled,omitempty"`
}

func (o *RightsDistribution) GetCorporateActionGeneralInformation() *EntryRightsDistributionCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *RightsDistribution) GetPaymentDate() *EntryRightsDistributionPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *RightsDistribution) GetRecordDate() *EntryRightsDistributionRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *RightsDistribution) GetSettled() *EntryRightsDistributionSettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

// EntryRightsSubscriptionCorporateActionGeneralInformation - Common fields for corporate actions
type EntryRightsSubscriptionCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryRightsSubscriptionCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryRightsSubscriptionCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryRightsSubscriptionCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryRightsSubscriptionCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryRightsSubscriptionCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryRightsSubscriptionCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryRightsSubscriptionCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// RightsSubscription - Object containing metadata for rights subscriptions
type RightsSubscription struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryRightsSubscriptionCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
}

func (o *RightsSubscription) GetCorporateActionGeneralInformation() *EntryRightsSubscriptionCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

// RoundingAdjustment - Object containing metadata for rounding
type RoundingAdjustment struct {
	// Free form text field providing reason for rounding
	RoundingReason *string `json:"rounding_reason,omitempty"`
}

func (o *RoundingAdjustment) GetRoundingReason() *string {
	if o == nil {
		return nil
	}
	return o.RoundingReason
}

// EntrySaleOfRightsCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type EntrySaleOfRightsCashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntrySaleOfRightsCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntrySaleOfRightsCorporateActionGeneralInformation - Common fields for corporate actions
type EntrySaleOfRightsCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntrySaleOfRightsCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntrySaleOfRightsCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntrySaleOfRightsCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntrySaleOfRightsCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntrySaleOfRightsCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntrySaleOfRightsCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntrySaleOfRightsCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntrySaleOfRightsPaymentDate - The anticipated payment date at the depository.
type EntrySaleOfRightsPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntrySaleOfRightsPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntrySaleOfRightsPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntrySaleOfRightsPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntrySaleOfRightsRecordDate - The date on which positions are recorded in order to calculate entitlement
type EntrySaleOfRightsRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntrySaleOfRightsRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntrySaleOfRightsRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntrySaleOfRightsRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntrySaleOfRightsSettled - Corresponds to the position's settled quantity
type EntrySaleOfRightsSettled struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntrySaleOfRightsSettled) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// SaleOfRights - Object containing more information about a sale_of_rights
type SaleOfRights struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *EntrySaleOfRightsCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntrySaleOfRightsCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository.
	PaymentDate *EntrySaleOfRightsPaymentDate `json:"payment_date,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *EntrySaleOfRightsRecordDate `json:"record_date,omitempty"`
	// Corresponds to the position's settled quantity
	Settled *EntrySaleOfRightsSettled `json:"settled,omitempty"`
}

func (o *SaleOfRights) GetCashRate() *EntrySaleOfRightsCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *SaleOfRights) GetCorporateActionGeneralInformation() *EntrySaleOfRightsCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *SaleOfRights) GetPaymentDate() *EntrySaleOfRightsPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

func (o *SaleOfRights) GetRecordDate() *EntrySaleOfRightsRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

func (o *SaleOfRights) GetSettled() *EntrySaleOfRightsSettled {
	if o == nil {
		return nil
	}
	return o.Settled
}

// SettleDate - The date a given entry/ activity will officially settle
type SettleDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *SettleDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *SettleDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *SettleDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntrySide - Denotes whether the trade is a buy or sell
type EntrySide string

const (
	EntrySideSideUnspecified EntrySide = "SIDE_UNSPECIFIED"
	EntrySideBuy             EntrySide = "BUY"
	EntrySideSell            EntrySide = "SELL"
)

func (e EntrySide) ToPointer() *EntrySide {
	return &e
}

// SideModifier - Additional information about a trade Should be populated if possible for trades; the side modifier for the trade
type SideModifier string

const (
	SideModifierSideModifierUnspecified SideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	SideModifierShort                   SideModifier = "SHORT"
	SideModifierShortExempt             SideModifier = "SHORT_EXEMPT"
	SideModifierShortCover              SideModifier = "SHORT_COVER"
	SideModifierOpen                    SideModifier = "OPEN"
	SideModifierClose                   SideModifier = "CLOSE"
)

func (e SideModifier) ToPointer() *SideModifier {
	return &e
}

// EntrySpinOffCorporateActionGeneralInformation - Common fields for corporate actions
type EntrySpinOffCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntrySpinOffCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntrySpinOffCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntrySpinOffCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntrySpinOffCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntrySpinOffCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntrySpinOffCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntrySpinOffCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// PayDate - The anticipated payment date at the depository.
type PayDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *PayDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *PayDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *PayDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntrySpinOffQuantity - Corresponds to the position's settled quantity
type EntrySpinOffQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntrySpinOffQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntrySpinOffRate - The rate at which shares will be disbursed to the shareholder
type EntrySpinOffRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntrySpinOffRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntrySpinOffRecordDate - The date on which positions are recorded in order to calculate entitlement
type EntrySpinOffRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntrySpinOffRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntrySpinOffRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntrySpinOffRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// SpinOff - Object containing metadata for spinoffs
type SpinOff struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntrySpinOffCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository.
	PayDate *PayDate `json:"pay_date,omitempty"`
	// Corresponds to the position's settled quantity
	Quantity *EntrySpinOffQuantity `json:"quantity,omitempty"`
	// The rate at which shares will be disbursed to the shareholder
	Rate *EntrySpinOffRate `json:"rate,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *EntrySpinOffRecordDate `json:"record_date,omitempty"`
}

func (o *SpinOff) GetCorporateActionGeneralInformation() *EntrySpinOffCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *SpinOff) GetPayDate() *PayDate {
	if o == nil {
		return nil
	}
	return o.PayDate
}

func (o *SpinOff) GetQuantity() *EntrySpinOffQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *SpinOff) GetRate() *EntrySpinOffRate {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *SpinOff) GetRecordDate() *EntrySpinOffRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

// EntryState - Set to be NEW for BookEntries, other statuses will be assigned via ModifyActivities; the state of the entry
type EntryState string

const (
	EntryStateEntryStateUnspecified EntryState = "ENTRY_STATE_UNSPECIFIED"
	EntryStateNew                   EntryState = "NEW"
	EntryStateReversal              EntryState = "REVERSAL"
	EntryStateCorrection            EntryState = "CORRECTION"
)

func (e EntryState) ToPointer() *EntryState {
	return &e
}

// EntryStockDividendCorporateActionGeneralInformation - Common fields for corporate actions
type EntryStockDividendCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryStockDividendCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryStockDividendCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryStockDividendCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryStockDividendCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryStockDividendCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryStockDividendCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryStockDividendCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryPayDate - The anticipated payment date at the depository.
type EntryPayDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryPayDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryPayDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryPayDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryStockDividendQuantity - Corresponds to the position's settled quantity
type EntryStockDividendQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryStockDividendQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryRate - The rate at which shares will be disbursed to the shareholder
type EntryRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryStockDividendRecordDate - The date on which positions are recorded in order to calculate entitlement
type EntryStockDividendRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryStockDividendRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryStockDividendRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryStockDividendRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// StockDividend - Object containing metadata for stock dividends
type StockDividend struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryStockDividendCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The anticipated payment date at the depository.
	PayDate *EntryPayDate `json:"pay_date,omitempty"`
	// Corresponds to the position's settled quantity
	Quantity *EntryStockDividendQuantity `json:"quantity,omitempty"`
	// The rate at which shares will be disbursed to the shareholder
	Rate *EntryRate `json:"rate,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *EntryStockDividendRecordDate `json:"record_date,omitempty"`
}

func (o *StockDividend) GetCorporateActionGeneralInformation() *EntryStockDividendCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *StockDividend) GetPayDate() *EntryPayDate {
	if o == nil {
		return nil
	}
	return o.PayDate
}

func (o *StockDividend) GetQuantity() *EntryStockDividendQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *StockDividend) GetRate() *EntryRate {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *StockDividend) GetRecordDate() *EntryStockDividendRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

// EntryStockSplitCorporateActionGeneralInformation - Common fields for corporate actions
type EntryStockSplitCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryStockSplitCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryStockSplitCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryStockSplitCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryStockSplitCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryStockSplitCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryStockSplitCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryStockSplitCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryFactorDenominator - The previous rate of the security before the distribution
type EntryFactorDenominator struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryFactorDenominator) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryFactorNumerator - The rate of the security distribution
type EntryFactorNumerator struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryFactorNumerator) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryStockSplitPayDate - The anticipated payment date at the depository.
type EntryStockSplitPayDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryStockSplitPayDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryStockSplitPayDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryStockSplitPayDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryStockSplitQuantity - Corresponds to the position's trade quantity
type EntryStockSplitQuantity struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryStockSplitQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryStockSplitRecordDate - The date on which positions are recorded in order to calculate entitlement
type EntryStockSplitRecordDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryStockSplitRecordDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryStockSplitRecordDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryStockSplitRecordDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// StockSplit - Object containing metadata for stock splits
type StockSplit struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryStockSplitCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The previous rate of the security before the distribution
	FactorDenominator *EntryFactorDenominator `json:"factor_denominator,omitempty"`
	// The rate of the security distribution
	FactorNumerator *EntryFactorNumerator `json:"factor_numerator,omitempty"`
	// The anticipated payment date at the depository.
	PayDate *EntryStockSplitPayDate `json:"pay_date,omitempty"`
	// Corresponds to the position's trade quantity
	Quantity *EntryStockSplitQuantity `json:"quantity,omitempty"`
	// The date on which positions are recorded in order to calculate entitlement
	RecordDate *EntryStockSplitRecordDate `json:"record_date,omitempty"`
}

func (o *StockSplit) GetCorporateActionGeneralInformation() *EntryStockSplitCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *StockSplit) GetFactorDenominator() *EntryFactorDenominator {
	if o == nil {
		return nil
	}
	return o.FactorDenominator
}

func (o *StockSplit) GetFactorNumerator() *EntryFactorNumerator {
	if o == nil {
		return nil
	}
	return o.FactorNumerator
}

func (o *StockSplit) GetPayDate() *EntryStockSplitPayDate {
	if o == nil {
		return nil
	}
	return o.PayDate
}

func (o *StockSplit) GetQuantity() *EntryStockSplitQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *StockSplit) GetRecordDate() *EntryStockSplitRecordDate {
	if o == nil {
		return nil
	}
	return o.RecordDate
}

// EntrySweepAction - Indicates purchase or redemption of the sweep asset
type EntrySweepAction string

const (
	EntrySweepActionSweepActionUnspecified EntrySweepAction = "SWEEP_ACTION_UNSPECIFIED"
	EntrySweepActionPurchase               EntrySweepAction = "PURCHASE"
	EntrySweepActionRedemption             EntrySweepAction = "REDEMPTION"
)

func (e EntrySweepAction) ToPointer() *EntrySweepAction {
	return &e
}

// EntrySweepType - Sweep program that cash is being swept to/ from
type EntrySweepType string

const (
	EntrySweepTypeSweepTypeUnspecified EntrySweepType = "SWEEP_TYPE_UNSPECIFIED"
	EntrySweepTypeFdic                 EntrySweepType = "FDIC"
	EntrySweepTypeMoneyMarket          EntrySweepType = "MONEY_MARKET"
)

func (e EntrySweepType) ToPointer() *EntrySweepType {
	return &e
}

// Sweep - Object containing metadata for sweeps
type Sweep struct {
	// Indicates purchase or redemption of the sweep asset
	Action *EntrySweepAction `json:"action,omitempty"`
	// Indicates the sweep was performed books were closed to prevent an investor account from carrying a negative cash balance overnight
	EodRedemption *bool `json:"eod_redemption,omitempty"`
	// Sweep program that cash is being swept to/ from
	Type *EntrySweepType `json:"type,omitempty"`
}

func (o *Sweep) GetAction() *EntrySweepAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *Sweep) GetEodRedemption() *bool {
	if o == nil {
		return nil
	}
	return o.EodRedemption
}

func (o *Sweep) GetType() *EntrySweepType {
	if o == nil {
		return nil
	}
	return o.Type
}

// EntryTenderOfferCashRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
type EntryTenderOfferCashRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryTenderOfferCashRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// EntryTenderOfferCorporateActionGeneralInformation - Common fields for corporate actions
type EntryTenderOfferCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryTenderOfferCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryTenderOfferCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryTenderOfferCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryTenderOfferCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryTenderOfferCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryTenderOfferCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryTenderOfferCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// TenderOffer - Object containing metadata for tender offers
type TenderOffer struct {
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which cash will be disbursed to the shareholder
	CashRate *EntryTenderOfferCashRate `json:"cash_rate,omitempty"`
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryTenderOfferCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
}

func (o *TenderOffer) GetCashRate() *EntryTenderOfferCashRate {
	if o == nil {
		return nil
	}
	return o.CashRate
}

func (o *TenderOffer) GetCorporateActionGeneralInformation() *EntryTenderOfferCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

// EntryBrokerCapacity - Used to calculate broadridge blotter code
type EntryBrokerCapacity string

const (
	EntryBrokerCapacityCapacityUnspecified EntryBrokerCapacity = "CAPACITY_UNSPECIFIED"
	EntryBrokerCapacityAgency              EntryBrokerCapacity = "AGENCY"
	EntryBrokerCapacityPrincipal           EntryBrokerCapacity = "PRINCIPAL"
	EntryBrokerCapacityMixed               EntryBrokerCapacity = "MIXED"
)

func (e EntryBrokerCapacity) ToPointer() *EntryBrokerCapacity {
	return &e
}

// EntryPrevailingMarketPrice - The price for the instrument that is prevailing in the market.
type EntryPrevailingMarketPrice struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryPrevailingMarketPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PriceAdjustmentAmount - Total monetary value of the price_adjustment
type PriceAdjustmentAmount struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *PriceAdjustmentAmount) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PriceAdjustmentPercent - The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
type PriceAdjustmentPercent struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *PriceAdjustmentPercent) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// PriceAdjustmentType - The type of price adjustment being applied by the broker to the net price of the security.
type PriceAdjustmentType string

const (
	PriceAdjustmentTypePriceAdjustmentTypeUnspecified PriceAdjustmentType = "PRICE_ADJUSTMENT_TYPE_UNSPECIFIED"
	PriceAdjustmentTypeMarkup                         PriceAdjustmentType = "MARKUP"
	PriceAdjustmentTypeMarkdown                       PriceAdjustmentType = "MARKDOWN"
	PriceAdjustmentTypeSalesLoad                      PriceAdjustmentType = "SALES_LOAD"
)

func (e PriceAdjustmentType) ToPointer() *PriceAdjustmentType {
	return &e
}

// PriceAdjustmentRecord - Information about any price adjustments applied to the security
type PriceAdjustmentRecord struct {
	// Total monetary value of the price_adjustment
	PriceAdjustmentAmount *PriceAdjustmentAmount `json:"price_adjustment_amount,omitempty"`
	// The percent at which the price was adjusted. Expressed as a number from 0.00-100 (rounded to 2 decimals)
	PriceAdjustmentPercent *PriceAdjustmentPercent `json:"price_adjustment_percent,omitempty"`
	// The type of price adjustment being applied by the broker to the net price of the security.
	PriceAdjustmentType *PriceAdjustmentType `json:"price_adjustment_type,omitempty"`
}

func (o *PriceAdjustmentRecord) GetPriceAdjustmentAmount() *PriceAdjustmentAmount {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentAmount
}

func (o *PriceAdjustmentRecord) GetPriceAdjustmentPercent() *PriceAdjustmentPercent {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentPercent
}

func (o *PriceAdjustmentRecord) GetPriceAdjustmentType() *PriceAdjustmentType {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentType
}

// Trade - Object containing metadata for trades
type Trade struct {
	// To be populated by the submitter of the trade detail
	AdditionalInstructions []string `json:"additional_instructions,omitempty"`
	// Max Length 50 characters. Alternate order id from the street used for FRAC trades
	AlternateOrderID *string `json:"alternate_order_id,omitempty"`
	// base64 encoded value assigned by the Booking API to all executions
	BookingAPIBookingExecutionID *string `json:"booking_api_booking_execution_id,omitempty"`
	// base64 encoded value assigned by the Booking API if a trade belongs to an allocation
	BookingAPITradeAllocationID *string `json:"booking_api_trade_allocation_id,omitempty"`
	// base64 encoded value assigned by the Booking API to all trades
	BookingAPITradeID *string `json:"booking_api_trade_id,omitempty"`
	// Executing broker of the trade
	Broker *string `json:"broker,omitempty"`
	// Used to calculate broadridge blotter code
	BrokerCapacity *EntryBrokerCapacity `json:"broker_capacity,omitempty"`
	// client usage area (intact). len 20
	ClientMemo *string `json:"client_memo,omitempty"`
	// Max Length 50 characters. Client provided order id present in exec reports
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// MIC code for the exchange
	Exchange *string `json:"exchange,omitempty"`
	// Max Length 50 characters. Execution id from the street
	ExecutionID *string `json:"execution_id,omitempty"`
	// Indicates whether Apex is the clearing broker for this trade
	ExecutionOnly *bool `json:"execution_only,omitempty"`
	// Max Length 50 characters. External system id provided by a client
	ExternalID *string `json:"external_id,omitempty"`
	// The confirmation number associated with a mutual fund trade
	FundConfirmationNumber *string `json:"fund_confirmation_number,omitempty"`
	// Order id generated by trading-gateway (Trade-Ex) to uniquely identify all orders in their system Used as the client_order_id on new order singles sent downstream of the trading-gateway
	GatewayClientOrderID *string `json:"gateway_client_order_id,omitempty"`
	// If set to true, indicates the trade should be omitted from client billing
	InternalError *bool `json:"internal_error,omitempty"`
	// set on penny-for-the-lot trades
	IsWriteoff *bool `json:"is_writeoff,omitempty"`
	// Trade lots
	Lots []Lot `json:"lots,omitempty"`
	// "MMAP" for multi market average price, "UNKN" for unknown
	Market *string `json:"market,omitempty"`
	// Max Length 50 characters. Internally generated order id that is returned to client on exec reports
	OrderID *string `json:"order_id,omitempty"`
	// The price for the instrument that is prevailing in the market.
	PrevailingMarketPrice *EntryPrevailingMarketPrice `json:"prevailing_market_price,omitempty"`
	// Information about any price adjustments applied to the security
	PriceAdjustmentRecord *PriceAdjustmentRecord `json:"price_adjustment_record,omitempty"`
	// The execution route Apex used for this trade
	Route *string `json:"route,omitempty"`
	// Special instructions for the trade
	SpecialInstructions []string `json:"special_instructions,omitempty"`
	// Indicates the trade was executed in a security that is not currently listed. When-issued securities are bought and sold before they are officially issued, allowing investors to speculate on their future value
	WhenIssued *bool `json:"when_issued,omitempty"`
	// The yields associated with a fixed income trade. Only valid if the SecurityType is FIXED_INCOME
	YieldRecords []YieldRecord `json:"yield_records,omitempty"`
}

func (o *Trade) GetAdditionalInstructions() []string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *Trade) GetAlternateOrderID() *string {
	if o == nil {
		return nil
	}
	return o.AlternateOrderID
}

func (o *Trade) GetBookingAPIBookingExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPIBookingExecutionID
}

func (o *Trade) GetBookingAPITradeAllocationID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeAllocationID
}

func (o *Trade) GetBookingAPITradeID() *string {
	if o == nil {
		return nil
	}
	return o.BookingAPITradeID
}

func (o *Trade) GetBroker() *string {
	if o == nil {
		return nil
	}
	return o.Broker
}

func (o *Trade) GetBrokerCapacity() *EntryBrokerCapacity {
	if o == nil {
		return nil
	}
	return o.BrokerCapacity
}

func (o *Trade) GetClientMemo() *string {
	if o == nil {
		return nil
	}
	return o.ClientMemo
}

func (o *Trade) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *Trade) GetExchange() *string {
	if o == nil {
		return nil
	}
	return o.Exchange
}

func (o *Trade) GetExecutionID() *string {
	if o == nil {
		return nil
	}
	return o.ExecutionID
}

func (o *Trade) GetExecutionOnly() *bool {
	if o == nil {
		return nil
	}
	return o.ExecutionOnly
}

func (o *Trade) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *Trade) GetFundConfirmationNumber() *string {
	if o == nil {
		return nil
	}
	return o.FundConfirmationNumber
}

func (o *Trade) GetGatewayClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.GatewayClientOrderID
}

func (o *Trade) GetInternalError() *bool {
	if o == nil {
		return nil
	}
	return o.InternalError
}

func (o *Trade) GetIsWriteoff() *bool {
	if o == nil {
		return nil
	}
	return o.IsWriteoff
}

func (o *Trade) GetLots() []Lot {
	if o == nil {
		return nil
	}
	return o.Lots
}

func (o *Trade) GetMarket() *string {
	if o == nil {
		return nil
	}
	return o.Market
}

func (o *Trade) GetOrderID() *string {
	if o == nil {
		return nil
	}
	return o.OrderID
}

func (o *Trade) GetPrevailingMarketPrice() *EntryPrevailingMarketPrice {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *Trade) GetPriceAdjustmentRecord() *PriceAdjustmentRecord {
	if o == nil {
		return nil
	}
	return o.PriceAdjustmentRecord
}

func (o *Trade) GetRoute() *string {
	if o == nil {
		return nil
	}
	return o.Route
}

func (o *Trade) GetSpecialInstructions() []string {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *Trade) GetWhenIssued() *bool {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}

func (o *Trade) GetYieldRecords() []YieldRecord {
	if o == nil {
		return nil
	}
	return o.YieldRecords
}

// EntryTransferType - Provides more detail on the type of transfer
type EntryTransferType string

const (
	EntryTransferTypeTransferTypeUnspecified EntryTransferType = "TRANSFER_TYPE_UNSPECIFIED"
	EntryTransferTypeTransferConversion      EntryTransferType = "TRANSFER_CONVERSION"
	EntryTransferTypeDeconversion            EntryTransferType = "DECONVERSION"
	EntryTransferTypeMigration               EntryTransferType = "MIGRATION"
	EntryTransferTypeManualAdjustment        EntryTransferType = "MANUAL_ADJUSTMENT"
)

func (e EntryTransferType) ToPointer() *EntryTransferType {
	return &e
}

// Transfer - Object containing metadata for transfers
type Transfer struct {
	// Free form text field
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// String field that can be populated with the broker dealer undergoing a clearing platform conversion. Used for activity description purposes
	ClientBrokerage *string `json:"client_brokerage,omitempty"`
	// Provides more detail on the type of transfer
	TransferType *EntryTransferType `json:"transfer_type,omitempty"`
}

func (o *Transfer) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *Transfer) GetClientBrokerage() *string {
	if o == nil {
		return nil
	}
	return o.ClientBrokerage
}

func (o *Transfer) GetTransferType() *EntryTransferType {
	if o == nil {
		return nil
	}
	return o.TransferType
}

// EntryType - The Type of the entry; determines the set of mandatory fields as well as informing downstream processes how to handle this record
type EntryType string

const (
	EntryTypeTypeUnspecified EntryType = "TYPE_UNSPECIFIED"
	EntryTypeTrade           EntryType = "TRADE"
	EntryTypeMovement        EntryType = "MOVEMENT"
	EntryTypeMemo            EntryType = "MEMO"
	EntryTypeCorporateAction EntryType = "CORPORATE_ACTION"
)

func (e EntryType) ToPointer() *EntryType {
	return &e
}

// EntryUnitSplitCorporateActionGeneralInformation - Common fields for corporate actions
type EntryUnitSplitCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryUnitSplitCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryUnitSplitCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryUnitSplitCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryUnitSplitCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryUnitSplitCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryUnitSplitCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryUnitSplitCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryUnitSplitStockRate - The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
type EntryUnitSplitStockRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryUnitSplitStockRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// UnitSplit - Object containing metadata for unit splits
type UnitSplit struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryUnitSplitCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// The rate (raw value, not a percentage, example: 50% will be .5 in this field) at which shares will be disbursed to the shareholder
	StockRate *EntryUnitSplitStockRate `json:"stock_rate,omitempty"`
}

func (o *UnitSplit) GetCorporateActionGeneralInformation() *EntryUnitSplitCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *UnitSplit) GetStockRate() *EntryUnitSplitStockRate {
	if o == nil {
		return nil
	}
	return o.StockRate
}

// EntryWarrantExerciseCorporateActionGeneralInformation - Common fields for corporate actions
type EntryWarrantExerciseCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryWarrantExerciseCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryWarrantExerciseCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryWarrantExerciseCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryWarrantExerciseCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryWarrantExerciseCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryWarrantExerciseCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryWarrantExerciseCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// WarrantExercise - Object containing metadata for warrant exercises
type WarrantExercise struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryWarrantExerciseCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
}

func (o *WarrantExercise) GetCorporateActionGeneralInformation() *EntryWarrantExerciseCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

// DistributionType - Provides information on the reason for the distribution from a retirement account
type DistributionType string

const (
	DistributionTypeDistributionTypeUnspecified                DistributionType = "DISTRIBUTION_TYPE_UNSPECIFIED"
	DistributionTypePremature                                  DistributionType = "PREMATURE"
	DistributionTypeDisability                                 DistributionType = "DISABILITY"
	DistributionTypeDeath                                      DistributionType = "DEATH"
	DistributionTypeNormal                                     DistributionType = "NORMAL"
	DistributionTypeSosepp                                     DistributionType = "SOSEPP"
	DistributionTypeRolloverToQualifiedPlan                    DistributionType = "ROLLOVER_TO_QUALIFIED_PLAN"
	DistributionTypeRolloverToIra                              DistributionType = "ROLLOVER_TO_IRA"
	DistributionTypeDistTransfer                               DistributionType = "DIST_TRANSFER"
	DistributionTypeExcessContributionRemovalBeforeTaxDeadline DistributionType = "EXCESS_CONTRIBUTION_REMOVAL_BEFORE_TAX_DEADLINE"
	DistributionTypeExcessContributionRemovalAfterTaxDeadline  DistributionType = "EXCESS_CONTRIBUTION_REMOVAL_AFTER_TAX_DEADLINE"
	DistributionTypeRecharacterizationPriorYear                DistributionType = "RECHARACTERIZATION_PRIOR_YEAR"
	DistributionTypeRecharacterizationCurrentYear              DistributionType = "RECHARACTERIZATION_CURRENT_YEAR"
	DistributionTypeDistConversion                             DistributionType = "DIST_CONVERSION"
	DistributionTypeManagementFee                              DistributionType = "MANAGEMENT_FEE"
	DistributionTypePrematureSimpleIraLessThan2Years           DistributionType = "PREMATURE_SIMPLE_IRA_LESS_THAN_2_YEARS"
	DistributionTypeNormalRothIraGreaterThan5Years             DistributionType = "NORMAL_ROTH_IRA_GREATER_THAN_5_YEARS"
	DistributionTypePlanLoan401K                               DistributionType = "PLAN_LOAN_401K"
	DistributionTypeNetIncomeAttributable                      DistributionType = "NET_INCOME_ATTRIBUTABLE"
	DistributionTypeRevocation                                 DistributionType = "REVOCATION"
	DistributionTypeNonReportable                              DistributionType = "NON_REPORTABLE"
)

func (e DistributionType) ToPointer() *DistributionType {
	return &e
}

// RetirementType - Used for descriptive purposes only. Indicates the type of retirement account
type RetirementType string

const (
	RetirementTypeRetirementTypeUnspecified RetirementType = "RETIREMENT_TYPE_UNSPECIFIED"
	RetirementTypeIra                       RetirementType = "IRA"
	RetirementTypeSep                       RetirementType = "SEP"
	RetirementTypeSimple                    RetirementType = "SIMPLE"
	RetirementTypeKeogh                     RetirementType = "KEOGH"
	RetirementTypeRoth                      RetirementType = "ROTH"
	RetirementTypeQp                        RetirementType = "QP"
	RetirementTypeRolloverIra               RetirementType = "ROLLOVER_IRA"
)

func (e RetirementType) ToPointer() *RetirementType {
	return &e
}

// EntryWithdrawalType - Provides information on the method through which a deposit/ withdrawal was initiated
type EntryWithdrawalType string

const (
	EntryWithdrawalTypeExternalMovementTypeUnspecified EntryWithdrawalType = "EXTERNAL_MOVEMENT_TYPE_UNSPECIFIED"
	EntryWithdrawalTypeAch                             EntryWithdrawalType = "ACH"
	EntryWithdrawalTypeCheck                           EntryWithdrawalType = "CHECK"
	EntryWithdrawalTypeWire                            EntryWithdrawalType = "WIRE"
	EntryWithdrawalTypePaypal                          EntryWithdrawalType = "PAYPAL"
	EntryWithdrawalTypeRtp                             EntryWithdrawalType = "RTP"
	EntryWithdrawalTypeIct                             EntryWithdrawalType = "ICT"
	EntryWithdrawalTypeJournal                         EntryWithdrawalType = "JOURNAL"
)

func (e EntryWithdrawalType) ToPointer() *EntryWithdrawalType {
	return &e
}

// Withdrawal - Object containing metadata for withdrawals
type Withdrawal struct {
	// Free form text field
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Indicates the withdrawal was part of an account closure
	ClosingAccount *bool `json:"closing_account,omitempty"`
	// Human readable account identifier for the account the assets were journaled. To be populated when the Withdrawal type is Journal
	DestinationAccountNumber *string `json:"destination_account_number,omitempty"`
	// If populated, provides information on the institution the funds have been sent to
	DestinationInstitution *string `json:"destination_institution,omitempty"`
	// Provides information on the reason for the distribution from a retirement account
	DistributionType *DistributionType `json:"distribution_type,omitempty"`
	// tax year associated with the distribution
	DistributionYear *int `json:"distribution_year,omitempty"`
	// Unique tracking number provided to allow tracking a wire transfer from the initiating bank to the receiving bank
	FedReferenceNumber *string `json:"fed_reference_number,omitempty"`
	// If populated, provides information on the institution where the funds originated
	OriginatingInstitution *string `json:"originating_institution,omitempty"`
	Periodic               *bool   `json:"periodic,omitempty"`
	// Used for descriptive purposes only. Indicates the type of retirement account
	RetirementType *RetirementType `json:"retirement_type,omitempty"`
	// Provides information on the method through which a deposit/ withdrawal was initiated
	Type *EntryWithdrawalType `json:"type,omitempty"`
}

func (o *Withdrawal) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *Withdrawal) GetClosingAccount() *bool {
	if o == nil {
		return nil
	}
	return o.ClosingAccount
}

func (o *Withdrawal) GetDestinationAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.DestinationAccountNumber
}

func (o *Withdrawal) GetDestinationInstitution() *string {
	if o == nil {
		return nil
	}
	return o.DestinationInstitution
}

func (o *Withdrawal) GetDistributionType() *DistributionType {
	if o == nil {
		return nil
	}
	return o.DistributionType
}

func (o *Withdrawal) GetDistributionYear() *int {
	if o == nil {
		return nil
	}
	return o.DistributionYear
}

func (o *Withdrawal) GetFedReferenceNumber() *string {
	if o == nil {
		return nil
	}
	return o.FedReferenceNumber
}

func (o *Withdrawal) GetOriginatingInstitution() *string {
	if o == nil {
		return nil
	}
	return o.OriginatingInstitution
}

func (o *Withdrawal) GetPeriodic() *bool {
	if o == nil {
		return nil
	}
	return o.Periodic
}

func (o *Withdrawal) GetRetirementType() *RetirementType {
	if o == nil {
		return nil
	}
	return o.RetirementType
}

func (o *Withdrawal) GetType() *EntryWithdrawalType {
	if o == nil {
		return nil
	}
	return o.Type
}

// Review - Indicates the state of the withdrawal review
type Review string

const (
	ReviewReviewStateUnspecified Review = "REVIEW_STATE_UNSPECIFIED"
	ReviewReviewStatePending     Review = "REVIEW_STATE_PENDING"
	ReviewReviewStateComplete    Review = "REVIEW_STATE_COMPLETE"
)

func (e Review) ToPointer() *Review {
	return &e
}

// WithdrawalPendingReview - Object containing metadata about withdrawals that have been requested, but have not posted
type WithdrawalPendingReview struct {
	// Indicates the state of the withdrawal review
	Review *Review `json:"review,omitempty"`
}

func (o *WithdrawalPendingReview) GetReview() *Review {
	if o == nil {
		return nil
	}
	return o.Review
}

// EntryWithholdingRate - the rate will be converted to a percentage in the activity description
type EntryWithholdingRate struct {
	// The decimal value, as a string; Refer to [Googleâ€™s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *EntryWithholdingRate) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type EntryWithholdingState string

const (
	EntryWithholdingStateWithholdingStateUnspecified EntryWithholdingState = "WITHHOLDING_STATE_UNSPECIFIED"
	EntryWithholdingStateCa                          EntryWithholdingState = "CA"
	EntryWithholdingStateMe                          EntryWithholdingState = "ME"
	EntryWithholdingStateVt                          EntryWithholdingState = "VT"
	EntryWithholdingStateAl                          EntryWithholdingState = "AL"
	EntryWithholdingStateAk                          EntryWithholdingState = "AK"
	EntryWithholdingStateAz                          EntryWithholdingState = "AZ"
	EntryWithholdingStateAr                          EntryWithholdingState = "AR"
	EntryWithholdingStateCo                          EntryWithholdingState = "CO"
	EntryWithholdingStateCt                          EntryWithholdingState = "CT"
	EntryWithholdingStateDe                          EntryWithholdingState = "DE"
	EntryWithholdingStateFl                          EntryWithholdingState = "FL"
	EntryWithholdingStateGa                          EntryWithholdingState = "GA"
	EntryWithholdingStateHi                          EntryWithholdingState = "HI"
	EntryWithholdingStateID                          EntryWithholdingState = "ID"
	EntryWithholdingStateIl                          EntryWithholdingState = "IL"
	EntryWithholdingStateIn                          EntryWithholdingState = "IN"
	EntryWithholdingStateIa                          EntryWithholdingState = "IA"
	EntryWithholdingStateKs                          EntryWithholdingState = "KS"
	EntryWithholdingStateKy                          EntryWithholdingState = "KY"
	EntryWithholdingStateLa                          EntryWithholdingState = "LA"
	EntryWithholdingStateMd                          EntryWithholdingState = "MD"
	EntryWithholdingStateMa                          EntryWithholdingState = "MA"
	EntryWithholdingStateMi                          EntryWithholdingState = "MI"
	EntryWithholdingStateMn                          EntryWithholdingState = "MN"
	EntryWithholdingStateMs                          EntryWithholdingState = "MS"
	EntryWithholdingStateMo                          EntryWithholdingState = "MO"
	EntryWithholdingStateMt                          EntryWithholdingState = "MT"
	EntryWithholdingStateNe                          EntryWithholdingState = "NE"
	EntryWithholdingStateNv                          EntryWithholdingState = "NV"
	EntryWithholdingStateNh                          EntryWithholdingState = "NH"
	EntryWithholdingStateNj                          EntryWithholdingState = "NJ"
	EntryWithholdingStateNm                          EntryWithholdingState = "NM"
	EntryWithholdingStateNy                          EntryWithholdingState = "NY"
	EntryWithholdingStateNc                          EntryWithholdingState = "NC"
	EntryWithholdingStateNd                          EntryWithholdingState = "ND"
	EntryWithholdingStateOh                          EntryWithholdingState = "OH"
	EntryWithholdingStateOk                          EntryWithholdingState = "OK"
	EntryWithholdingStateOr                          EntryWithholdingState = "OR"
	EntryWithholdingStatePa                          EntryWithholdingState = "PA"
	EntryWithholdingStateRi                          EntryWithholdingState = "RI"
	EntryWithholdingStateSc                          EntryWithholdingState = "SC"
	EntryWithholdingStateSd                          EntryWithholdingState = "SD"
	EntryWithholdingStateTn                          EntryWithholdingState = "TN"
	EntryWithholdingStateTx                          EntryWithholdingState = "TX"
	EntryWithholdingStateUt                          EntryWithholdingState = "UT"
	EntryWithholdingStateVa                          EntryWithholdingState = "VA"
	EntryWithholdingStateWa                          EntryWithholdingState = "WA"
	EntryWithholdingStateWv                          EntryWithholdingState = "WV"
	EntryWithholdingStateWi                          EntryWithholdingState = "WI"
	EntryWithholdingStateWy                          EntryWithholdingState = "WY"
)

func (e EntryWithholdingState) ToPointer() *EntryWithholdingState {
	return &e
}

// EntryWithholdingType - The type of withholding
type EntryWithholdingType string

const (
	EntryWithholdingTypeWithholdingTypeUnspecified EntryWithholdingType = "WITHHOLDING_TYPE_UNSPECIFIED"
	EntryWithholdingTypeFederal                    EntryWithholdingType = "FEDERAL"
	EntryWithholdingTypeState                      EntryWithholdingType = "STATE"
	EntryWithholdingTypeForeignSecurity            EntryWithholdingType = "FOREIGN_SECURITY"
	EntryWithholdingTypeFederalIra                 EntryWithholdingType = "FEDERAL_IRA"
	EntryWithholdingTypeStateIra                   EntryWithholdingType = "STATE_IRA"
	EntryWithholdingTypeNonResidentAlien           EntryWithholdingType = "NON_RESIDENT_ALIEN"
)

func (e EntryWithholdingType) ToPointer() *EntryWithholdingType {
	return &e
}

// EntryWithholding - Object containing metadata for tax withholdings
type EntryWithholding struct {
	// the rate will be converted to a percentage in the activity description
	Rate *EntryWithholdingRate `json:"rate,omitempty"`
	// Two character region code, complies with https://cldr.unicode.org/index
	RegionCode *string                `json:"region_code,omitempty"`
	State      *EntryWithholdingState `json:"state,omitempty"`
	// The tax year associated with the withholding
	TaxYear *int `json:"tax_year,omitempty"`
	// The type of withholding
	Type *EntryWithholdingType `json:"type,omitempty"`
}

func (o *EntryWithholding) GetRate() *EntryWithholdingRate {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *EntryWithholding) GetRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.RegionCode
}

func (o *EntryWithholding) GetState() *EntryWithholdingState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *EntryWithholding) GetTaxYear() *int {
	if o == nil {
		return nil
	}
	return o.TaxYear
}

func (o *EntryWithholding) GetType() *EntryWithholdingType {
	if o == nil {
		return nil
	}
	return o.Type
}

// EntryWorthlessCorporateActionGeneralInformation - Common fields for corporate actions
type EntryWorthlessCorporateActionGeneralInformation struct {
	// A unique alphanumeric value that is assigned to uniquely identify each corporate action event.
	CorporateActionID *string `json:"corporate_action_id,omitempty"`
	// Asset Id of the new security after the corporate action event is processed.
	DisbursedAssetID *string `json:"disbursed_asset_id,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedCusip *string `json:"disbursed_cusip,omitempty"`
	// When populated, the name of the issuer of a security and additional descriptive information about the new security after the corporate action event is processed.
	DisbursedSymbolDescription *string `json:"disbursed_symbol_description,omitempty"`
	// Asset Id of the existing security before the corporate action event is processed.
	TargetAssetID *string `json:"target_asset_id,omitempty"`
	// External Identifier of the existing security before the corporate action event is processed.
	TargetCusip *string `json:"target_cusip,omitempty"`
	// Name of the issuer of a security and additional descriptive information about the existing security before the corporate action event is processed.
	TargetSymbolDescription *string `json:"target_symbol_description,omitempty"`
}

func (o *EntryWorthlessCorporateActionGeneralInformation) GetCorporateActionID() *string {
	if o == nil {
		return nil
	}
	return o.CorporateActionID
}

func (o *EntryWorthlessCorporateActionGeneralInformation) GetDisbursedAssetID() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedAssetID
}

func (o *EntryWorthlessCorporateActionGeneralInformation) GetDisbursedCusip() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedCusip
}

func (o *EntryWorthlessCorporateActionGeneralInformation) GetDisbursedSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.DisbursedSymbolDescription
}

func (o *EntryWorthlessCorporateActionGeneralInformation) GetTargetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetAssetID
}

func (o *EntryWorthlessCorporateActionGeneralInformation) GetTargetCusip() *string {
	if o == nil {
		return nil
	}
	return o.TargetCusip
}

func (o *EntryWorthlessCorporateActionGeneralInformation) GetTargetSymbolDescription() *string {
	if o == nil {
		return nil
	}
	return o.TargetSymbolDescription
}

// EntryWorthlessEffectiveDate - Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
type EntryWorthlessEffectiveDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryWorthlessEffectiveDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryWorthlessEffectiveDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryWorthlessEffectiveDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// EntryWorthlessPaymentDate - The anticipated payment date at the depository
type EntryWorthlessPaymentDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *EntryWorthlessPaymentDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *EntryWorthlessPaymentDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *EntryWorthlessPaymentDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// Worthless - Object containing metadata for worthless events
type Worthless struct {
	// Common fields for corporate actions
	CorporateActionGeneralInformation *EntryWorthlessCorporateActionGeneralInformation `json:"corporate_action_general_information,omitempty"`
	// Effective date as declared by the primary exchange that generally coincides with cessation of trading in the old security and commencement of trading in the new security
	EffectiveDate *EntryWorthlessEffectiveDate `json:"effective_date,omitempty"`
	// The anticipated payment date at the depository
	PaymentDate *EntryWorthlessPaymentDate `json:"payment_date,omitempty"`
}

func (o *Worthless) GetCorporateActionGeneralInformation() *EntryWorthlessCorporateActionGeneralInformation {
	if o == nil {
		return nil
	}
	return o.CorporateActionGeneralInformation
}

func (o *Worthless) GetEffectiveDate() *EntryWorthlessEffectiveDate {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *Worthless) GetPaymentDate() *EntryWorthlessPaymentDate {
	if o == nil {
		return nil
	}
	return o.PaymentDate
}

// Entry is a single sided ledger booking that serves as the core ledger component; it is sparsely populated based on the entry type and the goal of the entry
type Entry struct {
	// Object containing metadata for pending outgoing acats
	AcatsPendingOut *AcatsPendingOut `json:"acats_pending_out,omitempty"`
	// A globally unique identifier referencing a single account; this is the main identifier for an account used for machine-to-machine interactions
	AccountID *string `json:"account_id,omitempty"`
	// Indicates the memo location impacted by an entry
	AccountMemo *AccountMemo `json:"account_memo,omitempty"`
	// Object containing metadata for account transfers
	AccountTransfer *AccountTransfer `json:"account_transfer,omitempty"`
	// Indicates that the entry references accrued interest that has been earned but not yet paid between the last interest payment and the date of the trade
	AccruedInterest *EntryAccruedInterest `json:"accrued_interest,omitempty"`
	// Object containing metadata for acquisition events
	Acquisition *Acquisition `json:"acquisition,omitempty"`
	// The calendar date an activity took place For Trade entries, the activity date reflects the trade date of the market in which the trade was executed For Cash entries, this reflects the banking day the cash will be moved
	ActivityDate *ActivityDate `json:"activity_date,omitempty"`
	// Apex-generated unique activity identifier
	ActivityID *string `json:"activity_id,omitempty"`
	// The time when the entry occurred as reported to Apex
	ActivityTime *time.Time `json:"activity_time,omitempty"`
	// An Apex-provided, global identifier created on a per asset bases which provides connectivity across all areas Required, except for currency movements which should instead have a currency_asset_id.
	AssetID *string `json:"asset_id,omitempty"`
	// Object containing metadata for capital gains
	CapitalGains *CapitalGains `json:"capital_gains,omitempty"`
	// Object containing for cash dividends
	CashDividend *CashDividend `json:"cash_dividend,omitempty"`
	// Indicates that the entry references commission charged by brokers or financial intermediaries for executing financial transactions on behalf of clients
	Commission *EntryCommission `json:"commission,omitempty"`
	// Object containing metadata for conversions (Conversion of securities into another form of securities)
	Conversion *Conversion `json:"conversion,omitempty"`
	// Object containing metadata for memo locations that have been adjusted due to a corporate action
	CorporateActionMemoAdjustment *CorporateActionMemoAdjustment `json:"corporate_action_memo_adjustment,omitempty"`
	// Object containing more information about the credit being paid
	Credit *Credit `json:"credit,omitempty"`
	// The asset_id of the currency that all monetary values relate to Required for currency movements
	CurrencyAssetID *string `json:"currency_asset_id,omitempty"`
	// Object containing metadata for delivery events
	Delivery *Delivery `json:"delivery,omitempty"`
	// Object containing more information about a deposit
	Deposit *Deposit `json:"deposit,omitempty"`
	// A plain text description of the entry; will not be available to search on or build other features off of
	Description *string `json:"description,omitempty"`
	// Object containing metadata for reserving cash until the DRIP trades are executed
	Drip *Drip `json:"drip,omitempty"`
	// The unique id of the entry
	EntryID *string `json:"entry_id,omitempty"`
	// Object containing metadata for exchanges
	Exchange *Exchange `json:"exchange,omitempty"`
	// Object containing more information about the fee being charged
	Fee *EntryFee `json:"fee,omitempty"`
	// Object containing metadata for a Flip
	Flip *Flip `json:"flip,omitempty"`
	// Object containing metadata for fully paid stock lending entries
	Fpsl *Fpsl `json:"fpsl,omitempty"`
	// The monetary value of an activity, exclusive of any fees (First money)
	GrossAmount *GrossAmount `json:"gross_amount,omitempty"`
	// Object containing metadata for Margin interest
	Interest *Interest `json:"interest,omitempty"`
	// Object containing metadata for interest payments
	InterestPayment *InterestPayment `json:"interest_payment,omitempty"`
	// Object containing metadata for liquidations
	Liquidation *Liquidation `json:"liquidation,omitempty"`
	// Object containing metadata for maturity events
	Maturity *Maturity `json:"maturity,omitempty"`
	// Object containing metadata for merger events
	Merger *Merger `json:"merger,omitempty"`
	// accounts/{account_id}/entries/{entry_id}
	Name *string `json:"name,omitempty"`
	// Object containing metadata for name changes
	NameChange *NameChange `json:"name_change,omitempty"`
	// The original entry id; stable across reversals and corrections; use for maintaining lineage of entries through multiple corrections/reversals
	OriginalID *string `json:"original_id,omitempty"`
	// The original entry process date; stable across reversals and corrections; use for maintaining lineage of entries through multiple corrections/reversals
	OriginalProcessDate *OriginalProcessDate `json:"original_process_date,omitempty"`
	// Object containing metadata for PaymentInKind
	PaymentInKind *PaymentInKind `json:"payment_in_kind,omitempty"`
	// The monetary value paid for a given security in a trade Required, except for currency movements
	Price *EntryPrice `json:"price,omitempty"`
	// The date that the entry was booked on
	ProcessDate *EntryProcessDate `json:"process_date,omitempty"`
	// The quantity of shares bought, sold, or moved. For entries/ activities involving Fixed Income assets, quantity is expressed as par value Required for trades and memos, optional for movements.
	Quantity *EntryQuantity `json:"quantity,omitempty"`
	// Object containing metadata for receive events
	Receive *Receive `json:"receive,omitempty"`
	// Object containing more information about a redemption
	RedemptionFull *RedemptionFull `json:"redemption_full,omitempty"`
	// Object containing metadata for partial redemption
	RedemptionPartial *RedemptionPartial `json:"redemption_partial,omitempty"`
	// Object containing metadata for a reverse_stock_split
	ReverseStockSplit *ReverseStockSplit `json:"reverse_stock_split,omitempty"`
	// The entry_id of the original entry; only populated on entries with a status of "Reversal"
	ReversedEntryID *string `json:"reversed_entry_id,omitempty"`
	// Object containing more information about a rights distribution
	RightsDistribution *RightsDistribution `json:"rights_distribution,omitempty"`
	// Object containing metadata for rights subscriptions
	RightsSubscription *RightsSubscription `json:"rights_subscription,omitempty"`
	// Object containing metadata for rounding
	RoundingAdjustment *RoundingAdjustment `json:"rounding_adjustment,omitempty"`
	// Object containing more information about a sale_of_rights
	SaleOfRights *SaleOfRights `json:"sale_of_rights,omitempty"`
	// The date a given entry/ activity will officially settle
	SettleDate *SettleDate `json:"settle_date,omitempty"`
	// Denotes whether the trade is a buy or sell
	Side *EntrySide `json:"side,omitempty"`
	// Additional information about a trade Should be populated if possible for trades; the side modifier for the trade
	SideModifier *SideModifier `json:"side_modifier,omitempty"`
	// Object containing metadata for spinoffs
	SpinOff *SpinOff `json:"spin_off,omitempty"`
	// Set to be NEW for BookEntries, other statuses will be assigned via ModifyActivities; the state of the entry
	State *EntryState `json:"state,omitempty"`
	// Object containing metadata for stock dividends
	StockDividend *StockDividend `json:"stock_dividend,omitempty"`
	// Object containing metadata for stock splits
	StockSplit *StockSplit `json:"stock_split,omitempty"`
	// String representation of the metadata object containing more information about an entry/activity
	SubtypeCategory *string `json:"subtype_category,omitempty"`
	// Object containing metadata for sweeps
	Sweep *Sweep `json:"sweep,omitempty"`
	// Object containing metadata for tender offers
	TenderOffer *TenderOffer `json:"tender_offer,omitempty"`
	// Object containing metadata for trades
	Trade *Trade `json:"trade,omitempty"`
	// Object containing metadata for transfers
	Transfer *Transfer `json:"transfer,omitempty"`
	// The Type of the entry; determines the set of mandatory fields as well as informing downstream processes how to handle this record
	Type *EntryType `json:"type,omitempty"`
	// Object containing metadata for unit splits
	UnitSplit *UnitSplit `json:"unit_split,omitempty"`
	// Object containing metadata for warrant exercises
	WarrantExercise *WarrantExercise `json:"warrant_exercise,omitempty"`
	// Object containing metadata for withdrawals
	Withdrawal *Withdrawal `json:"withdrawal,omitempty"`
	// Object containing metadata about withdrawals that have been requested, but have not posted
	WithdrawalPendingReview *WithdrawalPendingReview `json:"withdrawal_pending_review,omitempty"`
	// Object containing metadata for tax withholdings
	Withholding *EntryWithholding `json:"withholding,omitempty"`
	// Object containing metadata for worthless events
	Worthless *Worthless `json:"worthless,omitempty"`
}

func (e Entry) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Entry) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Entry) GetAcatsPendingOut() *AcatsPendingOut {
	if o == nil {
		return nil
	}
	return o.AcatsPendingOut
}

func (o *Entry) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *Entry) GetAccountMemo() *AccountMemo {
	if o == nil {
		return nil
	}
	return o.AccountMemo
}

func (o *Entry) GetAccountTransfer() *AccountTransfer {
	if o == nil {
		return nil
	}
	return o.AccountTransfer
}

func (o *Entry) GetAccruedInterest() *EntryAccruedInterest {
	if o == nil {
		return nil
	}
	return o.AccruedInterest
}

func (o *Entry) GetAcquisition() *Acquisition {
	if o == nil {
		return nil
	}
	return o.Acquisition
}

func (o *Entry) GetActivityDate() *ActivityDate {
	if o == nil {
		return nil
	}
	return o.ActivityDate
}

func (o *Entry) GetActivityID() *string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *Entry) GetActivityTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ActivityTime
}

func (o *Entry) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *Entry) GetCapitalGains() *CapitalGains {
	if o == nil {
		return nil
	}
	return o.CapitalGains
}

func (o *Entry) GetCashDividend() *CashDividend {
	if o == nil {
		return nil
	}
	return o.CashDividend
}

func (o *Entry) GetCommission() *EntryCommission {
	if o == nil {
		return nil
	}
	return o.Commission
}

func (o *Entry) GetConversion() *Conversion {
	if o == nil {
		return nil
	}
	return o.Conversion
}

func (o *Entry) GetCorporateActionMemoAdjustment() *CorporateActionMemoAdjustment {
	if o == nil {
		return nil
	}
	return o.CorporateActionMemoAdjustment
}

func (o *Entry) GetCredit() *Credit {
	if o == nil {
		return nil
	}
	return o.Credit
}

func (o *Entry) GetCurrencyAssetID() *string {
	if o == nil {
		return nil
	}
	return o.CurrencyAssetID
}

func (o *Entry) GetDelivery() *Delivery {
	if o == nil {
		return nil
	}
	return o.Delivery
}

func (o *Entry) GetDeposit() *Deposit {
	if o == nil {
		return nil
	}
	return o.Deposit
}

func (o *Entry) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Entry) GetDrip() *Drip {
	if o == nil {
		return nil
	}
	return o.Drip
}

func (o *Entry) GetEntryID() *string {
	if o == nil {
		return nil
	}
	return o.EntryID
}

func (o *Entry) GetExchange() *Exchange {
	if o == nil {
		return nil
	}
	return o.Exchange
}

func (o *Entry) GetFee() *EntryFee {
	if o == nil {
		return nil
	}
	return o.Fee
}

func (o *Entry) GetFlip() *Flip {
	if o == nil {
		return nil
	}
	return o.Flip
}

func (o *Entry) GetFpsl() *Fpsl {
	if o == nil {
		return nil
	}
	return o.Fpsl
}

func (o *Entry) GetGrossAmount() *GrossAmount {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *Entry) GetInterest() *Interest {
	if o == nil {
		return nil
	}
	return o.Interest
}

func (o *Entry) GetInterestPayment() *InterestPayment {
	if o == nil {
		return nil
	}
	return o.InterestPayment
}

func (o *Entry) GetLiquidation() *Liquidation {
	if o == nil {
		return nil
	}
	return o.Liquidation
}

func (o *Entry) GetMaturity() *Maturity {
	if o == nil {
		return nil
	}
	return o.Maturity
}

func (o *Entry) GetMerger() *Merger {
	if o == nil {
		return nil
	}
	return o.Merger
}

func (o *Entry) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Entry) GetNameChange() *NameChange {
	if o == nil {
		return nil
	}
	return o.NameChange
}

func (o *Entry) GetOriginalID() *string {
	if o == nil {
		return nil
	}
	return o.OriginalID
}

func (o *Entry) GetOriginalProcessDate() *OriginalProcessDate {
	if o == nil {
		return nil
	}
	return o.OriginalProcessDate
}

func (o *Entry) GetPaymentInKind() *PaymentInKind {
	if o == nil {
		return nil
	}
	return o.PaymentInKind
}

func (o *Entry) GetPrice() *EntryPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *Entry) GetProcessDate() *EntryProcessDate {
	if o == nil {
		return nil
	}
	return o.ProcessDate
}

func (o *Entry) GetQuantity() *EntryQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *Entry) GetReceive() *Receive {
	if o == nil {
		return nil
	}
	return o.Receive
}

func (o *Entry) GetRedemptionFull() *RedemptionFull {
	if o == nil {
		return nil
	}
	return o.RedemptionFull
}

func (o *Entry) GetRedemptionPartial() *RedemptionPartial {
	if o == nil {
		return nil
	}
	return o.RedemptionPartial
}

func (o *Entry) GetReverseStockSplit() *ReverseStockSplit {
	if o == nil {
		return nil
	}
	return o.ReverseStockSplit
}

func (o *Entry) GetReversedEntryID() *string {
	if o == nil {
		return nil
	}
	return o.ReversedEntryID
}

func (o *Entry) GetRightsDistribution() *RightsDistribution {
	if o == nil {
		return nil
	}
	return o.RightsDistribution
}

func (o *Entry) GetRightsSubscription() *RightsSubscription {
	if o == nil {
		return nil
	}
	return o.RightsSubscription
}

func (o *Entry) GetRoundingAdjustment() *RoundingAdjustment {
	if o == nil {
		return nil
	}
	return o.RoundingAdjustment
}

func (o *Entry) GetSaleOfRights() *SaleOfRights {
	if o == nil {
		return nil
	}
	return o.SaleOfRights
}

func (o *Entry) GetSettleDate() *SettleDate {
	if o == nil {
		return nil
	}
	return o.SettleDate
}

func (o *Entry) GetSide() *EntrySide {
	if o == nil {
		return nil
	}
	return o.Side
}

func (o *Entry) GetSideModifier() *SideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *Entry) GetSpinOff() *SpinOff {
	if o == nil {
		return nil
	}
	return o.SpinOff
}

func (o *Entry) GetState() *EntryState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *Entry) GetStockDividend() *StockDividend {
	if o == nil {
		return nil
	}
	return o.StockDividend
}

func (o *Entry) GetStockSplit() *StockSplit {
	if o == nil {
		return nil
	}
	return o.StockSplit
}

func (o *Entry) GetSubtypeCategory() *string {
	if o == nil {
		return nil
	}
	return o.SubtypeCategory
}

func (o *Entry) GetSweep() *Sweep {
	if o == nil {
		return nil
	}
	return o.Sweep
}

func (o *Entry) GetTenderOffer() *TenderOffer {
	if o == nil {
		return nil
	}
	return o.TenderOffer
}

func (o *Entry) GetTrade() *Trade {
	if o == nil {
		return nil
	}
	return o.Trade
}

func (o *Entry) GetTransfer() *Transfer {
	if o == nil {
		return nil
	}
	return o.Transfer
}

func (o *Entry) GetType() *EntryType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Entry) GetUnitSplit() *UnitSplit {
	if o == nil {
		return nil
	}
	return o.UnitSplit
}

func (o *Entry) GetWarrantExercise() *WarrantExercise {
	if o == nil {
		return nil
	}
	return o.WarrantExercise
}

func (o *Entry) GetWithdrawal() *Withdrawal {
	if o == nil {
		return nil
	}
	return o.Withdrawal
}

func (o *Entry) GetWithdrawalPendingReview() *WithdrawalPendingReview {
	if o == nil {
		return nil
	}
	return o.WithdrawalPendingReview
}

func (o *Entry) GetWithholding() *EntryWithholding {
	if o == nil {
		return nil
	}
	return o.Withholding
}

func (o *Entry) GetWorthless() *Worthless {
	if o == nil {
		return nil
	}
	return o.Worthless
}
