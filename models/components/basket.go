// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// BasketState - The processing status of the basket
type BasketState string

const (
	BasketStateStateUnspecified BasketState = "STATE_UNSPECIFIED"
	BasketStateNew              BasketState = "NEW"
	BasketStateSubmitted        BasketState = "SUBMITTED"
	BasketStateExecuting        BasketState = "EXECUTING"
	BasketStateAllocating       BasketState = "ALLOCATING"
	BasketStateDone             BasketState = "DONE"
	BasketStateRejected         BasketState = "REJECTED"
)

func (e BasketState) ToPointer() *BasketState {
	return &e
}

// Basket - The message describing a basket
type Basket struct {
	// System generated unique id for the basket
	BasketID *string `json:"basket_id,omitempty"`
	// Number of orders in the basket
	BasketOrderCount *string `json:"basket_order_count,omitempty"`
	// The processing status of the basket
	BasketState *BasketState `json:"basket_state,omitempty"`
	// User-supplied unique basket ID. Cannot be more than 40 characters long.
	ClientBasketID *string `json:"client_basket_id,omitempty"`
	// Time the basket was completed
	CompleteTime *time.Time `json:"complete_time,omitempty"`
	// Number of compressed orders in the basket that will go to market. This number is calculated after basket submission.
	CompressedOrderCount *string `json:"compressed_order_count,omitempty"`
	// The unique id for the correspondent for the basket
	CorrespondentID *string `json:"correspondent_id,omitempty"`
	// Time of the basket creation
	CreateTime *time.Time `json:"create_time,omitempty"`
	// Number of distinct accounts in the basket.
	DistinctAccountCount *string `json:"distinct_account_count,omitempty"`
	// Time of the last basket update
	LastUpdateTime *time.Time `json:"last_update_time,omitempty"`
	// System generated name of the basket
	Name *string `json:"name,omitempty"`
	// Number of accounts that did not pass risk checks and their orders were rejected.
	RejectedAccountCount *string `json:"rejected_account_count,omitempty"`
	// Time the basket was submitted
	SubmitTime *time.Time `json:"submit_time,omitempty"`
}

func (b Basket) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *Basket) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Basket) GetBasketID() *string {
	if o == nil {
		return nil
	}
	return o.BasketID
}

func (o *Basket) GetBasketOrderCount() *string {
	if o == nil {
		return nil
	}
	return o.BasketOrderCount
}

func (o *Basket) GetBasketState() *BasketState {
	if o == nil {
		return nil
	}
	return o.BasketState
}

func (o *Basket) GetClientBasketID() *string {
	if o == nil {
		return nil
	}
	return o.ClientBasketID
}

func (o *Basket) GetCompleteTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompleteTime
}

func (o *Basket) GetCompressedOrderCount() *string {
	if o == nil {
		return nil
	}
	return o.CompressedOrderCount
}

func (o *Basket) GetCorrespondentID() *string {
	if o == nil {
		return nil
	}
	return o.CorrespondentID
}

func (o *Basket) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *Basket) GetDistinctAccountCount() *string {
	if o == nil {
		return nil
	}
	return o.DistinctAccountCount
}

func (o *Basket) GetLastUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUpdateTime
}

func (o *Basket) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Basket) GetRejectedAccountCount() *string {
	if o == nil {
		return nil
	}
	return o.RejectedAccountCount
}

func (o *Basket) GetSubmitTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.SubmitTime
}
