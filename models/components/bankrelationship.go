// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// BankRelationshipType - The bank account type.
type BankRelationshipType string

const (
	BankRelationshipTypeTypeUnspecified BankRelationshipType = "TYPE_UNSPECIFIED"
	BankRelationshipTypeChecking        BankRelationshipType = "CHECKING"
	BankRelationshipTypeSavings         BankRelationshipType = "SAVINGS"
)

func (e BankRelationshipType) ToPointer() *BankRelationshipType {
	return &e
}
func (e *BankRelationshipType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "CHECKING":
		fallthrough
	case "SAVINGS":
		*e = BankRelationshipType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BankRelationshipType: %v", v)
	}
}

// BankAccount - The bank account for the relationship. This field must be set on create requests **except** when using the `PLAID_TOKEN` verification method. In which case, the bank account will be retrieved by the service based on the `plaid_processor_token`.
type BankAccount struct {
	// The bank account number. This value will be masked in responses.
	AccountNumber *string `json:"account_number,omitempty"`
	// The name of the bank account owner.
	Owner *string `json:"owner,omitempty"`
	// The bank routing number (either ABA or BIC).
	RoutingNumber *string `json:"routing_number,omitempty"`
	// The bank account type.
	Type *BankRelationshipType `json:"type,omitempty"`
}

func (o *BankAccount) GetAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AccountNumber
}

func (o *BankAccount) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *BankAccount) GetRoutingNumber() *string {
	if o == nil {
		return nil
	}
	return o.RoutingNumber
}

func (o *BankAccount) GetType() *BankRelationshipType {
	if o == nil {
		return nil
	}
	return o.Type
}

// BankRelationshipStateState - The high level state of the bank relationship.
type BankRelationshipStateState string

const (
	BankRelationshipStateStateStateUnspecified BankRelationshipStateState = "STATE_UNSPECIFIED"
	BankRelationshipStateStatePending          BankRelationshipStateState = "PENDING"
	BankRelationshipStateStateApproved         BankRelationshipStateState = "APPROVED"
	BankRelationshipStateStateCanceled         BankRelationshipStateState = "CANCELED"
	BankRelationshipStateStateRejected         BankRelationshipStateState = "REJECTED"
)

func (e BankRelationshipStateState) ToPointer() *BankRelationshipStateState {
	return &e
}
func (e *BankRelationshipStateState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PENDING":
		fallthrough
	case "APPROVED":
		fallthrough
	case "CANCELED":
		fallthrough
	case "REJECTED":
		*e = BankRelationshipStateState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BankRelationshipStateState: %v", v)
	}
}

// BankRelationshipState - The state of the bank relationship.
type BankRelationshipState struct {
	// The user or service that triggered the state update.
	Actor *string `json:"actor,omitempty"`
	// Additional metadata relating to the bank relationship state. Included data will depend on the state. Examples:
	//  - rejection reasons are included when the state is `REJECTED`
	//  - comment and reason are included when the state is `CANCELED`
	Metadata map[string]any `json:"metadata,omitempty"`
	// The high level state of the bank relationship.
	State *BankRelationshipStateState `json:"state,omitempty"`
	// The time of the state update.
	UpdateTime *time.Time `json:"update_time,omitempty"`
}

func (b BankRelationshipState) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BankRelationshipState) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BankRelationshipState) GetActor() *string {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *BankRelationshipState) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *BankRelationshipState) GetState() *BankRelationshipStateState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *BankRelationshipState) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

// BankRelationshipVerificationMethod - The verification method of the bank relationship.
type BankRelationshipVerificationMethod string

const (
	BankRelationshipVerificationMethodVerificationMethodUnspecified BankRelationshipVerificationMethod = "VERIFICATION_METHOD_UNSPECIFIED"
	BankRelationshipVerificationMethodMicroDeposit                  BankRelationshipVerificationMethod = "MICRO_DEPOSIT"
	BankRelationshipVerificationMethodYodlee                        BankRelationshipVerificationMethod = "YODLEE"
	BankRelationshipVerificationMethodQuovo                         BankRelationshipVerificationMethod = "QUOVO"
	BankRelationshipVerificationMethodGiact                         BankRelationshipVerificationMethod = "GIACT"
	BankRelationshipVerificationMethodSynapse                       BankRelationshipVerificationMethod = "SYNAPSE"
	BankRelationshipVerificationMethodSophtron                      BankRelationshipVerificationMethod = "SOPHTRON"
	BankRelationshipVerificationMethodUseExisting                   BankRelationshipVerificationMethod = "USE_EXISTING"
	BankRelationshipVerificationMethodInternalBank                  BankRelationshipVerificationMethod = "INTERNAL_BANK"
	BankRelationshipVerificationMethodMx                            BankRelationshipVerificationMethod = "MX"
	BankRelationshipVerificationMethodFiserv                        BankRelationshipVerificationMethod = "FISERV"
	BankRelationshipVerificationMethodPlaidToken                    BankRelationshipVerificationMethod = "PLAID_TOKEN"
)

func (e BankRelationshipVerificationMethod) ToPointer() *BankRelationshipVerificationMethod {
	return &e
}
func (e *BankRelationshipVerificationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VERIFICATION_METHOD_UNSPECIFIED":
		fallthrough
	case "MICRO_DEPOSIT":
		fallthrough
	case "YODLEE":
		fallthrough
	case "QUOVO":
		fallthrough
	case "GIACT":
		fallthrough
	case "SYNAPSE":
		fallthrough
	case "SOPHTRON":
		fallthrough
	case "USE_EXISTING":
		fallthrough
	case "INTERNAL_BANK":
		fallthrough
	case "MX":
		fallthrough
	case "FISERV":
		fallthrough
	case "PLAID_TOKEN":
		*e = BankRelationshipVerificationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BankRelationshipVerificationMethod: %v", v)
	}
}

// BankRelationship - A relationship between a bank account and an Apex account.
type BankRelationship struct {
	// The bank account for the relationship. This field must be set on create requests **except** when using the `PLAID_TOKEN` verification method. In which case, the bank account will be retrieved by the service based on the `plaid_processor_token`.
	BankAccount *BankAccount `json:"bank_account,omitempty"`
	// Creation time of the bank relationship.
	CreateTime *time.Time `json:"create_time,omitempty"`
	// The resource name of the bank relationship.
	Name *string `json:"name,omitempty"`
	// The nickname of the bank relationship.
	Nickname *string `json:"nickname,omitempty"`
	// A processor token from Plaid (vendor). Required if using `PLAID_TOKEN` verification method.
	PlaidProcessorToken *string `json:"plaid_processor_token,omitempty"`
	// The state of the bank relationship.
	State *BankRelationshipState `json:"state,omitempty"`
	// The verification method of the bank relationship.
	VerificationMethod *BankRelationshipVerificationMethod `json:"verification_method,omitempty"`
}

func (b BankRelationship) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BankRelationship) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BankRelationship) GetBankAccount() *BankAccount {
	if o == nil {
		return nil
	}
	return o.BankAccount
}

func (o *BankRelationship) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *BankRelationship) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *BankRelationship) GetNickname() *string {
	if o == nil {
		return nil
	}
	return o.Nickname
}

func (o *BankRelationship) GetPlaidProcessorToken() *string {
	if o == nil {
		return nil
	}
	return o.PlaidProcessorToken
}

func (o *BankRelationship) GetState() *BankRelationshipState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *BankRelationship) GetVerificationMethod() *BankRelationshipVerificationMethod {
	if o == nil {
		return nil
	}
	return o.VerificationMethod
}
