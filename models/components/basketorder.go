// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"ascend-sdk/internal/utils"
	"encoding/json"
	"fmt"
	"time"
)

// BasketOrderAssetType - The type of the asset in this order
type BasketOrderAssetType string

const (
	BasketOrderAssetTypeAssetTypeUnspecified BasketOrderAssetType = "ASSET_TYPE_UNSPECIFIED"
	BasketOrderAssetTypeEquity               BasketOrderAssetType = "EQUITY"
)

func (e BasketOrderAssetType) ToPointer() *BasketOrderAssetType {
	return &e
}
func (e *BasketOrderAssetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASSET_TYPE_UNSPECIFIED":
		fallthrough
	case "EQUITY":
		*e = BasketOrderAssetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasketOrderAssetType: %v", v)
	}
}

// BasketOrderCumulativeNotionalValue - The product of order quantity & price, summed across all fills, reported in the currency specified in the order. (This will be rounded to 2 decimal places for USD currencies). Will be absent if an order has no fill information.
type BasketOrderCumulativeNotionalValue struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *BasketOrderCumulativeNotionalValue) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// BasketOrderFilledQuantity - The summed quantity value across all fills in this order, up to a maximum of 5 decimal places. Will be absent if an order has no fill information.
type BasketOrderFilledQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *BasketOrderFilledQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// BasketOrderIdentifierType - The identifier type of the asset being ordered. For Equities: only SYMBOL is supported
type BasketOrderIdentifierType string

const (
	BasketOrderIdentifierTypeSymbol BasketOrderIdentifierType = "SYMBOL"
	BasketOrderIdentifierTypeCusip  BasketOrderIdentifierType = "CUSIP"
	BasketOrderIdentifierTypeIsin   BasketOrderIdentifierType = "ISIN"
)

func (e BasketOrderIdentifierType) ToPointer() *BasketOrderIdentifierType {
	return &e
}
func (e *BasketOrderIdentifierType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SYMBOL":
		fallthrough
	case "CUSIP":
		fallthrough
	case "ISIN":
		*e = BasketOrderIdentifierType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasketOrderIdentifierType: %v", v)
	}
}

// BasketOrderOrderRejectedReason - When an order has the REJECTED status, this will be populated with a system code describing the rejection.
type BasketOrderOrderRejectedReason string

const (
	BasketOrderOrderRejectedReasonOrderRejectReasonUnspecified                      BasketOrderOrderRejectedReason = "ORDER_REJECT_REASON_UNSPECIFIED"
	BasketOrderOrderRejectedReasonBrokerOption                                      BasketOrderOrderRejectedReason = "BROKER_OPTION"
	BasketOrderOrderRejectedReasonUnknownSecurity                                   BasketOrderOrderRejectedReason = "UNKNOWN_SECURITY"
	BasketOrderOrderRejectedReasonExchangeClosed                                    BasketOrderOrderRejectedReason = "EXCHANGE_CLOSED"
	BasketOrderOrderRejectedReasonTooLateToEnter                                    BasketOrderOrderRejectedReason = "TOO_LATE_TO_ENTER"
	BasketOrderOrderRejectedReasonUnknownOrder                                      BasketOrderOrderRejectedReason = "UNKNOWN_ORDER"
	BasketOrderOrderRejectedReasonDuplicateOrder                                    BasketOrderOrderRejectedReason = "DUPLICATE_ORDER"
	BasketOrderOrderRejectedReasonStaleOrder                                        BasketOrderOrderRejectedReason = "STALE_ORDER"
	BasketOrderOrderRejectedReasonBelowNotionalMinimum                              BasketOrderOrderRejectedReason = "BELOW_NOTIONAL_MINIMUM"
	BasketOrderOrderRejectedReasonAccountNotEntitled                                BasketOrderOrderRejectedReason = "ACCOUNT_NOT_ENTITLED"
	BasketOrderOrderRejectedReasonSystemError                                       BasketOrderOrderRejectedReason = "SYSTEM_ERROR"
	BasketOrderOrderRejectedReasonBlockingCorporateAction                           BasketOrderOrderRejectedReason = "BLOCKING_CORPORATE_ACTION"
	BasketOrderOrderRejectedReasonUnavailablePriceQuote                             BasketOrderOrderRejectedReason = "UNAVAILABLE_PRICE_QUOTE"
	BasketOrderOrderRejectedReasonExecutionMisconfiguredClient                      BasketOrderOrderRejectedReason = "EXECUTION_MISCONFIGURED_CLIENT"
	BasketOrderOrderRejectedReasonFractionalQuantityNotAllowedForSecurity           BasketOrderOrderRejectedReason = "FRACTIONAL_QUANTITY_NOT_ALLOWED_FOR_SECURITY"
	BasketOrderOrderRejectedReasonOnlyFractionalSellOrWholeOrdersAllowedForSecurity BasketOrderOrderRejectedReason = "ONLY_FRACTIONAL_SELL_OR_WHOLE_ORDERS_ALLOWED_FOR_SECURITY"
	BasketOrderOrderRejectedReasonSymbolNotTradeable                                BasketOrderOrderRejectedReason = "SYMBOL_NOT_TRADEABLE"
	BasketOrderOrderRejectedReasonAboveNotionalMaximum                              BasketOrderOrderRejectedReason = "ABOVE_NOTIONAL_MAXIMUM"
	BasketOrderOrderRejectedReasonAboveShareMaximum                                 BasketOrderOrderRejectedReason = "ABOVE_SHARE_MAXIMUM"
	BasketOrderOrderRejectedReasonMaxSellQuantityRequired                           BasketOrderOrderRejectedReason = "MAX_SELL_QUANTITY_REQUIRED"
	BasketOrderOrderRejectedReasonMaxSellQuantityProhibited                         BasketOrderOrderRejectedReason = "MAX_SELL_QUANTITY_PROHIBITED"
	BasketOrderOrderRejectedReasonStockTradesDisabled                               BasketOrderOrderRejectedReason = "STOCK_TRADES_DISABLED"
	BasketOrderOrderRejectedReasonAssetNotSetUpToTrade                              BasketOrderOrderRejectedReason = "ASSET_NOT_SET_UP_TO_TRADE"
)

func (e BasketOrderOrderRejectedReason) ToPointer() *BasketOrderOrderRejectedReason {
	return &e
}
func (e *BasketOrderOrderRejectedReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ORDER_REJECT_REASON_UNSPECIFIED":
		fallthrough
	case "BROKER_OPTION":
		fallthrough
	case "UNKNOWN_SECURITY":
		fallthrough
	case "EXCHANGE_CLOSED":
		fallthrough
	case "TOO_LATE_TO_ENTER":
		fallthrough
	case "UNKNOWN_ORDER":
		fallthrough
	case "DUPLICATE_ORDER":
		fallthrough
	case "STALE_ORDER":
		fallthrough
	case "BELOW_NOTIONAL_MINIMUM":
		fallthrough
	case "ACCOUNT_NOT_ENTITLED":
		fallthrough
	case "SYSTEM_ERROR":
		fallthrough
	case "BLOCKING_CORPORATE_ACTION":
		fallthrough
	case "UNAVAILABLE_PRICE_QUOTE":
		fallthrough
	case "EXECUTION_MISCONFIGURED_CLIENT":
		fallthrough
	case "FRACTIONAL_QUANTITY_NOT_ALLOWED_FOR_SECURITY":
		fallthrough
	case "ONLY_FRACTIONAL_SELL_OR_WHOLE_ORDERS_ALLOWED_FOR_SECURITY":
		fallthrough
	case "SYMBOL_NOT_TRADEABLE":
		fallthrough
	case "ABOVE_NOTIONAL_MAXIMUM":
		fallthrough
	case "ABOVE_SHARE_MAXIMUM":
		fallthrough
	case "MAX_SELL_QUANTITY_REQUIRED":
		fallthrough
	case "MAX_SELL_QUANTITY_PROHIBITED":
		fallthrough
	case "STOCK_TRADES_DISABLED":
		fallthrough
	case "ASSET_NOT_SET_UP_TO_TRADE":
		*e = BasketOrderOrderRejectedReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasketOrderOrderRejectedReason: %v", v)
	}
}

// BasketOrderOrderStatus - The processing status of the order
type BasketOrderOrderStatus string

const (
	BasketOrderOrderStatusOrderStatusUnspecified BasketOrderOrderStatus = "ORDER_STATUS_UNSPECIFIED"
	BasketOrderOrderStatusPendingNew             BasketOrderOrderStatus = "PENDING_NEW"
	BasketOrderOrderStatusNew                    BasketOrderOrderStatus = "NEW"
	BasketOrderOrderStatusPartiallyFilled        BasketOrderOrderStatus = "PARTIALLY_FILLED"
	BasketOrderOrderStatusFilled                 BasketOrderOrderStatus = "FILLED"
	BasketOrderOrderStatusRejected               BasketOrderOrderStatus = "REJECTED"
)

func (e BasketOrderOrderStatus) ToPointer() *BasketOrderOrderStatus {
	return &e
}
func (e *BasketOrderOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ORDER_STATUS_UNSPECIFIED":
		fallthrough
	case "PENDING_NEW":
		fallthrough
	case "NEW":
		fallthrough
	case "PARTIALLY_FILLED":
		fallthrough
	case "FILLED":
		fallthrough
	case "REJECTED":
		*e = BasketOrderOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasketOrderOrderStatus: %v", v)
	}
}

// BasketOrderOrderType - The execution type of this order.
type BasketOrderOrderType string

const (
	BasketOrderOrderTypeOrderTypeUnspecified BasketOrderOrderType = "ORDER_TYPE_UNSPECIFIED"
	BasketOrderOrderTypeMarket               BasketOrderOrderType = "MARKET"
)

func (e BasketOrderOrderType) ToPointer() *BasketOrderOrderType {
	return &e
}
func (e *BasketOrderOrderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ORDER_TYPE_UNSPECIFIED":
		fallthrough
	case "MARKET":
		*e = BasketOrderOrderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasketOrderOrderType: %v", v)
	}
}

// BasketOrderQuantity - Numeric quantity of the order. For Equities: Represents the number of shares, must be greater than zero and may not exceed 5 decimal places.
type BasketOrderQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *BasketOrderQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// BasketOrderSide - The side of this order.
type BasketOrderSide string

const (
	BasketOrderSideSideUnspecified BasketOrderSide = "SIDE_UNSPECIFIED"
	BasketOrderSideBuy             BasketOrderSide = "BUY"
	BasketOrderSideSell            BasketOrderSide = "SELL"
)

func (e BasketOrderSide) ToPointer() *BasketOrderSide {
	return &e
}
func (e *BasketOrderSide) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SIDE_UNSPECIFIED":
		fallthrough
	case "BUY":
		fallthrough
	case "SELL":
		*e = BasketOrderSide(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasketOrderSide: %v", v)
	}
}

// BasketOrderTimeInForce - Must be the value "DAY". Regulatory requirements dictate that the system capture the intended time_in_force, which is why this a mandatory field.
type BasketOrderTimeInForce string

const (
	BasketOrderTimeInForceTimeInForceUnspecified BasketOrderTimeInForce = "TIME_IN_FORCE_UNSPECIFIED"
	BasketOrderTimeInForceDay                    BasketOrderTimeInForce = "DAY"
)

func (e BasketOrderTimeInForce) ToPointer() *BasketOrderTimeInForce {
	return &e
}
func (e *BasketOrderTimeInForce) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TIME_IN_FORCE_UNSPECIFIED":
		fallthrough
	case "DAY":
		*e = BasketOrderTimeInForce(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BasketOrderTimeInForce: %v", v)
	}
}

// BasketOrder - The message describing an order that has been added to a basket
type BasketOrder struct {
	// The identifier of the account transacting this order
	AccountID *string `json:"account_id,omitempty"`
	// Apex Asset ID for this asset. This will not be returned in the initial CreateOrder response and will be available after an order completes validation. If the provided identifier does not match any Apex asset available for trading, an OrderRejectReason of "UNKNOWN_SECURITY" will be returned and the asset_id will not be set.
	AssetID *string `json:"asset_id,omitempty"`
	// The type of the asset in this order
	AssetType *BasketOrderAssetType `json:"asset_type,omitempty"`
	// The average prices, as weighted averages, across all executions in this order. Will be absent if an order has no executions.
	//
	//  When asset_type = EQUITY, there will be at most one value present, with a type of PRICE_PER_UNIT. This will have up to 4 decimal places for USD amounts less than $1, and a maximum of two for larger USD amounts.
	AveragePrices []ExecutedPrice `json:"average_prices,omitempty"`
	// System generated unique id for the basket order.
	BasketOrderID *string `json:"basket_order_id,omitempty"`
	// User-supplied unique order ID. Cannot be more than 40 characters long.
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// Time the order request was received by the client
	ClientOrderReceivedTime *time.Time `json:"client_order_received_time,omitempty"`
	// Time of the order creation
	CreateTime *time.Time `json:"create_time,omitempty"`
	// The product of order quantity & price, summed across all fills, reported in the currency specified in the order. (This will be rounded to 2 decimal places for USD currencies). Will be absent if an order has no fill information.
	CumulativeNotionalValue *BasketOrderCumulativeNotionalValue `json:"cumulative_notional_value,omitempty"`
	// The summed quantity value across all fills in this order, up to a maximum of 5 decimal places. Will be absent if an order has no fill information.
	FilledQuantity *BasketOrderFilledQuantity `json:"filled_quantity,omitempty"`
	// Identifier of the asset (of the type specified in `identifier_type`).
	Identifier *string `json:"identifier,omitempty"`
	// The identifier type of the asset being ordered. For Equities: only SYMBOL is supported
	IdentifierType *BasketOrderIdentifierType `json:"identifier_type,omitempty"`
	// Time of the last order update
	LastUpdateTime *time.Time `json:"last_update_time,omitempty"`
	// System generated name of the basket order.
	Name *string `json:"name,omitempty"`
	// When an order has the REJECTED status, this will be populated with a system code describing the rejection.
	OrderRejectedReason *BasketOrderOrderRejectedReason `json:"order_rejected_reason,omitempty"`
	// The processing status of the order
	OrderStatus *BasketOrderOrderStatus `json:"order_status,omitempty"`
	// The execution type of this order.
	OrderType *BasketOrderOrderType `json:"order_type,omitempty"`
	// Numeric quantity of the order. For Equities: Represents the number of shares, must be greater than zero and may not exceed 5 decimal places.
	Quantity *BasketOrderQuantity `json:"quantity,omitempty"`
	// The side of this order.
	Side *BasketOrderSide `json:"side,omitempty"`
	// Must be the value "DAY". Regulatory requirements dictate that the system capture the intended time_in_force, which is why this a mandatory field.
	TimeInForce *BasketOrderTimeInForce `json:"time_in_force,omitempty"`
}

func (b BasketOrder) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BasketOrder) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *BasketOrder) GetAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AccountID
}

func (o *BasketOrder) GetAssetID() *string {
	if o == nil {
		return nil
	}
	return o.AssetID
}

func (o *BasketOrder) GetAssetType() *BasketOrderAssetType {
	if o == nil {
		return nil
	}
	return o.AssetType
}

func (o *BasketOrder) GetAveragePrices() []ExecutedPrice {
	if o == nil {
		return nil
	}
	return o.AveragePrices
}

func (o *BasketOrder) GetBasketOrderID() *string {
	if o == nil {
		return nil
	}
	return o.BasketOrderID
}

func (o *BasketOrder) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *BasketOrder) GetClientOrderReceivedTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClientOrderReceivedTime
}

func (o *BasketOrder) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *BasketOrder) GetCumulativeNotionalValue() *BasketOrderCumulativeNotionalValue {
	if o == nil {
		return nil
	}
	return o.CumulativeNotionalValue
}

func (o *BasketOrder) GetFilledQuantity() *BasketOrderFilledQuantity {
	if o == nil {
		return nil
	}
	return o.FilledQuantity
}

func (o *BasketOrder) GetIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.Identifier
}

func (o *BasketOrder) GetIdentifierType() *BasketOrderIdentifierType {
	if o == nil {
		return nil
	}
	return o.IdentifierType
}

func (o *BasketOrder) GetLastUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUpdateTime
}

func (o *BasketOrder) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *BasketOrder) GetOrderRejectedReason() *BasketOrderOrderRejectedReason {
	if o == nil {
		return nil
	}
	return o.OrderRejectedReason
}

func (o *BasketOrder) GetOrderStatus() *BasketOrderOrderStatus {
	if o == nil {
		return nil
	}
	return o.OrderStatus
}

func (o *BasketOrder) GetOrderType() *BasketOrderOrderType {
	if o == nil {
		return nil
	}
	return o.OrderType
}

func (o *BasketOrder) GetQuantity() *BasketOrderQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *BasketOrder) GetSide() *BasketOrderSide {
	if o == nil {
		return nil
	}
	return o.Side
}

func (o *BasketOrder) GetTimeInForce() *BasketOrderTimeInForce {
	if o == nil {
		return nil
	}
	return o.TimeInForce
}
