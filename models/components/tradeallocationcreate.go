// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"time"

	"github.com/afs-public/ascend-sdk-go/internal/utils"
)

// TradeAllocationCreateAssetType - Type of the asset being traded.
type TradeAllocationCreateAssetType string

const (
	TradeAllocationCreateAssetTypeAssetTypeUnspecified TradeAllocationCreateAssetType = "ASSET_TYPE_UNSPECIFIED"
	TradeAllocationCreateAssetTypeEquity               TradeAllocationCreateAssetType = "EQUITY"
	TradeAllocationCreateAssetTypeFixedIncome          TradeAllocationCreateAssetType = "FIXED_INCOME"
)

func (e TradeAllocationCreateAssetType) ToPointer() *TradeAllocationCreateAssetType {
	return &e
}

// TradeAllocationCreateBrokerCapacity - Broker capacity for the trade.
type TradeAllocationCreateBrokerCapacity string

const (
	TradeAllocationCreateBrokerCapacityCapacityUnspecified TradeAllocationCreateBrokerCapacity = "CAPACITY_UNSPECIFIED"
	TradeAllocationCreateBrokerCapacityAgency              TradeAllocationCreateBrokerCapacity = "AGENCY"
	TradeAllocationCreateBrokerCapacityPrincipal           TradeAllocationCreateBrokerCapacity = "PRINCIPAL"
	TradeAllocationCreateBrokerCapacityMixed               TradeAllocationCreateBrokerCapacity = "MIXED"
)

func (e TradeAllocationCreateBrokerCapacity) ToPointer() *TradeAllocationCreateBrokerCapacity {
	return &e
}

// TradeAllocationCreateIdentifierType - Identifier type for the asset being traded.
type TradeAllocationCreateIdentifierType string

const (
	TradeAllocationCreateIdentifierTypeIdentifierTypeUnspecified TradeAllocationCreateIdentifierType = "IDENTIFIER_TYPE_UNSPECIFIED"
	TradeAllocationCreateIdentifierTypeAssetID                   TradeAllocationCreateIdentifierType = "ASSET_ID"
	TradeAllocationCreateIdentifierTypeSymbol                    TradeAllocationCreateIdentifierType = "SYMBOL"
	TradeAllocationCreateIdentifierTypeCusip                     TradeAllocationCreateIdentifierType = "CUSIP"
	TradeAllocationCreateIdentifierTypeIsin                      TradeAllocationCreateIdentifierType = "ISIN"
)

func (e TradeAllocationCreateIdentifierType) ToPointer() *TradeAllocationCreateIdentifierType {
	return &e
}

// TradeAllocationCreateSideModifier - Side modifier for the trade allocation.
type TradeAllocationCreateSideModifier string

const (
	TradeAllocationCreateSideModifierSideModifierUnspecified TradeAllocationCreateSideModifier = "SIDE_MODIFIER_UNSPECIFIED"
	TradeAllocationCreateSideModifierShort                   TradeAllocationCreateSideModifier = "SHORT"
	TradeAllocationCreateSideModifierShortExempt             TradeAllocationCreateSideModifier = "SHORT_EXEMPT"
	TradeAllocationCreateSideModifierShortCover              TradeAllocationCreateSideModifier = "SHORT_COVER"
	TradeAllocationCreateSideModifierOpen                    TradeAllocationCreateSideModifier = "OPEN"
	TradeAllocationCreateSideModifierClose                   TradeAllocationCreateSideModifier = "CLOSE"
)

func (e TradeAllocationCreateSideModifier) ToPointer() *TradeAllocationCreateSideModifier {
	return &e
}

type TradeAllocationCreateSpecialInstructions string

const (
	TradeAllocationCreateSpecialInstructionsSpecialInstructionsUnspecified TradeAllocationCreateSpecialInstructions = "SPECIAL_INSTRUCTIONS_UNSPECIFIED"
	TradeAllocationCreateSpecialInstructionsRule144                        TradeAllocationCreateSpecialInstructions = "RULE_144"
	TradeAllocationCreateSpecialInstructionsWithDividend                   TradeAllocationCreateSpecialInstructions = "WITH_DIVIDEND"
	TradeAllocationCreateSpecialInstructionsWithRights                     TradeAllocationCreateSpecialInstructions = "WITH_RIGHTS"
	TradeAllocationCreateSpecialInstructionsCloseContract                  TradeAllocationCreateSpecialInstructions = "CLOSE_CONTRACT"
	TradeAllocationCreateSpecialInstructionsCoverShort                     TradeAllocationCreateSpecialInstructions = "COVER_SHORT"
	TradeAllocationCreateSpecialInstructionsCrossTrade                     TradeAllocationCreateSpecialInstructions = "CROSS_TRADE"
	TradeAllocationCreateSpecialInstructionsOpenContractCovered            TradeAllocationCreateSpecialInstructions = "OPEN_CONTRACT_COVERED"
	TradeAllocationCreateSpecialInstructionsDiscretionExercised            TradeAllocationCreateSpecialInstructions = "DISCRETION_EXERCISED"
	TradeAllocationCreateSpecialInstructionsDiscretionNotExercised         TradeAllocationCreateSpecialInstructions = "DISCRETION_NOT_EXERCISED"
	TradeAllocationCreateSpecialInstructionsOptionAssignment               TradeAllocationCreateSpecialInstructions = "OPTION_ASSIGNMENT"
	TradeAllocationCreateSpecialInstructionsEmployeeStockOption            TradeAllocationCreateSpecialInstructions = "EMPLOYEE_STOCK_OPTION"
	TradeAllocationCreateSpecialInstructionsInvestmentBanking              TradeAllocationCreateSpecialInstructions = "INVESTMENT_BANKING"
	TradeAllocationCreateSpecialInstructionsBrokerDealerOrder              TradeAllocationCreateSpecialInstructions = "BROKER_DEALER_ORDER"
	TradeAllocationCreateSpecialInstructionsMakeMarketInSecurity           TradeAllocationCreateSpecialInstructions = "MAKE_MARKET_IN_SECURITY"
	TradeAllocationCreateSpecialInstructionsMakeMarketSolicited            TradeAllocationCreateSpecialInstructions = "MAKE_MARKET_SOLICITED"
	TradeAllocationCreateSpecialInstructionsMakeMarketUnsolicited          TradeAllocationCreateSpecialInstructions = "MAKE_MARKET_UNSOLICITED"
	TradeAllocationCreateSpecialInstructionsCustomerDirected               TradeAllocationCreateSpecialInstructions = "CUSTOMER_DIRECTED"
	TradeAllocationCreateSpecialInstructionsFullyRegistered                TradeAllocationCreateSpecialInstructions = "FULLY_REGISTERED"
	TradeAllocationCreateSpecialInstructionsOpenContract                   TradeAllocationCreateSpecialInstructions = "OPEN_CONTRACT"
	TradeAllocationCreateSpecialInstructionsOddlotDiffOnRequest            TradeAllocationCreateSpecialInstructions = "ODDLOT_DIFF_ON_REQUEST"
	TradeAllocationCreateSpecialInstructionsProspectusEnclosed             TradeAllocationCreateSpecialInstructions = "PROSPECTUS_ENCLOSED"
	TradeAllocationCreateSpecialInstructionsProspectusSeparateMail         TradeAllocationCreateSpecialInstructions = "PROSPECTUS_SEPARATE_MAIL"
	TradeAllocationCreateSpecialInstructionsSolicited                      TradeAllocationCreateSpecialInstructions = "SOLICITED"
	TradeAllocationCreateSpecialInstructionsUnsolicited                    TradeAllocationCreateSpecialInstructions = "UNSOLICITED"
	TradeAllocationCreateSpecialInstructionsXDividend                      TradeAllocationCreateSpecialInstructions = "X_DIVIDEND"
	TradeAllocationCreateSpecialInstructionsActingAsPrincipal              TradeAllocationCreateSpecialInstructions = "ACTING_AS_PRINCIPAL"
	TradeAllocationCreateSpecialInstructionsAveragePrice                   TradeAllocationCreateSpecialInstructions = "AVERAGE_PRICE"
	TradeAllocationCreateSpecialInstructionsBrokerLiquidation              TradeAllocationCreateSpecialInstructions = "BROKER_LIQUIDATION"
	TradeAllocationCreateSpecialInstructionsCouponBooks                    TradeAllocationCreateSpecialInstructions = "COUPON_BOOKS"
	TradeAllocationCreateSpecialInstructionsHasPostageFee                  TradeAllocationCreateSpecialInstructions = "HAS_POSTAGE_FEE"
	TradeAllocationCreateSpecialInstructionsInternetOrder                  TradeAllocationCreateSpecialInstructions = "INTERNET_ORDER"
	TradeAllocationCreateSpecialInstructionsMarginSellout                  TradeAllocationCreateSpecialInstructions = "MARGIN_SELLOUT"
	TradeAllocationCreateSpecialInstructionsMarketMakersAsPrincipal        TradeAllocationCreateSpecialInstructions = "MARKET_MAKERS_AS_PRINCIPAL"
	TradeAllocationCreateSpecialInstructionsNegativeNetProceed             TradeAllocationCreateSpecialInstructions = "NEGATIVE_NET_PROCEED"
	TradeAllocationCreateSpecialInstructionsPreFigIndicator                TradeAllocationCreateSpecialInstructions = "PRE_FIG_INDICATOR"
	TradeAllocationCreateSpecialInstructionsRisklessPrincipalInstruction   TradeAllocationCreateSpecialInstructions = "RISKLESS_PRINCIPAL_INSTRUCTION"
	TradeAllocationCreateSpecialInstructionsShortInstruction               TradeAllocationCreateSpecialInstructions = "SHORT_INSTRUCTION"
	TradeAllocationCreateSpecialInstructionsThirdMarket                    TradeAllocationCreateSpecialInstructions = "THIRD_MARKET"
	TradeAllocationCreateSpecialInstructionsSuppressMsrbTransmission       TradeAllocationCreateSpecialInstructions = "SUPPRESS_MSRB_TRANSMISSION"
	TradeAllocationCreateSpecialInstructionsSuppressTraceReporting         TradeAllocationCreateSpecialInstructions = "SUPPRESS_TRACE_REPORTING"
	TradeAllocationCreateSpecialInstructionsSuppressEmailNotification      TradeAllocationCreateSpecialInstructions = "SUPPRESS_EMAIL_NOTIFICATION"
	TradeAllocationCreateSpecialInstructionsStockReward                    TradeAllocationCreateSpecialInstructions = "STOCK_REWARD"
	TradeAllocationCreateSpecialInstructionsSuppressRegFees                TradeAllocationCreateSpecialInstructions = "SUPPRESS_REG_FEES"
	TradeAllocationCreateSpecialInstructionsSuppressSecFee                 TradeAllocationCreateSpecialInstructions = "SUPPRESS_SEC_FEE"
	TradeAllocationCreateSpecialInstructionsSuppressTafFee                 TradeAllocationCreateSpecialInstructions = "SUPPRESS_TAF_FEE"
	TradeAllocationCreateSpecialInstructionsDividendReinvestment           TradeAllocationCreateSpecialInstructions = "DIVIDEND_REINVESTMENT"
)

func (e TradeAllocationCreateSpecialInstructions) ToPointer() *TradeAllocationCreateSpecialInstructions {
	return &e
}

// ToSide - Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
type ToSide string

const (
	ToSideSideUnspecified ToSide = "SIDE_UNSPECIFIED"
	ToSideBuy             ToSide = "BUY"
	ToSideSell            ToSide = "SELL"
)

func (e ToSide) ToPointer() *ToSide {
	return &e
}

// TradeAllocationCreateWhenIssued - Denotes that this trade allocation was either when_issued or when_distributed.
type TradeAllocationCreateWhenIssued string

const (
	TradeAllocationCreateWhenIssuedWhenIssuedTypeUnspecified TradeAllocationCreateWhenIssued = "WHEN_ISSUED_TYPE_UNSPECIFIED"
	TradeAllocationCreateWhenIssuedWhenIssued                TradeAllocationCreateWhenIssued = "WHEN_ISSUED"
	TradeAllocationCreateWhenIssuedWhenDistributed           TradeAllocationCreateWhenIssued = "WHEN_DISTRIBUTED"
)

func (e TradeAllocationCreateWhenIssued) ToPointer() *TradeAllocationCreateWhenIssued {
	return &e
}

// TradeAllocationCreate - A TradeAllocation represents the movement of positions between two ascend accounts.
type TradeAllocationCreate struct {
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	AccruedInterestAmount *DecimalCreate `json:"accrued_interest_amount,omitempty"`
	// Free form instructions that can be used to provide additional instructions (that are not captured by existing special instructions) and will be put on the trade confirm.
	AdditionalInstructions *string `json:"additional_instructions,omitempty"`
	// Type of the asset being traded.
	AssetType TradeAllocationCreateAssetType `json:"asset_type"`
	// The yield associated with an individual fill of a fixed income trade. Required for FIXED_INCOME trades. Not allowed for trades of other instrument types.
	BondYield []BondYieldCreate `json:"bond_yield,omitempty"`
	// Broker capacity for the trade.
	BrokerCapacity TradeAllocationCreateBrokerCapacity `json:"broker_capacity"`
	// The unique identifier that is associated with an order. This is useful for associating the trade allocation with the original trade. This will be assigned a unique UUID if not provided.
	ClientOrderID *string `json:"client_order_id,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	CommissionAmount *DecimalCreate `json:"commission_amount,omitempty"`
	// Timestamp of when the trade allocation took place. If settlement_date is not provided, this field will be converted into Eastern Time and used to calculate settlement_date.
	ExecutionTime *time.Time `json:"execution_time"`
	// Client calculated fees that will only be applied to the to_account_id. Regulatory fees will be calculated automatically if they are not explicitly overwritten or suppressed.
	Fees []BookingFeeCreate `json:"fees,omitempty"`
	// The ULID formatted account_id that the positions will be moved from.
	FromAccountID string `json:"from_account_id"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	GrossAmount *DecimalCreate `json:"gross_amount,omitempty"`
	// Identifier (of the type specified in `identifier_type`). Responses will supply the originally requested identifier.
	Identifier string `json:"identifier"`
	// Identifier type for the asset being traded.
	IdentifierType TradeAllocationCreateIdentifierType `json:"identifier_type"`
	// Unicode CLDR region code. Issuing Region Code is required for some `identifier_type`s, especially CUSIP.
	IssuingRegionCode *string `json:"issuing_region_code,omitempty"`
	// One or many lot matching instructions for the trade allocation.
	LotMatchingInstructions []LotCreate `json:"lot_matching_instructions,omitempty"`
	// Caller provided but can be used for booking-service to note original trade details when booking into the error account or using the error asset.
	Memo *string `json:"memo,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	PrevailingMarketPrice *DecimalCreate `json:"prevailing_market_price,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	Price DecimalCreate `json:"price"`
	// Price adjustment that will be applied to the net price of the security.
	PriceAdjustment *PriceAdjustmentCreate `json:"price_adjustment,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	Quantity DecimalCreate `json:"quantity"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	SettlementDate *DateCreate `json:"settlement_date,omitempty"`
	// Side modifier for the trade allocation.
	SideModifier *TradeAllocationCreateSideModifier `json:"side_modifier,omitempty"`
	// The source of the submission.
	SourceApplication string `json:"source_application"`
	// An enumerated list of values used to indicate certain attributes about a trade allocation (E.g. BROKER_LIQUIDATION) and/or trigger downstream processing rules (e.g. SUPPRESS_TRACE_REPORTING)
	SpecialInstructions []TradeAllocationCreateSpecialInstructions `json:"special_instructions,omitempty"`
	// The ULID formatted account_id that the positions will be moved to.
	ToAccountID string `json:"to_account_id"`
	// Denotes the side of the position going into the to_account_id. A to_side of SELL indicates the position will be allocated with a BUY out of the from_account, and a SELL into the to_account.
	ToSide ToSide `json:"to_side"`
	// Denotes that this trade allocation was either when_issued or when_distributed.
	WhenIssued *TradeAllocationCreateWhenIssued `json:"when_issued,omitempty"`
}

func (t TradeAllocationCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TradeAllocationCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TradeAllocationCreate) GetAccruedInterestAmount() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.AccruedInterestAmount
}

func (o *TradeAllocationCreate) GetAdditionalInstructions() *string {
	if o == nil {
		return nil
	}
	return o.AdditionalInstructions
}

func (o *TradeAllocationCreate) GetAssetType() TradeAllocationCreateAssetType {
	if o == nil {
		return TradeAllocationCreateAssetType("")
	}
	return o.AssetType
}

func (o *TradeAllocationCreate) GetBondYield() []BondYieldCreate {
	if o == nil {
		return nil
	}
	return o.BondYield
}

func (o *TradeAllocationCreate) GetBrokerCapacity() TradeAllocationCreateBrokerCapacity {
	if o == nil {
		return TradeAllocationCreateBrokerCapacity("")
	}
	return o.BrokerCapacity
}

func (o *TradeAllocationCreate) GetClientOrderID() *string {
	if o == nil {
		return nil
	}
	return o.ClientOrderID
}

func (o *TradeAllocationCreate) GetCommissionAmount() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.CommissionAmount
}

func (o *TradeAllocationCreate) GetExecutionTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.ExecutionTime
}

func (o *TradeAllocationCreate) GetFees() []BookingFeeCreate {
	if o == nil {
		return nil
	}
	return o.Fees
}

func (o *TradeAllocationCreate) GetFromAccountID() string {
	if o == nil {
		return ""
	}
	return o.FromAccountID
}

func (o *TradeAllocationCreate) GetGrossAmount() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *TradeAllocationCreate) GetIdentifier() string {
	if o == nil {
		return ""
	}
	return o.Identifier
}

func (o *TradeAllocationCreate) GetIdentifierType() TradeAllocationCreateIdentifierType {
	if o == nil {
		return TradeAllocationCreateIdentifierType("")
	}
	return o.IdentifierType
}

func (o *TradeAllocationCreate) GetIssuingRegionCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingRegionCode
}

func (o *TradeAllocationCreate) GetLotMatchingInstructions() []LotCreate {
	if o == nil {
		return nil
	}
	return o.LotMatchingInstructions
}

func (o *TradeAllocationCreate) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *TradeAllocationCreate) GetPrevailingMarketPrice() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.PrevailingMarketPrice
}

func (o *TradeAllocationCreate) GetPrice() DecimalCreate {
	if o == nil {
		return DecimalCreate{}
	}
	return o.Price
}

func (o *TradeAllocationCreate) GetPriceAdjustment() *PriceAdjustmentCreate {
	if o == nil {
		return nil
	}
	return o.PriceAdjustment
}

func (o *TradeAllocationCreate) GetQuantity() DecimalCreate {
	if o == nil {
		return DecimalCreate{}
	}
	return o.Quantity
}

func (o *TradeAllocationCreate) GetSettlementDate() *DateCreate {
	if o == nil {
		return nil
	}
	return o.SettlementDate
}

func (o *TradeAllocationCreate) GetSideModifier() *TradeAllocationCreateSideModifier {
	if o == nil {
		return nil
	}
	return o.SideModifier
}

func (o *TradeAllocationCreate) GetSourceApplication() string {
	if o == nil {
		return ""
	}
	return o.SourceApplication
}

func (o *TradeAllocationCreate) GetSpecialInstructions() []TradeAllocationCreateSpecialInstructions {
	if o == nil {
		return nil
	}
	return o.SpecialInstructions
}

func (o *TradeAllocationCreate) GetToAccountID() string {
	if o == nil {
		return ""
	}
	return o.ToAccountID
}

func (o *TradeAllocationCreate) GetToSide() ToSide {
	if o == nil {
		return ToSide("")
	}
	return o.ToSide
}

func (o *TradeAllocationCreate) GetWhenIssued() *TradeAllocationCreateWhenIssued {
	if o == nil {
		return nil
	}
	return o.WhenIssued
}
