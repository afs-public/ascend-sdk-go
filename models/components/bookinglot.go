// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// BookingLotMoneyPrice - A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
//
//	[BigDecimal]:
//	https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
//	[decimal.Decimal]: https://docs.python.org/3/library/decimal.html
type BookingLotMoneyPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *BookingLotMoneyPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// BookingLotMoney - Deprecated; use the price field instead
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type BookingLotMoney struct {
	CurrencyCode *string               `json:"currency_code,omitempty"`
	Price        *BookingLotMoneyPrice `json:"price,omitempty"`
}

func (o *BookingLotMoney) GetCurrencyCode() *string {
	if o == nil {
		return nil
	}
	return o.CurrencyCode
}

func (o *BookingLotMoney) GetPrice() *BookingLotMoneyPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

// BookingLotPrice - Lot price in the same currency as the trade price
type BookingLotPrice struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *BookingLotPrice) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// BookingLotQuantity - Lot quantity
type BookingLotQuantity struct {
	// The decimal value, as a string; Refer to [Google’s Decimal type protocol buffer](https://github.com/googleapis/googleapis/blob/40203ca1880849480bbff7b8715491060bbccdf1/google/type/decimal.proto#L33) for details
	Value *string `json:"value,omitempty"`
}

func (o *BookingLotQuantity) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

// TradeDate - Trade date for this lot specifically
type TradeDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `json:"day,omitempty"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `json:"month,omitempty"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `json:"year,omitempty"`
}

func (o *TradeDate) GetDay() *int {
	if o == nil {
		return nil
	}
	return o.Day
}

func (o *TradeDate) GetMonth() *int {
	if o == nil {
		return nil
	}
	return o.Month
}

func (o *TradeDate) GetYear() *int {
	if o == nil {
		return nil
	}
	return o.Year
}

// BookingLot - For use in specifying lot matching instructions on a trade
type BookingLot struct {
	// User-specified ID for the lot
	ID *string `json:"id,omitempty"`
	// Deprecated; use the price field instead
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Money *BookingLotMoney `json:"money,omitempty"`
	// Lot price in the same currency as the trade price
	Price *BookingLotPrice `json:"price,omitempty"`
	// Lot quantity
	Quantity *BookingLotQuantity `json:"quantity,omitempty"`
	// Trade date for this lot specifically
	TradeDate *TradeDate `json:"trade_date,omitempty"`
}

func (o *BookingLot) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *BookingLot) GetMoney() *BookingLotMoney {
	if o == nil {
		return nil
	}
	return o.Money
}

func (o *BookingLot) GetPrice() *BookingLotPrice {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *BookingLot) GetQuantity() *BookingLotQuantity {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *BookingLot) GetTradeDate() *TradeDate {
	if o == nil {
		return nil
	}
	return o.TradeDate
}
