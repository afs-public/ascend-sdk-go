// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// TransfersFeeCreateType - The type of the fee being charged
type TransfersFeeCreateType string

const (
	TransfersFeeCreateTypeTypeUnspecified TransfersFeeCreateType = "TYPE_UNSPECIFIED"
	TransfersFeeCreateTypeManagement      TransfersFeeCreateType = "MANAGEMENT"
	TransfersFeeCreateTypeAdvisory        TransfersFeeCreateType = "ADVISORY"
	TransfersFeeCreateTypeExchange        TransfersFeeCreateType = "EXCHANGE"
	TransfersFeeCreateTypePlatform        TransfersFeeCreateType = "PLATFORM"
	TransfersFeeCreateTypeInactivity      TransfersFeeCreateType = "INACTIVITY"
)

func (e TransfersFeeCreateType) ToPointer() *TransfersFeeCreateType {
	return &e
}
func (e *TransfersFeeCreateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "MANAGEMENT":
		fallthrough
	case "ADVISORY":
		fallthrough
	case "EXCHANGE":
		fallthrough
	case "PLATFORM":
		fallthrough
	case "INACTIVITY":
		*e = TransfersFeeCreateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransfersFeeCreateType: %v", v)
	}
}

// TransfersFeeCreate - A transfer using the FEE mechanism. Funds are moved from a customer's brokerage account to the firm account
type TransfersFeeCreate struct {
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	Amount DecimalCreate `json:"amount"`
	// External identifier supplied by the API caller. Each request must have a unique pairing of client_transfer_id and account
	ClientTransferID string `json:"client_transfer_id"`
	// Optional description information that will attach to this transaction
	Description *string `json:"description,omitempty"`
	// The type of the fee being charged
	Type TransfersFeeCreateType `json:"type"`
}

func (o *TransfersFeeCreate) GetAmount() DecimalCreate {
	if o == nil {
		return DecimalCreate{}
	}
	return o.Amount
}

func (o *TransfersFeeCreate) GetClientTransferID() string {
	if o == nil {
		return ""
	}
	return o.ClientTransferID
}

func (o *TransfersFeeCreate) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *TransfersFeeCreate) GetType() TransfersFeeCreateType {
	if o == nil {
		return TransfersFeeCreateType("")
	}
	return o.Type
}
