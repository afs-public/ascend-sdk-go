// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// Money - Deprecated; use the price field instead
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type Money struct {
	CurrencyCode *string `json:"currency_code,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	Price *DecimalCreate `json:"price,omitempty"`
}

func (o *Money) GetCurrencyCode() *string {
	if o == nil {
		return nil
	}
	return o.CurrencyCode
}

func (o *Money) GetPrice() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.Price
}

// LotCreate - For use in specifying lot matching instructions on a trade
type LotCreate struct {
	// User-specified ID for the lot
	ID *string `json:"id,omitempty"`
	// Deprecated; use the price field instead
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Money *Money `json:"money,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	Price *DecimalCreate `json:"price,omitempty"`
	// A representation of a decimal value, such as 2.5. Clients may convert values into language-native decimal formats, such as Java's [BigDecimal][] or Python's [decimal.Decimal][].
	//
	//  [BigDecimal]:
	//  https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/math/BigDecimal.html
	//  [decimal.Decimal]: https://docs.python.org/3/library/decimal.html
	Quantity *DecimalCreate `json:"quantity,omitempty"`
	// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following:
	//
	//  * A full date, with non-zero year, month, and day values * A month and day value, with a zero year, such as an anniversary * A year on its own, with zero month and day values * A year and month value, with a zero day, such as a credit card expiration date
	//
	//  Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and `google.protobuf.Timestamp`.
	TradeDate *DateCreate `json:"trade_date,omitempty"`
}

func (o *LotCreate) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *LotCreate) GetMoney() *Money {
	if o == nil {
		return nil
	}
	return o.Money
}

func (o *LotCreate) GetPrice() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *LotCreate) GetQuantity() *DecimalCreate {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *LotCreate) GetTradeDate() *DateCreate {
	if o == nil {
		return nil
	}
	return o.TradeDate
}
