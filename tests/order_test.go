// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"testing"

	ascendsdkgo "github.com/afs-public/ascend-sdk-go"
	"github.com/afs-public/ascend-sdk-go/internal/utils"
	"github.com/afs-public/ascend-sdk-go/models/components"
	"github.com/afs-public/ascend-sdk-go/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestOrder_OrderSetExtraReportingData(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("Order_SetExtraReportingData")

	s := ascendsdkgo.New(
		ascendsdkgo.WithServerURL(utils.GetEnv("SERVICE_ACCOUNT_CREDS_URL", "")),
		ascendsdkgo.WithSecurity(components.Security{
			APIKey: ascendsdkgo.String(utils.GetEnv("API_KEY", "value")),
			ServiceAccountCreds: &components.ServiceAccountCreds{
				PrivateKey:   utils.GetEnv("SERVICE_ACCOUNT_CREDS_PRIVATE_KEY", "value"),
				Name:         utils.GetEnv("SERVICE_ACCOUNT_CREDS_NAME", "value"),
				Organization: utils.GetEnv("SERVICE_ACCOUNT_CREDS_ORGANIZATION", "value"),
				Type:         utils.GetEnv("SERVICE_ACCOUNT_CREDS_TYPE", "value"),
			},
		}),
		ascendsdkgo.WithClient(testHTTPClient),
	)

	res, err := s.Orders.SetExtraReportingData(ctx, "01K6P14WKCJT0G38KKHY52M4BQ", "a73f4471-832c-4ff2-9b14-f44420592a67", components.SetExtraReportingDataRequestCreate{
		CancelConfirmedTime: types.MustNewTimeFromString("2025-12-13T15:28:17.262732Z"),
		Name:                "accounts/01K6P14WKCJT0G38KKHY52M4BQ/orders/a73f4471-832c-4ff2-9b14-f44420592a67",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestOrder_OrderListCorrespondentOrders(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("Order_ListCorrespondentOrders")

	s := ascendsdkgo.New(
		ascendsdkgo.WithServerURL(utils.GetEnv("SERVICE_ACCOUNT_CREDS_URL", "")),
		ascendsdkgo.WithSecurity(components.Security{
			APIKey: ascendsdkgo.String(utils.GetEnv("API_KEY", "value")),
			ServiceAccountCreds: &components.ServiceAccountCreds{
				PrivateKey:   utils.GetEnv("SERVICE_ACCOUNT_CREDS_PRIVATE_KEY", "value"),
				Name:         utils.GetEnv("SERVICE_ACCOUNT_CREDS_NAME", "value"),
				Organization: utils.GetEnv("SERVICE_ACCOUNT_CREDS_ORGANIZATION", "value"),
				Type:         utils.GetEnv("SERVICE_ACCOUNT_CREDS_TYPE", "value"),
			},
		}),
		ascendsdkgo.WithClient(testHTTPClient),
	)

	res, err := s.Orders.ListCorrespondentOrders(ctx, utils.GetEnv("CORRESPONDENT_ID", ""), ascendsdkgo.String(""), ascendsdkgo.Int(25), ascendsdkgo.String(""))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}
